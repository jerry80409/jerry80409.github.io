<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PAWS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jerry80409.github.io/"/>
  <updated>2018-12-28T15:24:28.357Z</updated>
  <id>https://jerry80409.github.io/</id>
  
  <author>
    <name>jerry80409</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dialogflow, Actions on google 學習筆記</title>
    <link href="https://jerry80409.github.io/2018/12/28/dialogflow-with-actions-on-google/"/>
    <id>https://jerry80409.github.io/2018/12/28/dialogflow-with-actions-on-google/</id>
    <published>2018-12-28T02:22:37.000Z</published>
    <updated>2018-12-28T15:24:28.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="qwiklabs"><a href="#qwiklabs" class="headerlink" title="qwiklabs"></a>qwiklabs</h3><p><a href="https://google.qwiklabs.com/home" target="_blank" rel="noopener">qwiklabs</a> 是一個的 GCP 學習沙盒(sandbox), 讓你可以快樂的在裡面玩沙, 而不用搞壞公司的 GCP 環境還被扣費用, 每個 labs 教程結束後, 會頒發一個 badge 給你, 還滿有成就的, 上完一系列的 labs 還可以參加考試領證書, 有點貴就是了… AWS 也有 qwiklabs, 服務一樣就不介紹了。<br>從 catalog 裡面還可以篩選一些 <a href="https://google.qwiklabs.com/catalog?keywords=&amp;format%5B%5D=any&amp;level%5B%5D=any&amp;duration%5B%5D=any&amp;price%5B%5D=free&amp;modality%5B%5D=any&amp;language%5B%5D=any" target="_blank" rel="noopener">free labs</a>, 我的 GCP 之路大概就是這樣起手…<br>寫這篇文章的主要 <a href="https://google.qwiklabs.com/focuses/2196?catalog_rank=%7B%22rank%22%3A1%2C%22num_filters%22%3A1%2C%22has_search%22%3Atrue%7D&amp;parent=catalog&amp;search_id=1782895" target="_blank" rel="noopener">課程</a></p><h3 id="Dialogflow"><a href="#Dialogflow" class="headerlink" title="Dialogflow"></a>Dialogflow</h3><p>對後端工程師來說 API 就是我們的 UI, 不用刻任何介面就可以把服務應用到 chat-bot 上去是很爽的一件事, 如果要更友善更開放就需要 NLP 的支援, 但是架設 NLP service 又是大工程, 要架設 NLP, 餵字庫, 算權重, etc., 聽同事介紹說 DialogFlow 在處理中文的 intent, session 很強大, 就順便在 qwiklabs 上用看看, 幾個概念了解一下就好,</p><ul><li>Action: an interaction built for Google Assistant that performs specific tasks based on user input.</li><li>Intent: the goal of the Action (e.g. generate quotes). An intent takes user input and channels it to trigger an event.</li><li>Agent (Dialogflow): a module that uses NLU and ML to transform user input into actionable data to be used by an Assistant application.</li></ul><h3 id="Actions-on-google"><a href="#Actions-on-google" class="headerlink" title="Actions on google"></a>Actions on google</h3><p>主要是用來整合 Google 相關產品 (Dialogflow, etc.) 與 Google Assistant 與 Google Search 的平台, 用了就知道, 幾個概念了解一下就好</p><ul><li>Intent: A goal or task that users want to do, such as ordering coffee or finding a piece of music. In Actions on Google, this is represented as a unique identifier and the corresponding user utterances that can trigger the intent.</li><li>Action: An interaction you build for the Assistant that supports a specific intent and has a corresponding fulfillment that processes the intent.</li><li>Fulfillment: A service, app, feed, conversation, or other logic that handles an intent and carries out the corresponding Action.</li></ul><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><ol><li>需要有一個 GCP project-id</li><li><strong>Actions on google</strong> import GCP project-id</li><li><strong>Actions on google</strong> 的 project 裡面建立 actions, 會自動導向到 dialogflow 的 <code>Create Agent</code></li><li>建立好 Agent 後, 就建立 <code>intents</code>, 預設有 <code>Default Fallback Intent</code> 跟 <code>Welcome Intent</code></li><li>選擇 Fallback Intent, 裡面有 <code>Training phrases</code>, 訓練一些慣用語, Agent 會自己訓練跟學習</li><li>一樣在 Fallback Intent 階段, 把對應的 <code>Response</code> 設定上去</li><li>Save <code>Intents</code></li><li>打開 <code>Activity Controls</code> 的權限, 讓 google 蒐集你的相關資料做訓練參考用吧, 我猜</li><li><strong>Actions on google</strong> 做 Simulator 模擬測試</li></ol><h3 id="Fallback-Intents"><a href="#Fallback-Intents" class="headerlink" title="Fallback Intents"></a>Fallback Intents</h3><p>Fallback Intent 就是當 Agent 無法辨識使用者的 intent 的時候, 有預設了一些 Response, 用來作 Fallback 策略的<br><img src="/img/dialogflow-with-actions-on-google/fallback-intent.png" alt="fallback intent"></p><h3 id="Simulator"><a href="#Simulator" class="headerlink" title="Simulator"></a>Simulator</h3><p>Simulator 可以模擬使用者的 input(語音, 文字, etc.), 小小的測試一下, 輸入 shakespeare 就沒反應了<br><img src="/img/dialogflow-with-actions-on-google/simulator.png" alt="actions on google simulator"></p><h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><p>課程只有 30min, 沒機會用的很深, 但比起自己整合 NLP, NLU, 餵詞, 算權重, 訓練資料, etc. 已經省很多工了, 有興趣的可以參考 <a href="https://www.appcoda.com.tw/chatbot-dialogflow-ios/" target="_blank" rel="noopener">這篇</a> 有比較多的介紹。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;qwiklabs&quot;&gt;&lt;a href=&quot;#qwiklabs&quot; class=&quot;headerlink&quot; title=&quot;qwiklabs&quot;&gt;&lt;/a&gt;qwiklabs&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://google.qwiklabs.com/home&quot; tar
      
    
    </summary>
    
      <category term="dev_ops" scheme="https://jerry80409.github.io/categories/dev-ops/"/>
    
    
      <category term="gcp" scheme="https://jerry80409.github.io/tags/gcp/"/>
    
      <category term="dialogflow" scheme="https://jerry80409.github.io/tags/dialogflow/"/>
    
      <category term="actions_on_google" scheme="https://jerry80409.github.io/tags/actions-on-google/"/>
    
  </entry>
  
  <entry>
    <title>leet-code-807-max-increase-to-keep-city-skyline</title>
    <link href="https://jerry80409.github.io/2018/12/27/leet-code-807-max-increase-to-keep-city-skyline/"/>
    <id>https://jerry80409.github.io/2018/12/27/leet-code-807-max-increase-to-keep-city-skyline/</id>
    <published>2018-12-27T12:08:59.000Z</published>
    <updated>2018-12-27T14:52:31.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h3><p><a href="https://leetcode.com/problems/max-increase-to-keep-city-skyline/" target="_blank" rel="noopener">https://leetcode.com/problems/max-increase-to-keep-city-skyline/</a><br>給一個 2 dim 矩陣, 試調整矩陣, 讓每個行列元素皆不能大於最大的元素, 將計算所得的 2 dim 矩陣元素做加總。</p><p>Example:<br>Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]<br>Output: 35</p><p>Explanation: The grid is:<br>[ [3, 0, 8, 4],<br>  [2, 4, 5, 7],<br>  [9, 2, 6, 3],<br>  [0, 3, 1, 0] ]</p><p>圖解大概是這樣, 最後做矩陣相減, 求 sum<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    9, 4, 8, 7</span><br><span class="line">   ------------ </span><br><span class="line">8 | 3, 0, 8, 4</span><br><span class="line">7 | 2, 4, 5, 7</span><br><span class="line">9 | 9, 2, 6, 3</span><br><span class="line">3 | 0, 3, 1, 0</span><br><span class="line">    </span><br><span class="line">    8, 4, 8, 7</span><br><span class="line">    7, 4, 7, 7</span><br><span class="line">    9, 4, 8, 7</span><br><span class="line">    3, 3, 3, 3</span><br><span class="line">    </span><br><span class="line">    5, 4, 0, 3</span><br><span class="line">    5, 0, 2, 0 </span><br><span class="line">    0, 2, 2, 4</span><br><span class="line">    3, 0, 2, 3</span><br></pre></td></tr></table></figure></p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><p>先縮小矩陣做思考, 先從 2*2 開始… 然後我還是卡超久 Orz,<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    3, 4</span><br><span class="line">  - - - -</span><br><span class="line">3 | 3, 0 </span><br><span class="line">4 | 2, 4 </span><br><span class="line"></span><br><span class="line">    3, 3</span><br><span class="line">    3, 4</span><br><span class="line">  </span><br><span class="line">    0, 3</span><br><span class="line">    1, 0</span><br><span class="line"></span><br><span class="line">    4</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] grid = <span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">4</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> act = skyline.maxIncreaseKeepingSkyline(grid);</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">4</span>, act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] grid = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>&#125;,</span><br><span class="line">        &#123;<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> act = skyline.maxIncreaseKeepingSkyline(grid);</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">35</span>, act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxIncreaseKeepingSkyline</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] rowMax = <span class="keyword">new</span> <span class="keyword">int</span>[grid.length];</span><br><span class="line">    <span class="keyword">int</span>[] colMax = <span class="keyword">new</span> <span class="keyword">int</span>[grid[<span class="number">0</span>].length];</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先掃過一次 Matrix, 取得 rowMax, colMax </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] &gt; rowMax[i]) &#123;</span><br><span class="line">                rowMax[i] = grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] &gt; colMax[j]) &#123;</span><br><span class="line">                colMax[j] = grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取得可以蓋的最高高度, 做加總 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowMax.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; colMax.length; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> increment = Math.min(rowMax[i], colMax[j]) - grid[i][j];</span><br><span class="line">            sum += increment;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明明解法差不多, 但語法效能就是比別人差 XD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Puzzle&quot;&gt;&lt;a href=&quot;#Puzzle&quot; class=&quot;headerlink&quot; title=&quot;Puzzle&quot;&gt;&lt;/a&gt;Puzzle&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/max-increase-to
      
    
    </summary>
    
      <category term="misc" scheme="https://jerry80409.github.io/categories/misc/"/>
    
    
      <category term="leetcode" scheme="https://jerry80409.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Docker 建立 Spring boot</title>
    <link href="https://jerry80409.github.io/2018/12/27/spring-boot-with-docker/"/>
    <id>https://jerry80409.github.io/2018/12/27/spring-boot-with-docker/</id>
    <published>2018-12-27T07:15:59.000Z</published>
    <updated>2018-12-27T08:58:00.396Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Spring boot 官方教學有一份文件就有介紹 <a href="https://spring.io/guides/gs/spring-boot-docker/" target="_blank" rel="noopener">Spring boot with docker</a>, 裡面用的 <a href="https://github.com/spotify/dockerfile-maven" target="_blank" rel="noopener">Maven plugin</a> 來維護 <code>Dockerfile</code>, <code>DockerHub</code>。我的做法比較陽春, 單純地透過 Dockerfile 來掛載 maven 打包好的 jar, 這個做法只是單純的想熟悉 Docker build 的流程而已。</p><h3 id="Init-Spring-boot"><a href="#Init-Spring-boot" class="headerlink" title="Init Spring boot"></a>Init Spring boot</h3><p><a href="https://start.spring.io/" target="_blank" rel="noopener">SpringBoot initializr</a>, 用了 <code>thymeleaf</code>, <code>web</code> dependencies.<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Bootstrap-Admin"><a href="#Bootstrap-Admin" class="headerlink" title="Bootstrap Admin"></a>Bootstrap Admin</h3><p>為了炫砲一點, 我用了 <a href="https://startbootstrap.com/template-overviews/sb-admin-2/" target="_blank" rel="noopener">Bootstrap Admin theme</a>, 直接 clone 下來, 把資源丟到 <code>/src/main/resources/static/</code> 底下 XD.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 這個 theme 依賴 gulp 工具</span></span><br><span class="line">npm install --save-dev gulp@4.0.0</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 運行專案看ㄧ下畫面</span></span><br><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure></p><p><img src="/img/spring-boot-with-docker/bootstrap-admin-2.png" alt="bootstrap-admin-2"></p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>因為 Oracle 調整了 java 的授權, 所以 Docker 官方無法提供 <code>Oracle-Java</code> image 讓你 build, 可以改用 open-jdk 系列, 或者可以考慮用這個 <a href="https://hub.docker.com/r/cogniteev/oracle-java/" target="_blank" rel="noopener">https://hub.docker.com/r/cogniteev/oracle-java/</a>, 只是他的 OS 是 Ubuntu 比較肥一點。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># FROM: 指定 base image (https://hub.docker.com/r/cogniteev/oracle-java/)</span><br><span class="line">FROM cogniteev/oracle-java</span><br><span class="line"></span><br><span class="line"># 打開 container 8080 port</span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line"># 版本管理, 接收 docker build --build-arg 指定的參數</span><br><span class="line">ARG APP_VERSION</span><br><span class="line"></span><br><span class="line"># 複製編譯後的 jar , 到容器裡面</span><br><span class="line">COPY target/$&#123;APP_VERSION&#125; /opt/app/app.jar</span><br><span class="line"></span><br><span class="line"># WORKDIR: 指定 docker 執行起來時候的預設目錄位置</span><br><span class="line">WORKDIR /opt/app</span><br><span class="line"></span><br><span class="line"># 指定容器啟動後執行的命令，並且不會被 docker run 提供的參數覆蓋。</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]</span><br></pre></td></tr></table></figure></p><h3 id="Building-the-docker-image"><a href="#Building-the-docker-image" class="headerlink" title="Building the docker image"></a>Building the docker image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># clean and package the jar file</span></span><br><span class="line">mvn clean package</span><br><span class="line"></span><br><span class="line"><span class="comment"># build docker image</span></span><br><span class="line">docker build \</span><br><span class="line">  --build-arg APP_VERSION=spring-thymeleaf-docker-0.0.1-SNAPSHOT.jar \    <span class="comment"># pass APP_VERSION arg for build</span></span><br><span class="line">  --tag jerry80409/spring-thymeleaf-docker:0.0.1 .    <span class="comment"># give a tag for this image</span></span><br></pre></td></tr></table></figure><h3 id="Running-image"><a href="#Running-image" class="headerlink" title="Running image"></a>Running image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \                                 <span class="comment"># background running</span></span><br><span class="line">    --name spring-thymeleaf-docker \</span><br><span class="line">    --publish 8080:8080 \                       <span class="comment"># 指定 local 與 container port 的對應</span></span><br><span class="line">    jerry80409/spring-thymeleaf-docker:0.0.1    <span class="comment"># 指定運行的 image 與 image 版本</span></span><br></pre></td></tr></table></figure><p>確認一下執行狀況, 再打開 localhost:8080 確認<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># list docker process</span></span><br><span class="line">CONTAINER ID        IMAGE                                      COMMAND               CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">68542645c037        jerry80409/spring-thymeleaf-docker:0.0.1   <span class="string">"java -jar app.jar"</span>   4 seconds ago       Up 3 seconds        0.0.0.0:8080-&gt;8080/tcp   spring-thymeleaf-docker</span><br></pre></td></tr></table></figure></p><h3 id="Remove-container-and-image"><a href="#Remove-container-and-image" class="headerlink" title="Remove container and image"></a>Remove container and image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kill docker process by name</span></span><br><span class="line">docker <span class="built_in">kill</span> spring-thymeleaf-docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove container</span></span><br><span class="line">docker rm spring-thymeleaf-docker                    </span><br><span class="line"></span><br><span class="line"><span class="comment"># remove images</span></span><br><span class="line">docker rmi jerry80409/spring-thymeleaf-docker:0.0.1</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>Docker CLI docs - <a href="https://docs.docker.com/engine/reference/commandline" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline</a></li><li>Dockerfile maven plugin - <a href="https://github.com/spotify/dockerfile-maven" target="_blank" rel="noopener">https://github.com/spotify/dockerfile-maven</a></li><li>Spring boot with docker - <a href="https://spring.io/guides/gs/spring-boot-docker/" target="_blank" rel="noopener">https://spring.io/guides/gs/spring-boot-docker/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;Spring boot 官方教學有一份文件就有介紹 &lt;a href=&quot;https://spr
      
    
    </summary>
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/categories/spring-boot/"/>
    
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/tags/spring-boot/"/>
    
      <category term="docker" scheme="https://jerry80409.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>leet-code-938-range-sum-of-bst</title>
    <link href="https://jerry80409.github.io/2018/12/26/leet-code-938-range-sum-of-bst/"/>
    <id>https://jerry80409.github.io/2018/12/26/leet-code-938-range-sum-of-bst/</id>
    <published>2018-12-26T07:50:33.000Z</published>
    <updated>2018-12-26T10:21:32.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pazzle"><a href="#Pazzle" class="headerlink" title="Pazzle"></a>Pazzle</h3><p>Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).</p><p>The binary search tree is guaranteed to have unique values.</p><p>Example:<br>Input: root = [10,5,15,3,7,null,18], L = 7, R = 15<br>Output: 32</p><p>Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10<br>Output: 23</p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><p>花了一點時間, 才看懂 L, R 的用意, 一直以為是左葉, 右葉, 我在想啥 XD.<br>若單純用陣列看, L(7), R(5) 就是天花板跟地板,<br>只要取出陣列中 <code>5 &lt;= n &lt;=7</code> 的元素就好了,<br>但題目限定要用 <code>TreeNode</code>, 一樣先搞定 test 再解題,<br>先用測試把問題簡單化…</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * input: root = [10,5,15,3,7,null,18], L = 7, R = 15</span></span><br><span class="line"><span class="comment"> * expect: 23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// leafs</span></span><br><span class="line">    RangeSumBst.TreeNode node3 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">3</span>);</span><br><span class="line">    RangeSumBst.TreeNode node7 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">7</span>);</span><br><span class="line">    RangeSumBst.TreeNode node18 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// level_2</span></span><br><span class="line">    RangeSumBst.TreeNode node5 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">5</span>, node3, node7);</span><br><span class="line">    RangeSumBst.TreeNode node15 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">15</span>, <span class="keyword">null</span>, node18);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// level_1</span></span><br><span class="line">    RangeSumBst.TreeNode root = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">10</span>, node5, node15);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> act = bst.rangeSumBST(root, l, r);</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">32</span>, act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * input: root = [5, 3, 7], L = 7, R = 15</span></span><br><span class="line"><span class="comment"> * expect: 23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// leafs</span></span><br><span class="line">    RangeSumBst.TreeNode node3 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">3</span>);</span><br><span class="line">    RangeSumBst.TreeNode node7 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// level_1</span></span><br><span class="line">    RangeSumBst.TreeNode root = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">5</span>, node3, node7);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> act = bst.rangeSumBST(root, l, r);</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">7</span>, act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * input: root = [3, null, null], L = 7, R = 15</span></span><br><span class="line"><span class="comment"> * expect: 23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// level_1</span></span><br><span class="line">    RangeSumBst.TreeNode root = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">3</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> act = bst.rangeSumBST(root, l, r);</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">0</span>, act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * input: root = [7, null, null], L = 7, R = 15</span></span><br><span class="line"><span class="comment"> * expect: 23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// level_1</span></span><br><span class="line">    RangeSumBst.TreeNode root = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">7</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> act = bst.rangeSumBST(root, l, r);</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">7</span>, act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>解題的思路大概就是 binary-tree 走訪, node 大於 L 小於 R 就加總,<br>binary-tree 特性是, left tree 任何 node 遠永小於 root, right tree 任何 node 永遠大於 root;<br>這邊寫得比較清楚, 有複習有保庇 - <a href="http://www.csie.ntnu.edu.tw/~u91029/BinaryTree.html" target="_blank" rel="noopener">http://www.csie.ntnu.edu.tw/~u91029/BinaryTree.html</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rangeSumBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(root)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; l) &#123;</span><br><span class="line">        <span class="keyword">return</span> rangeSumBST(root.right, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; r) &#123;</span><br><span class="line">        <span class="keyword">return</span> rangeSumBST(root.left, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root.val + rangeSumBST(root.left, l, r) + rangeSumBST(root.right, l, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Pazzle&quot;&gt;&lt;a href=&quot;#Pazzle&quot; class=&quot;headerlink&quot; title=&quot;Pazzle&quot;&gt;&lt;/a&gt;Pazzle&lt;/h3&gt;&lt;p&gt;Given the root node of a binary search tree, return th
      
    
    </summary>
    
      <category term="leetcode" scheme="https://jerry80409.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://jerry80409.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>codesignal-almost-increasing-sequence</title>
    <link href="https://jerry80409.github.io/2018/12/26/codesignal-almost-increasing-sequence/"/>
    <id>https://jerry80409.github.io/2018/12/26/codesignal-almost-increasing-sequence/</id>
    <published>2018-12-26T03:41:07.000Z</published>
    <updated>2018-12-27T12:31:33.065Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pazzle"><a href="#Pazzle" class="headerlink" title="Pazzle"></a>Pazzle</h3><p>Given a sequence of integers as an array, determine whether it is possible to obtain a strictly increasing sequence by removing no more than one element from the array.</p><p>Example:<br>For sequence = [1, 3, 2, 1], the output should be<br>almostIncreasingSequence(sequence) = false.</p><p>For sequence = [1, 3, 2], the output should be<br>almostIncreasingSequence(sequence) = true</p><p>Ref - <a href="https://app.codesignal.com/arcade/intro/level-2/2mxbGwLzvkTCKAJMG" target="_blank" rel="noopener">https://app.codesignal.com/arcade/intro/level-2/2mxbGwLzvkTCKAJMG</a></p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> act = almostIncreasingSequence(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    assertFalse(act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> act = almostIncreasingSequence(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    assertTrue(act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> act = almostIncreasingSequence(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">    assertTrue(act);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> act = almostIncreasingSequence(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    assertFalse(act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> act = almostIncreasingSequence(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    assertTrue(act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>一開始的想法直覺是想到排序後做比較, diff &gt; 2 以上 return false, 但不太對,<br>像 <code>[10, 1, 2, 3, 4, 5]</code> 排序後, diff 絕對大於 2, 且也是屬於 almost incrasing seq,<br>最後回歸基本迴圈 foreach 比較<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">almostIncreasingSequence</span><span class="params">(<span class="keyword">int</span>[] seq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> countNoSeq = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// compare with next element </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seq.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (seq[i] &gt;= seq[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            countNoSeq++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// compare with after next element, because removed an element</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seq.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (seq[i] &gt;= seq[i + <span class="number">2</span>]) &#123;</span><br><span class="line">            countNoSeq++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (countNoSeq &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Pazzle&quot;&gt;&lt;a href=&quot;#Pazzle&quot; class=&quot;headerlink&quot; title=&quot;Pazzle&quot;&gt;&lt;/a&gt;Pazzle&lt;/h3&gt;&lt;p&gt;Given a sequence of integers as an array, determine wh
      
    
    </summary>
    
      <category term="misc" scheme="https://jerry80409.github.io/categories/misc/"/>
    
    
      <category term="codesignal" scheme="https://jerry80409.github.io/tags/codesignal/"/>
    
  </entry>
  
  <entry>
    <title>Java split empty strings</title>
    <link href="https://jerry80409.github.io/2018/12/24/java-split-empty-strings/"/>
    <id>https://jerry80409.github.io/2018/12/24/java-split-empty-strings/</id>
    <published>2018-12-24T11:05:23.000Z</published>
    <updated>2018-12-24T11:31:49.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><p>在 code review 的時候發現一個有趣的狀況, 預期 <code>.split(&quot;,&quot;)</code> 處理完結果應該是 5, 然而實際上卻是 3<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"a,b,c,,"</span>;</span><br><span class="line">String[] ary = str.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// result 3</span></span><br><span class="line">System.out.println(ary.length);</span><br></pre></td></tr></table></figure></p><h3 id="改用-split-regex-limit"><a href="#改用-split-regex-limit" class="headerlink" title="改用 split(regex, limit)"></a>改用 split(regex, limit)</h3><ul><li>如果 limit &gt; 0, 最終處理的 array 長度不會大於 limit, regex express 匹配的次數最多為 n - 1 次,</li><li>如果 limit &lt; 0, regex express 會盡可能的處理匹配, 包含對 空字串 匹配的問題,</li><li>如果 limit = 0, regex express 會儘可能地處理匹配, 但會放棄處理 空字串 匹配的問題。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_split_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String example = <span class="string">"boo:and:foo"</span>;</span><br><span class="line">    String[] act = example.split(<span class="string">":"</span>, <span class="number">2</span>);</span><br><span class="line">    assertEquals(<span class="string">"boo"</span>, act[<span class="number">0</span>]);</span><br><span class="line">    assertEquals(<span class="string">"and:foo"</span>, act[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_split_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String example = <span class="string">"boo:and:foo"</span>;</span><br><span class="line">    String[] act = example.split(<span class="string">":"</span>, <span class="number">5</span>);</span><br><span class="line">    assertEquals(<span class="string">"boo"</span>, act[<span class="number">0</span>]);</span><br><span class="line">    assertEquals(<span class="string">"and"</span>, act[<span class="number">1</span>]);</span><br><span class="line">    assertEquals(<span class="string">"foo"</span>, act[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_split_3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String example = <span class="string">"boo:and:foo"</span>;</span><br><span class="line">    String[] act = example.split(<span class="string">":"</span>, -<span class="number">2</span>);</span><br><span class="line">    assertEquals(<span class="string">"boo"</span>, act[<span class="number">0</span>]);</span><br><span class="line">    assertEquals(<span class="string">"and"</span>, act[<span class="number">1</span>]);</span><br><span class="line">    assertEquals(<span class="string">"foo"</span>, act[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_split_4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String example = <span class="string">"boo:and:foo"</span>;</span><br><span class="line">    String[] act = example.split(<span class="string">":"</span>, -<span class="number">1</span>);</span><br><span class="line">    assertEquals(<span class="string">"boo"</span>, act[<span class="number">0</span>]);</span><br><span class="line">    assertEquals(<span class="string">"and"</span>, act[<span class="number">1</span>]);</span><br><span class="line">    assertEquals(<span class="string">"foo"</span>, act[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 等同於 .split(regex)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_split_5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String example = <span class="string">"boo:and:foo"</span>;</span><br><span class="line">    String[] act = example.split(<span class="string">"o"</span>, <span class="number">0</span>);</span><br><span class="line">    assertEquals(<span class="string">"b"</span>, act[<span class="number">0</span>]);</span><br><span class="line">    assertEquals(<span class="string">""</span>, act[<span class="number">1</span>]);</span><br><span class="line">    assertEquals(<span class="string">":and:f"</span>, act[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>在使用 <code>.split(regex)</code> 盡量改為 <code>.split(regex, limit)</code> 去避免空字串切分的問題。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"a,b,c,,"</span>;</span><br><span class="line">String[] ary = str.split(<span class="string">","</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// result 5</span></span><br><span class="line">System.out.println(ary.length);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Sample&quot;&gt;&lt;a href=&quot;#Sample&quot; class=&quot;headerlink&quot; title=&quot;Sample&quot;&gt;&lt;/a&gt;Sample&lt;/h3&gt;&lt;p&gt;在 code review 的時候發現一個有趣的狀況, 預期 &lt;code&gt;.split(&amp;quot;,&amp;qu
      
    
    </summary>
    
      <category term="java" scheme="https://jerry80409.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://jerry80409.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Spring-data JPA 搭配 Optional 的使用</title>
    <link href="https://jerry80409.github.io/2018/12/24/spring-data-jpa-and-optional/"/>
    <id>https://jerry80409.github.io/2018/12/24/spring-data-jpa-and-optional/</id>
    <published>2018-12-24T09:25:36.000Z</published>
    <updated>2018-12-24T11:06:52.045Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Optional-Class"><a href="#Optional-Class" class="headerlink" title="Optional Class"></a>Optional Class</h3><p>這是 java8 才有的 class, 一樣是用容器的概念 (container) 來封裝一個 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html" target="_blank" rel="noopener">value-base</a> 的 class, 無法直接讓你取得 value 的狀態, 而是需要透過 <code>.get()</code> 的方式取得, 或是透過 <code>.isPresent()</code> 來檢查是否 non-null。在 JPA select 資料的時候超好用的。我自己覺得寫得很棒的一篇 <a href="http://blog.tonycube.com/2015/10/java-java8-4-optional.html" target="_blank" rel="noopener">Tony blog</a>。</p><h3 id="Value-base-Class"><a href="#Value-base-Class" class="headerlink" title="Value-base Class"></a>Value-base Class</h3><p><code>java.util.Optional</code> 與 <code>java.time.LocalDateTime</code> 皆屬於 values-base class, 下面的特點用 <code>java.time.LocalDateTime</code> 就很好理解。</p><ul><li>具有 final 或 immutable 的特質。</li><li>已有 <code>equals()</code>, <code>hashCode()</code>, <code>toString()</code> 的方法, 這些狀態來自於 class instance 本身, 而不是從其他 variable 計算得來</li><li>make no use of identity-sensitive operations such as reference equality (==) between instances, identity hash code of instances, or synchronization on an instances’s intrinsic lock; (這句後面 identity hash code 跟 synchronization 的情境不是很理解)</li><li>應該使用 <code>equals()</code>, 而不是 <code>==</code>,</li><li>沒有 constructors 方法可以被建構, 而是透過 Factory 方法實例化, </li><li>當 <code>equals()</code> 發生時, 兩個 instance 是可以互換的, 且不影響後續的運算。</li></ul><p>簡單來說像這樣<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_equals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime date = LocalDateTime.parse(<span class="string">"2017-02-03T12:30:30"</span>);</span><br><span class="line">    LocalDateTime date1 = LocalDateTime.parse(<span class="string">"2017-02-03T12:30:30"</span>);</span><br><span class="line">    assertTrue(date1.equals(date));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_hashcode_equals</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime date = LocalDateTime.parse(<span class="string">"2017-02-03T12:30:30"</span>);</span><br><span class="line">    LocalDateTime date1 = LocalDateTime.parse(<span class="string">"2017-02-03T12:30:30"</span>);</span><br><span class="line">    assertEquals(date.hashCode(), date1.hashCode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_to_string</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LocalDateTime date = LocalDateTime.parse(<span class="string">"2017-02-03T12:30:30"</span>);</span><br><span class="line">    assertEquals(<span class="string">"2017-02-03T12:30:30"</span>, date.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Jpa-and-Optional"><a href="#Jpa-and-Optional" class="headerlink" title="Jpa and Optional"></a>Jpa and Optional</h3><p>一般來說用 Jpa 做 CRUD 都會透過 JpaRepository<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserInfo</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">UserInfo <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>這樣寫其實也沒什麼不合理, 只是在商業邏輯處理時, 要多一個 if 判斷, 判斷是否有查詢到 userInfo 的資料.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    UserInfo user = userInfoRepository.findByName(<span class="string">"dumdum"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="comment">// throw exception</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改為用 Optional 試試看<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserInfo</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Optional&lt;Userinfo&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Optional&lt;Userinfo&gt; userOpt = userInfoRepository.findByName(<span class="string">"dumdum"</span>);</span><br><span class="line">    UserInfo user = userOpt.orElseThrow(() -&gt;</span><br><span class="line">            <span class="keyword">new</span> Exception(<span class="string">"查無 userInfo(dumdum) 資訊."</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找不到 user 還可以替換為預設 user, 這樣就不用處理 Exception, 當然並不是所有的情境都可以預設一個 instance.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Optional&lt;Userinfo&gt; userOpt = userInfoRepository.findByName(<span class="string">"dumdum"</span>);</span><br><span class="line">    UserInfo user = userOpt.orElse(<span class="keyword">new</span> UserInfo(<span class="string">"Rocko"</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Optional-Class&quot;&gt;&lt;a href=&quot;#Optional-Class&quot; class=&quot;headerlink&quot; title=&quot;Optional Class&quot;&gt;&lt;/a&gt;Optional Class&lt;/h3&gt;&lt;p&gt;這是 java8 才有的 class, 一樣
      
    
    </summary>
    
      <category term="java" scheme="https://jerry80409.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://jerry80409.github.io/tags/java/"/>
    
      <category term="spring-data" scheme="https://jerry80409.github.io/tags/spring-data/"/>
    
  </entry>
  
  <entry>
    <title>parse-a-uri-query-string-to-key-value</title>
    <link href="https://jerry80409.github.io/2018/12/13/parse-a-uri-query-string-to-key-value/"/>
    <id>https://jerry80409.github.io/2018/12/13/parse-a-uri-query-string-to-key-value/</id>
    <published>2018-12-13T09:41:11.000Z</published>
    <updated>2018-12-19T07:58:12.733Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Purpose"><a href="#Purpose" class="headerlink" title="Purpose"></a>Purpose</h3><p>解析 url 的 query string, 解析為 Map 的資料型態, 使用 apache httpcomponents。</p><ul><li>做 urlDecode 處理</li><li>沒有任何 query String 回傳 Empty Map</li><li>確保只處理 key-value 結構的 query String</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_parse_query_map_is_work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String uri = <span class="string">"http://www.domain.com?key1=value1&amp;key2=value2"</span>;</span><br><span class="line">    Map&lt;String, String&gt; act = UriUtil.parseQueryMap(uri);</span><br><span class="line">    assertEquals(<span class="string">"value1"</span>, act.get(<span class="string">"key1"</span>));</span><br><span class="line">    assertEquals(<span class="string">"value2"</span>, act.get(<span class="string">"key2"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_parse_not_complete_query_is_work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String uri = <span class="string">"http://www.domain.com?wtf"</span>;</span><br><span class="line">    Map&lt;String, String&gt; act = UriUtil.parseQueryMap(uri);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// assert empty map</span></span><br><span class="line">    assertEquals(<span class="number">0</span>, act.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.utils.URIBuilder;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UriUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(UriUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UriUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">parseQueryMap</span><span class="params">(<span class="keyword">final</span> String uriStr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; queryPairs = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> URI uri = <span class="keyword">new</span> URIBuilder(uriStr).build();</span><br><span class="line">            <span class="keyword">final</span> String rawQuery = uri.getRawQuery();</span><br><span class="line">            log.info(<span class="string">"CurrentUrl Query: &#123;&#125;"</span>, rawQuery);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 過濾沒有 query string</span></span><br><span class="line">            <span class="comment">// 還有過濾無法成對 keyValue 的 query, e.g. http://host/path?123</span></span><br><span class="line">            <span class="keyword">if</span> (Objects.isNull(rawQuery) || !rawQuery.contains(<span class="string">"="</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> queryPairs;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String[] pairs = rawQuery.split(<span class="string">"&amp;"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String utf8 = <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String pair : pairs) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 統一 decode</span></span><br><span class="line">                <span class="keyword">final</span> String deCodePair = URLDecoder.decode(pair, utf8);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// check deCodePair 空字串,</span></span><br><span class="line">                <span class="keyword">if</span> (!deCodePair.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> String[] keyValue = pair.split(<span class="string">"="</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// check is key value</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">2</span> == keyValue.length) &#123;</span><br><span class="line">                        <span class="keyword">final</span> String key = keyValue[<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">final</span> String value = keyValue[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                        queryPairs.put(key, value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">"Parser url: &#123;&#125; \n parameters: &#123;&#125;"</span>, uri.toString(), queryPairs);</span><br><span class="line">            <span class="keyword">return</span> queryPairs;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException uriBuilderUrlException) &#123;</span><br><span class="line">            uriBuilderUrlException.printStackTrace();</span><br><span class="line">            log.warn(<span class="string">"UriBuilder url (&#123;&#125;) has exception: &#123;&#125;"</span>, uriStr, uriBuilderUrlException.getMessage());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException urlDecodeException) &#123;</span><br><span class="line">            urlDecodeException.printStackTrace();</span><br><span class="line">            log.warn(<span class="string">"Decode url (&#123;&#125;) query has exception: &#123;&#125;"</span>, uriStr, urlDecodeException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> queryPairs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Purpose&quot;&gt;&lt;a href=&quot;#Purpose&quot; class=&quot;headerlink&quot; title=&quot;Purpose&quot;&gt;&lt;/a&gt;Purpose&lt;/h3&gt;&lt;p&gt;解析 url 的 query string, 解析為 Map 的資料型態, 使用 apache ht
      
    
    </summary>
    
      <category term="java" scheme="https://jerry80409.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://jerry80409.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java8-convert-list-to-map</title>
    <link href="https://jerry80409.github.io/2018/12/13/java8-convert-list-to-map/"/>
    <id>https://jerry80409.github.io/2018/12/13/java8-convert-list-to-map/</id>
    <published>2018-12-13T07:15:41.000Z</published>
    <updated>2018-12-13T09:36:27.002Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Json-data"><a href="#Json-data" class="headerlink" title="Json data"></a>Json data</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;<span class="attr">"uid"</span>:<span class="string">"1"</span>,<span class="attr">"name"</span>:<span class="string">"阿花"</span>,<span class="attr">"age"</span>:<span class="number">38</span>,<span class="attr">"gender"</span>:<span class="string">"F"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">"uid"</span>:<span class="string">"2"</span>,<span class="attr">"name"</span>:<span class="string">"阿瓜"</span>,<span class="attr">"age"</span>:<span class="number">28</span>,<span class="attr">"gender"</span>:<span class="string">"M"</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)</span><br><span class="line"><span class="meta">@JsonPropertyOrder</span>(value = &#123;</span><br><span class="line">    <span class="string">"uid"</span>,</span><br><span class="line">    <span class="string">"name"</span>,</span><br><span class="line">    <span class="string">"age"</span>,</span><br><span class="line">    <span class="string">"gender"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// creativeId equals adId</span></span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"uid"</span>)</span><br><span class="line">    <span class="keyword">private</span> String uid;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"gender"</span>)</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    List&lt;Customer&gt; customerList =</span><br><span class="line">        objectMapper.readValue(json, <span class="keyword">new</span> TypeReference&gt;() &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    Map customerMap = customerList.stream()</span><br><span class="line">        .collect(Collectors.toMap(</span><br><span class="line">            Customer::getUid,       <span class="comment">// key</span></span><br><span class="line">            customer -&gt; customer)); <span class="comment">// value</span></span><br><span class="line"></span><br><span class="line">    System.out.println(objectMapper.writeValueAsString(customerMap));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"1"</span>: &#123;</span><br><span class="line">    <span class="attr">"uid"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"阿花"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">38</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"F"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"2"</span>: &#123;</span><br><span class="line">    <span class="attr">"uid"</span>: <span class="string">"2"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"阿瓜"</span>,</span><br><span class="line">    <span class="attr">"age"</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">"gender"</span>: <span class="string">"M"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Json-data&quot;&gt;&lt;a href=&quot;#Json-data&quot; class=&quot;headerlink&quot; title=&quot;Json data&quot;&gt;&lt;/a&gt;Json data&lt;/h3&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="java" scheme="https://jerry80409.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://jerry80409.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leet-code-021-merge-two-sorted-lists</title>
    <link href="https://jerry80409.github.io/2018/12/12/leet-code-021-merge-two-sorted-lists/"/>
    <id>https://jerry80409.github.io/2018/12/12/leet-code-021-merge-two-sorted-lists/</id>
    <published>2018-12-12T04:51:36.000Z</published>
    <updated>2018-12-27T12:31:16.549Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeTwoSortedListsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> MergeTwoSortedLists mergeTwoSortedLists = <span class="keyword">new</span> MergeTwoSortedLists();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * input: null [0]</span></span><br><span class="line"><span class="comment">     * expect: [0] </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ListNode n1 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">final</span> ListNode n2 = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        ListNode act = mergeTwoSortedLists.mergeTwoLists(n1, n2);</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(<span class="number">0</span>, act.val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * input: [2] [1]</span></span><br><span class="line"><span class="comment">     * expect: [1, 2] </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ListNode n1 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">final</span> ListNode n2 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        ListNode act = mergeTwoSortedLists.mergeTwoLists(n1, n2);</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, act.val);</span><br><span class="line">        Assert.assertEquals(<span class="number">2</span>, act.next.val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * input: [1] [2]</span></span><br><span class="line"><span class="comment">     * expect: [1, 2] </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ListNode n1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">final</span> ListNode n2 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        ListNode act = mergeTwoSortedLists.mergeTwoLists(n1, n2);</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, act.val);</span><br><span class="line">        Assert.assertEquals(<span class="number">2</span>, act.next.val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * input: [5] [1, 2, 4]</span></span><br><span class="line"><span class="comment">     * expect: [1, 2, 4, 5] </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ListNode n1 = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">final</span> ListNode n2 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">final</span> ListNode n3 = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">final</span> ListNode n4 = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        n2.next = n3;</span><br><span class="line">        n3.next = n4;</span><br><span class="line"></span><br><span class="line">        ListNode act = mergeTwoSortedLists.mergeTwoLists(n1, n2);</span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, act.val);</span><br><span class="line">        Assert.assertEquals(<span class="number">2</span>, act.next.val);</span><br><span class="line">        Assert.assertEquals(<span class="number">4</span>, act.next.next.val);</span><br><span class="line">        Assert.assertEquals(<span class="number">5</span>, act.next.next.next.val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * input: [-9, 3] [5, 7]</span></span><br><span class="line"><span class="comment">     * expect: [-9, 3, 5, 7] </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ListNode n1 = <span class="keyword">new</span> ListNode(-<span class="number">9</span>);</span><br><span class="line">        <span class="keyword">final</span> ListNode n2 = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        n1.next = n2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ListNode n3 = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">final</span> ListNode n4 = <span class="keyword">new</span> ListNode(<span class="number">7</span>);</span><br><span class="line">        n3.next = n4;</span><br><span class="line"></span><br><span class="line">        ListNode act = mergeTwoSortedLists.mergeTwoLists(n1, n3);</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(-<span class="number">9</span>, act.val);</span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>, act.next.val);</span><br><span class="line">        Assert.assertEquals(<span class="number">5</span>, act.next.next.val);</span><br><span class="line">        Assert.assertEquals(<span class="number">7</span>, act.next.next.next.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * https://leetcode.com/problems/merge-two-sorted-lists/</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Example:</span></span><br><span class="line"><span class="comment"> * Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span></span><br><span class="line"><span class="comment"> * Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeTwoSortedLists</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode n1, ListNode n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(n1)) <span class="keyword">return</span> n2;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(n2)) <span class="keyword">return</span> n1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n1.val &lt; n2.val) &#123;</span><br><span class="line">            n1.next = mergeTwoLists(n2, n1.next);</span><br><span class="line">            <span class="keyword">return</span> n1;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            n2.next = mergeTwoLists(n1, n2.next);</span><br><span class="line">            <span class="keyword">return</span> n2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">        <span class="keyword">public</span> ListNode next;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Test&quot;&gt;&lt;a href=&quot;#Test&quot; class=&quot;headerlink&quot; title=&quot;Test&quot;&gt;&lt;/a&gt;Test&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="misc" scheme="https://jerry80409.github.io/categories/misc/"/>
    
    
      <category term="leetcode" scheme="https://jerry80409.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
