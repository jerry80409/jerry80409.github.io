<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PAWS</title>
  
  
  <link href="https://jerry80409.github.io/atom.xml" rel="self"/>
  
  <link href="https://jerry80409.github.io/"/>
  <updated>2022-12-19T06:39:19.081Z</updated>
  <id>https://jerry80409.github.io/</id>
  
  <author>
    <name>jerry80409</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>switch-statements-with-lambda</title>
    <link href="https://jerry80409.github.io/2022/12/19/switch-statements-with-lambda/"/>
    <id>https://jerry80409.github.io/2022/12/19/switch-statements-with-lambda/</id>
    <published>2022-12-19T05:52:47.000Z</published>
    <updated>2022-12-19T06:39:19.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Enums"><a href="#Enums" class="headerlink" title="Enums"></a>Enums</h2><p>通常 <em>SWITCH</em> 會被用於需要大量使用 <em>if-else</em> 的情境, 在某些時候加入 enums 的設計, 可以讓 switch 更容易被理解與管理.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Player</span> &#123;</span><br><span class="line">  <span class="comment">// 戰士</span></span><br><span class="line">  WARRIOR,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 弓箭手</span></span><br><span class="line">  ARCHER,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 法師</span></span><br><span class="line">  WIZARD,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">swordAttack</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;劍術攻擊&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">shootAttack</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;射箭攻擊&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String <span class="title function_">fireAttack</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;火焰攻擊&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 攻擊</span></span><br><span class="line">String <span class="title function_">attack</span><span class="params">(Player player)</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span>(player) &#123;</span><br><span class="line">    <span class="comment">// 戰士攻擊</span></span><br><span class="line">    <span class="keyword">case</span> WARRIOR:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.swordAttack();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弓箭手攻擊</span></span><br><span class="line">    <span class="keyword">case</span> ARCHER:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.shootAttack();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 法師攻擊</span></span><br><span class="line">    <span class="keyword">case</span> WIZARD:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.fireAttack();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他職業拋出異常  </span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid player: &quot;</span> + player);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h2><p><code>Supplier</code> 是 java8+ 的 lambda 滿好用的特性之一, 我通常會用它來封裝一些無參數傳入的 methods, 封裝到 Supplier 的 method, 並不會馬上被執行, 在某些層面上也算是一種 lazy loading 的應用, <em>SWITCH</em> 就可以簡單被改寫成:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">attack</span><span class="params">(Player player)</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span>(player) &#123;</span><br><span class="line">    <span class="comment">// 戰士攻擊</span></span><br><span class="line">    <span class="keyword">case</span> WARRIOR:</span><br><span class="line">      Supplier&lt;String&gt; warriorSupplier = () -&gt; <span class="built_in">this</span>.swordAttack();</span><br><span class="line">      <span class="keyword">return</span> warriorSupplier.get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弓箭手攻擊</span></span><br><span class="line">    <span class="keyword">case</span> ARCHER:</span><br><span class="line">      Supplier&lt;String&gt; archerSupplier = () -&gt; <span class="built_in">this</span>.shootAttack();</span><br><span class="line">      <span class="keyword">return</span> archerSupplier.get();</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 法師攻擊</span></span><br><span class="line">    <span class="keyword">case</span> WIZARD:</span><br><span class="line">      Supplier&lt;String&gt; wizardSupplier = () -&gt; <span class="built_in">this</span>.fireAttack();</span><br><span class="line">      <span class="keyword">return</span> wizardSupplier.get();</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 其他職業拋出異常    </span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid player: &quot;</span> + player);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>上述的寫法, 其實與原本的 <em>SWITCH</em> 寫法沒差多少, 要應用 java8+ lambda 的 Stream 特性, 可能需要把這些條件判斷搜集起來, 藉由 <code>MAP</code> 的 KEY-VALUE 的特性, 讓 Stream 可以串接起來, 並透過 KEY 去篩選 Enums.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">attack</span><span class="params">(Player player)</span> &#123;</span><br><span class="line">  Map&lt;Player, Supplier&lt;String&gt;&gt; attackMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">  attackMap.put(Player.WARRIOR, () -&gt; <span class="built_in">this</span>.swordAttack());</span><br><span class="line">  attackMap.put(Player.ARCHER, () -&gt; <span class="built_in">this</span>.shootAttack());</span><br><span class="line">  attackMap.put(Player.WIZARD, () -&gt; <span class="built_in">this</span>.fireAttack());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 確保線程安全, 推薦使用 Immutable 類型</span></span><br><span class="line">  <span class="keyword">final</span> Map&lt;Player, Supplier&lt;Void&gt;&gt; map = Collections.unmodifiableMap(attackMap);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 藉由 Stream 方式串接整個流程</span></span><br><span class="line">  map.entrySet().stream()</span><br><span class="line">    .filter(entry -&gt; player.equals(entry.getKey()))</span><br><span class="line">    .map(Entry::getValue)</span><br><span class="line">    .map(Supplier::get)</span><br><span class="line">    .findFirst()</span><br><span class="line">    .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid type: &quot;</span> + type));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Optimize"><a href="#Optimize" class="headerlink" title="Optimize"></a>Optimize</h2><p>然而都已經是 <em>MAP</em> 的資料結構了, 其實可以讓時間複雜度降低為 <code>O(1)</code>, 可以捨棄 <code>Stream</code> 優化改寫為:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">attack</span><span class="params">(Player player)</span> &#123;</span><br><span class="line">  Map&lt;Player, Supplier&lt;String&gt;&gt; attackMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">  attackMap.put(Player.WARRIOR, () -&gt; <span class="built_in">this</span>.swordAttack());</span><br><span class="line">  attackMap.put(Player.ARCHER, () -&gt; <span class="built_in">this</span>.shootAttack());</span><br><span class="line">  attackMap.put(Player.WIZARD, () -&gt; <span class="built_in">this</span>.fireAttack());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 確保線程安全, 推薦使用 Immutable 類型</span></span><br><span class="line">  <span class="keyword">final</span> Map&lt;Player, Supplier&lt;String&gt;&gt; map = Collections.unmodifiableMap(attackMap);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Optional.ofNullable(map.get(player))</span><br><span class="line">    .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Invalid type: &quot;</span> + player));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Enums&quot;&gt;&lt;a href=&quot;#Enums&quot; class=&quot;headerlink&quot; title=&quot;Enums&quot;&gt;&lt;/a&gt;Enums&lt;/h2&gt;&lt;p&gt;通常 &lt;em&gt;SWITCH&lt;/em&gt; 會被用於需要大量使用 &lt;em&gt;if-else&lt;/em&gt; 的情境, 在某些時候加</summary>
      
    
    
    
    <category term="java" scheme="https://jerry80409.github.io/categories/java/"/>
    
    
    <category term="design-pattern" scheme="https://jerry80409.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>jvm-stack-and-heap</title>
    <link href="https://jerry80409.github.io/2022/09/08/jvm-stack-and-heap/"/>
    <id>https://jerry80409.github.io/2022/09/08/jvm-stack-and-heap/</id>
    <published>2022-09-08T14:48:45.000Z</published>
    <updated>2022-12-19T05:51:57.126Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>java 程式碼在運作時, 會透過 compiler 將可讀的程式碼編譯為 <code>*.class</code> 的檔案, 而這個檔案會透過<br>Java Virtual Machine (JVM) 將其轉為 byte code, 讓作業系統執行運作, 這邊就暫時這樣粗略地解釋吧。</p><p>在 JVM 裏面, 會把 java 的資料類型分為 primitive 與 reference, 這樣設計是考量 JVM 在運行之前希望由 compiler 先將所有資料進行檢查。</p><h3 id="Primitive-type"><a href="#Primitive-type" class="headerlink" title="Primitive type"></a>Primitive type</h3><p>primitive 類型支持如, <code>byte</code> (8bits), <code>short</code>(16bits), <code>int</code>(32bits), <code>long</code>(64bits), char(16bits)。</p><h3 id="Reference-type"><a href="#Reference-type" class="headerlink" title="Reference type"></a>Reference type</h3><p>而 reference 類型有, <code>class</code>, <code>array</code>, <code>interface</code>, 他們的默認值為 <code>null</code>。</p><h2 id="JVM-Stack"><a href="#JVM-Stack" class="headerlink" title="JVM Stack"></a>JVM Stack</h2><p>JVM stacks 會隨著 JVM 的 thread 建立而跟著建立, 而 threads 的 stack 是 private 的, 也就是不能與其他 thread 共用, stack 用來存放的東西叫做 frames（具體來說我並沒有很了解 frames）, 但在 IntelliJ debug 模式中可以確實觀察得到。<br><img src="/img/jvm-stack-and-heap/jvm-thread-and-frame-1.jpg" alt="jvm-thread-and-frame-1"></p><p><img src="/img/jvm-stack-and-heap/jvm-thread-and-frame-2.jpg" alt="jvm-thread-and-frame-2"></p><p>Stack 在資料結構的定義是一種後進先出的資料結構(LIFO), 如果有在刷 leetcode 的話這是一個很方便用於資料反轉 (Reverse) 的資料結構 XD。從圖中可以看出每一層 stack 的 methods<br>invoke (呼叫), 所以當程式拋出 exceptions 可以透過 <code>e.printStackTrace()</code> 來取得當前 thread 使用 stacks 所有過程。   </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// do something   </span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  <span class="comment">// 輸出 exception 所記錄的 stack trace</span></span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stack-的大小"><a href="#stack-的大小" class="headerlink" title="stack 的大小"></a>stack 的大小</h3><p>在 oracle 所定義的 jvm 規範中, 允許 stack 動態的增加擴充, 但也允許讓開發者去設定 jvm 的 stack 大小, 可以使用 java -Xss1M 這樣的設定去啟動 JVM, 宣告 stack 大小為 1Mb 空間。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -Xss:1m myApp</span><br></pre></td></tr></table></figure><p><img src="/img/jvm-stack-and-heap/jvm-stack-xss-setting.jpg" alt="jvm-thread-and-frame-2"></p><ul><li>當 stack 超過 threads 的最大 stack 限制時, 會拋出 <code>StackOverflowError</code>, 比如說無限遞迴。</li><li>當 jvm 要擴增 stack 空間時, 但沒有足夠的記憶體可以拿來擴展 stack 與 thread 時, 會拋出 <code>OutOfMemoryError</code>。</li></ul><h2 id="JVM-Heap"><a href="#JVM-Heap" class="headerlink" title="JVM Heap"></a>JVM Heap</h2><p>JVM Heap 是在 JVM 啟動時建立的, 但是屬於 Threads 共用的, 主要用來存放 class, array 類型, 由 GC 機制做回收, heap 跟 stack 一樣, 也是可以由開發者去定義大小。為了有最佳的效能, 官方頁面設定是說建議 <code>Xms</code> 與 <code>Xmx</code> 可設定相同的大小, 若沒有特別指定的話, 預設會使用系統的 25% 實體記憶體做設定, 另外 server mode 與 client<br>mode 也會有所差異。 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -Xms:64m -Xmx:256m myApp</span><br></pre></td></tr></table></figure><p><img src="/img/jvm-stack-and-heap/jvm-heap-xms-setting.jpg" alt="jvm-heap-xms-setting"></p><h2 id="Java-Visualizer"><a href="#Java-Visualizer" class="headerlink" title="Java Visualizer"></a>Java Visualizer</h2><p>若想要更進一步學習 stack 與 heap 的運作的話, 在 intelliJ 的環境下可以安裝 <a href="https://fa20.datastructur.es/materials/guides/plugin.html#java-visualizer">java-visualizer</a>, 透過 debug 的 step over 就能確實觀察到 stack 與 heap 的運作了。</p><p><img src="/img/jvm-stack-and-heap/jvm-visualizer.jpg" alt="jvm-visualizer"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html#jvms-2.5.2">https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-2.html#jvms-2.5.2</a></li><li><a href="https://alvinalexander.com/scala/fp-book/recursion-jvm-stacks-stack-frames">https://alvinalexander.com/scala/fp-book/recursion-jvm-stacks-stack-frames</a></li><li><a href="https://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/jrdocs/refman/optionX.html#wp1024112">https://docs.oracle.com/cd/E13150_01/jrockit_jvm/jrockit/jrdocs/refman/optionX.html#wp1024112</a></li><li><a href="https://fa20.datastructur.es/materials/guides/plugin.html#java-visualizer">https://fa20.datastructur.es/materials/guides/plugin.html#java-visualizer</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JVM&quot;&gt;&lt;a href=&quot;#JVM&quot; class=&quot;headerlink&quot; title=&quot;JVM&quot;&gt;&lt;/a&gt;JVM&lt;/h2&gt;&lt;p&gt;java 程式碼在運作時, 會透過 compiler 將可讀的程式碼編譯為 &lt;code&gt;*.class&lt;/code&gt; 的檔案, 而這</summary>
      
    
    
    
    <category term="java" scheme="https://jerry80409.github.io/categories/java/"/>
    
    
    <category term="jvm" scheme="https://jerry80409.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>為什麼要推薦 AssertJ</title>
    <link href="https://jerry80409.github.io/2022/01/21/why-assertj/"/>
    <id>https://jerry80409.github.io/2022/01/21/why-assertj/</id>
    <published>2022-01-21T13:53:49.000Z</published>
    <updated>2022-12-19T05:51:57.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="為什麼要推薦-AssertJ"><a href="#為什麼要推薦-AssertJ" class="headerlink" title="為什麼要推薦 AssertJ"></a>為什麼要推薦 AssertJ</h2><ol><li>整合了 Junit4 的 Assertions</li><li>整合了 Junit5 的 Assertions</li><li>整合了 TestNG 的 Assertions</li><li>也整合了 Fest2.x (看官方文件是說 AssertJ 本身就是 Fest2.x 的分支)</li></ol><p>Junit4, Junit5 的整合, 就很適合當作團隊的基礎驗證基礎. </p><h3 id="官方提供-Junit-轉-AssertJ-小工具"><a href="#官方提供-Junit-轉-AssertJ-小工具" class="headerlink" title="官方提供 Junit 轉 AssertJ 小工具"></a>官方提供 Junit 轉 AssertJ 小工具</h3><p>我沒實際使用過, 有需要可以前往 <a href="https://github.com/assertj/assertj-core/tree/main/src/main/scripts">github</a> 下載</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># windows 作業系統</span><br><span class="line"># in the directory containing the test files</span><br><span class="line">convert-junit-assertions-to-assertj.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># OSX 作業系統</span><br><span class="line"># in the directory containing the test files</span><br><span class="line">convert-junit-assertions-to-assertj-on-osx.sh</span><br></pre></td></tr></table></figure><h3 id="流暢的結構方便閱讀"><a href="#流暢的結構方便閱讀" class="headerlink" title="流暢的結構方便閱讀"></a>流暢的結構方便閱讀</h3><p>流暢的 stream 風格, 搭配 IntelliJ IDE 開發起來心情真的很好.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;數字測試&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">assertNumbers</span><span class="params">()</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// actual</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// assertins</span></span><br><span class="line">  Assertions.assertThat(num)</span><br><span class="line">    .isPostive()</span><br><span class="line">    .isNotNegative()</span><br><span class="line">    isGreaterThanOrEqualTo(<span class="number">0</span>)</span><br><span class="line">    .isIn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支援-Optional-的特性"><a href="#支援-Optional-的特性" class="headerlink" title="支援 Optional 的特性"></a>支援 Optional 的特性</h3><p><code>Optional</code> 是 Java8 之後常用來處理 NPE 的一個特性, 在一些 method 的處理上, 為了要搭配 Java8 的 <code>stream()</code> 處理, 許多 method 都會設計為回傳 Optional 的型態.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;Optional測試&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">assertOptions</span><span class="params">()</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// actual</span></span><br><span class="line">  Optional&lt;String&gt; opt = Optional.of(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// assertins</span></span><br><span class="line">  Assertions.assertThat(opt)</span><br><span class="line">    .isPresent()</span><br><span class="line">    .isNotEmpty()</span><br><span class="line">    .get()</span><br><span class="line">    .isEqualTo(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SoftAssertions-不知道要怎麼翻譯"><a href="#SoftAssertions-不知道要怎麼翻譯" class="headerlink" title="SoftAssertions (不知道要怎麼翻譯)"></a>SoftAssertions (不知道要怎麼翻譯)</h3><p>在某些測試情境是需要整個流程走完, 再總結一次驗證, 比較常用的情境像是集合型的資料驗證, 或是多個流程耦合再一起要驗證的情境.   </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 暫時想不到好的例子, 先用 List&lt;String&gt;</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;SoftAssertions測試&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">assertSoftAssertions</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// actual</span></span><br><span class="line">  List&lt;String&gt; member = Lists.newArrayList(<span class="string">&quot;Frodo&quot;</span>, <span class="string">&quot;Sam&quot;</span>, <span class="string">&quot;Gimli&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// assertins</span></span><br><span class="line">  <span class="keyword">try</span> (<span class="type">var</span> <span class="variable">softly</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoCloseableSoftAssertions</span>()) &#123;</span><br><span class="line">    softly.assertThat(member).isInstanceOf(List.class);</span><br><span class="line">    softly.assertThat(member.size()).as(<span class="string">&quot;會員人數&quot;</span>).isEqualTo(<span class="number">2</span>);</span><br><span class="line">    softly.assertThat(member.get(<span class="number">1</span>)).as(<span class="string">&quot;1 號會員姓名&quot;</span>).isEqualTo(<span class="string">&quot;Frodo&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/img/why-assertj/assertJ.png" alt="assertJ"></p><p>驗證結果, 不會因為 <em>會員人數</em> 的驗證失敗, 就沒驗證 <em>1 號會員姓名</em>. SoftAssertions 能夠在測試過程中, 了解整個作業失敗所有細節的測試.</p><h3 id="反向測試"><a href="#反向測試" class="headerlink" title="反向測試"></a>反向測試</h3><p>反向測試, 也是測試情境中重要的一環, 特別是一些 Exception 的處理, 在處理 Exception 的測試, AssertJ 可以簡單協助你驗證 Root Exception.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;Root Exception 測試&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testRootThrowable</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">var</span> <span class="variable">throwable</span> <span class="operator">=</span> Assertions.catchThrowable(() -&gt; </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;狀態錯誤&quot;</span>, <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;參數錯誤&quot;</span>)));</span><br><span class="line">  </span><br><span class="line">  Assertions.assertThat(throwable)</span><br><span class="line">    .isInstanceOf(IllegalStateException.class)</span><br><span class="line">    .hasMessageContaining(<span class="string">&quot;狀態錯誤&quot;</span>)</span><br><span class="line">    .hasRootCauseExactlyInstanceOf(IllegalStateException.class)</span><br><span class="line">    .hasMessageContaining(<span class="string">&quot;參數錯誤&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定義的-Assertions"><a href="#自定義的-Assertions" class="headerlink" title="自定義的 Assertions"></a>自定義的 Assertions</h3><p>AssertJ 可以針對某個 domain &#x2F; pojo 物件定義 Assert, 隨便用 coupon 折扣卷來舉例.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coupon</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 折扣代碼</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  String code;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生效日期</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  LocalDate effected;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 失效日期</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  LocalDate expired;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定義的 Assert 需繼承 <code>AbstractAssert&lt;SELF, ACTUAL&gt;</code>, SELF 與 ACTUAL 分別是 Java 採用 Java 的 Generic Types 設計, SELF 代表自定義的 Assert 實體, ACTUAL 代表你要驗證的 domain &#x2F; pojo 物件.</p><p>這範例有點長了, 抱歉啦</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponAssert</span> <span class="keyword">extends</span> <span class="title class_">AbstractAssert</span>&lt;CouponAssert, Coupon&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">CouponAssert</span><span class="params">(Coupon coupon, Class&lt;?&gt; selfType)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(coupon, selfType);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">CouponAssert</span><span class="params">(Coupon coupon)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(coupon, CouponAssert.class);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 依據 AssertJ 的風格, 從這個點開始 AssertJ 的測試</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> CouponAssert <span class="title function_">assertThat</span><span class="params">(Coupon actual)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CouponAssert</span>(actual);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 折扣碼物件, 需要有代碼</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> CouponAssert <span class="title function_">hasCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(actual.getCode())) &#123;</span><br><span class="line">      failWithMessage(<span class="string">&quot;折扣碼不可為空.&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 折扣碼物件, 代碼長度必須 5 碼</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> CouponAssert <span class="title function_">codeLengthShouldBeFive</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">5</span> != actual.getCode().length()) &#123;</span><br><span class="line">      failWithMessage(<span class="string">&quot;折扣碼長度必須為 5 碼.&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 折扣碼物件, 失效日期</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> CouponAssert <span class="title function_">hasExpired</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(actual.getExpired())) &#123;</span><br><span class="line">      failWithMessage(<span class="string">&quot;折扣碼需設定失效日期.&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>測試寫法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;Coupon Domain 測試&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testCouponCode</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// arrange</span></span><br><span class="line">  <span class="type">Coupon</span> <span class="variable">coupon</span> <span class="operator">=</span> Coupon.builder()</span><br><span class="line">    .code(<span class="string">&quot;ABD&quot;</span>)</span><br><span class="line">    .effected(LocalDate.now())</span><br><span class="line">    .expired(LocalDate.now().plusMonths(<span class="number">1L</span>))</span><br><span class="line">    .build();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// assert</span></span><br><span class="line">  CouponAssert.assertThat(coupon)</span><br><span class="line">    .hasCode()</span><br><span class="line">    .codeLengthShouldBeFive()</span><br><span class="line">    .hasExpired();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;為什麼要推薦-AssertJ&quot;&gt;&lt;a href=&quot;#為什麼要推薦-AssertJ&quot; class=&quot;headerlink&quot; title=&quot;為什麼要推薦 AssertJ&quot;&gt;&lt;/a&gt;為什麼要推薦 AssertJ&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;整合了 Junit4 的 Ass</summary>
      
    
    
    
    <category term="test" scheme="https://jerry80409.github.io/categories/test/"/>
    
    
    <category term="test" scheme="https://jerry80409.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>line-bot-sdk-5-mins</title>
    <link href="https://jerry80409.github.io/2020/02/17/line-bot-sdk-5-mins/"/>
    <id>https://jerry80409.github.io/2020/02/17/line-bot-sdk-5-mins/</id>
    <published>2020-02-17T14:11:31.000Z</published>
    <updated>2022-12-19T05:51:57.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LINE-BOT-JAVA-SDK"><a href="#LINE-BOT-JAVA-SDK" class="headerlink" title="LINE BOT JAVA SDK"></a><a href="https://github.com/line/line-bot-sdk-java">LINE BOT JAVA SDK</a></h2><p>寫點騙人氣的文章, <a href="https://github.com/line/line-bot-sdk-java">LINE BOT JAVA SDK</a> 是我 Follow 很久的專案, 把 Source code 看過一次會學到很多東西, Servlet dispatch, API Client (OKHttp3 + Retrofit2), token 封裝等等, 使用 SDK 來開發的話, 大約 5mins 就可以把簡單的 LINE Server Side 的流程架設完畢。</p><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><ul><li><p>Intellij 是我目前用最順手的工具, 先用 Intellij + <a href="https://start.spring.io/">Spring boot initializr</a> 快速建立一個 gradle 專案吧  </p></li><li><p>Dependencies: 選用 <code>Spring Web</code> 跟 <code>Spring Data JPA</code>, 資料庫我是用 Postgres (<code>PostgreSQL Driver</code>)</p></li><li><p>手動加入 <code>line-bot-spring-boot</code> dependency</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">implementation &quot;com.linecorp.bot:line-bot-spring-boot:$rootProject.lineVersion&quot;</span><br></pre></td></tr></table></figure></li><li><p>不習慣用 Spring boot initializr 可以考慮在 build.gradle 貼上對應的 dependencies</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">  lineVersion = <span class="string">&#x27;3.3.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-data-jpa&#x27;</span></span><br><span class="line">  implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span></span><br><span class="line"></span><br><span class="line">  developmentOnly <span class="string">&#x27;org.springframework.boot:spring-boot-devtools&#x27;</span></span><br><span class="line">  compileOnly <span class="string">&#x27;org.projectlombok:lombok&#x27;</span></span><br><span class="line">  runtimeOnly <span class="string">&#x27;org.postgresql:postgresql&#x27;</span></span><br><span class="line"></span><br><span class="line">  annotationProcessor <span class="string">&#x27;org.springframework.boot:spring-boot-configuration-processor&#x27;</span></span><br><span class="line">  annotationProcessor <span class="string">&#x27;org.projectlombok:lombok&#x27;</span></span><br><span class="line"></span><br><span class="line">  implementation <span class="string">&quot;com.linecorp.bot:line-bot-spring-boot:$rootProject.lineVersion&quot;</span></span><br><span class="line"></span><br><span class="line">  testImplementation(<span class="string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>) &#123;</span><br><span class="line">    exclude <span class="attr">group:</span> <span class="string">&#x27;org.junit.vintage&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;junit-vintage-engine&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>去申請 LINE 開發需要的相關流程 (因為已經申請好很久了, 步驟有點忘了, 有錯再糾正我吧)</p><ul><li>Official Account: <a href="https://www.linebiz.com/tw/">https://www.linebiz.com/tw/</a></li><li>建立 Porvider 與 Channel: <a href="http://at-blog.line.me/tw/archives/provider_channel_setting.html">http://at-blog.line.me/tw/archives/provider_channel_setting.html</a></li></ul></li><li><p>記得到 LINE Develope Setting 後台打開對應的設定<br><img src="/img/line-bot-sdk-5-mins/line-bot-response-setting.png" alt="line-bot-response-setting"></p></li><li><p>申請 long-live channel token<br>進到 <a href="#">https://developers.line.biz/console/channel/{channel_id}&#x2F;messaging-api</a> 底下有個設定, 把它打開就有了</p></li></ul><h3 id="Spring-boot-application-properties-設定"><a href="#Spring-boot-application-properties-設定" class="headerlink" title="Spring-boot application.properties 設定"></a>Spring-boot application.properties 設定</h3><p>若使用 <strong>Spring boot initializr</strong> 初始化 Spring boot 專案, 預設是會建立一個空白的 application.properties, 真是懷念 LARAVEL 完整的設定結構啊, 因為是空白的 application.properties 所以要勤快一點去爬文件</p><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html</a></p></blockquote><hr><p>我自己是習慣 <code>yml</code> 的格式, 所以我通常都會改為 <code>application.yml</code>, 記得要把 lint-bot 對應的 properties 設定上去, 不然會打不了 LINE Message APIs</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把變數抽到上面比較好替換, 如果你的 yml 後來變大怪獸的話這招很有用 XD</span></span><br><span class="line"><span class="attr">database:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">post:</span> <span class="number">5432</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">botdemo</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">postgres</span></span><br><span class="line">  <span class="attr">password:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># spring boot</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application.name:</span> <span class="string">line-bot</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:postgresql://$&#123;database.host&#125;:$&#123;database.post&#125;/$&#123;database.name&#125;</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">$&#123;database.user&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">$&#123;database.password&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">profiles.active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># line config</span></span><br><span class="line"><span class="comment"># https://github.com/line/line-bot-sdk-java/tree/master/line-bot-spring-boot</span></span><br><span class="line"><span class="attr">line.bot:</span></span><br><span class="line">  <span class="attr">handler.enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">handler.path:</span> <span class="string">/callback</span></span><br><span class="line">  <span class="attr">channel-token:</span> <span class="string">&#x27;your-channel-token&#x27;</span></span><br><span class="line">  <span class="attr">channel-secret:</span> <span class="string">&#x27;your-channel-secret&#x27;</span></span><br><span class="line">  <span class="attr">channelTokenSupplyMode:</span> <span class="string">fixed</span></span><br><span class="line">  <span class="attr">connectTimeout:</span> <span class="number">60000</span></span><br><span class="line">  <span class="attr">readTimeout:</span> <span class="number">60000</span></span><br><span class="line">  <span class="attr">writeTimeout:</span> <span class="number">60000</span></span><br></pre></td></tr></table></figure><h2 id="Demo-code"><a href="#Demo-code" class="headerlink" title="Demo code"></a>Demo code</h2><p>沒什麼好說的, 就是 copy + past, 這樣你就能輕鬆解決一張 Scrum 的 ticket XD;</p><p>因為 LINE BOT SDK 幫你在 Servlet 做好訊息類型的 Dispatch, 所以 <code>Event</code> 跟 <code>MessageEvent</code> 的事件都幫你安排在不同的 handler methods, 所以程式碼會比自己寫 switch 來的乾淨一點, 也省下不少力氣去 Serialize 跟 deserialize 對新手來說, 或是參加 hackathon 都是省時省力的…  </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@LineMessageHandler</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventMapping</span></span><br><span class="line">  <span class="keyword">public</span> TextMessage <span class="title function_">handleTextMessageEvent</span><span class="params">(MessageEvent&lt;TextMessageContent&gt; event)</span> &#123;</span><br><span class="line">    <span class="comment">// 這邊做的就是簡單的 echo</span></span><br><span class="line">    System.out.println(<span class="string">&quot;event: &quot;</span> + event);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TextMessage</span>(event.getMessage().getText());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventMapping</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDefaultMessageEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">    <span class="comment">// 就是加入聊天室, 離開聊天室, 還有一些有的沒的事件</span></span><br><span class="line">    System.out.println(<span class="string">&quot;event: &quot;</span> + event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>隨便從 LINE 發送一個訊息, 在 log 就能觀察到了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-02-17 23:10:35.456 DEBUG 62976 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : POST &quot;/callback&quot;, parameters=&#123;&#125;</span><br><span class="line">2020-02-17 23:10:35.459 DEBUG 62976 --- [nio-8080-exec-1] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped to com.linecorp.bot.spring.boot.support.LineMessageHandlerSupport#callback(List)</span><br><span class="line">event: MessageEvent(replyToken=******, source=UserSource(userId=******), message=TextMessageContent(id=******, text=Hello ), timestamp=2020-02-17T15:10:34.337Z)</span><br><span class="line">2020-02-17 23:10:35.625  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : --&gt; POST https://api.line.me/v2/bot/message/reply</span><br><span class="line">2020-02-17 23:10:35.625  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : Content-Type: application/json; charset=UTF-8</span><br><span class="line">2020-02-17 23:10:35.625  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : Content-Length: 119</span><br><span class="line">2020-02-17 23:10:35.625  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : Authorization: Bearer jwt token</span><br><span class="line">2020-02-17 23:10:35.625  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : User-Agent: line-botsdk-java/3.3.1</span><br><span class="line">2020-02-17 23:10:35.625  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : </span><br><span class="line">2020-02-17 23:10:35.625  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : &#123;&quot;replyToken&quot;:&quot;******&quot;,&quot;messages&quot;:[&#123;&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Hello &quot;&#125;],&quot;notificationDisabled&quot;:false&#125;</span><br><span class="line">2020-02-17 23:10:35.625  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : --&gt; END POST (119-byte body)</span><br><span class="line">2020-02-17 23:10:35.631 DEBUG 62976 --- [nio-8080-exec-1] m.m.a.RequestResponseBodyMethodProcessor : Using &#x27;application/json&#x27;, given [*/*] and supported [application/json, application/*+json, application/json, application/*+json]</span><br><span class="line">2020-02-17 23:10:35.631 DEBUG 62976 --- [nio-8080-exec-1] m.m.a.RequestResponseBodyMethodProcessor : Nothing to write: null body</span><br><span class="line">2020-02-17 23:10:35.634 DEBUG 62976 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK</span><br><span class="line">2020-02-17 23:10:35.927  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : &lt;-- 200 OK https://api.line.me/v2/bot/message/reply (301ms)</span><br><span class="line">2020-02-17 23:10:35.927  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : Server: nginx</span><br><span class="line">2020-02-17 23:10:35.927  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : Content-Type: application/json</span><br><span class="line">2020-02-17 23:10:35.927  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : x-line-request-id: 49908719-170f-42fc-a1c6-e00579385e21</span><br><span class="line">2020-02-17 23:10:35.927  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : x-content-type-options: nosniff</span><br><span class="line">2020-02-17 23:10:35.927  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : x-xss-protection: 1; mode=block</span><br><span class="line">2020-02-17 23:10:35.927  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : x-frame-options: DENY</span><br><span class="line">2020-02-17 23:10:35.927  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : Vary: Accept-Encoding</span><br><span class="line">2020-02-17 23:10:35.927  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : Expires: Mon, 17 Feb 2020 15:10:35 GMT</span><br><span class="line">2020-02-17 23:10:35.927  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : Cache-Control: max-age=0, no-cache, no-store</span><br><span class="line">2020-02-17 23:10:35.927  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : Pragma: no-cache</span><br><span class="line">2020-02-17 23:10:35.927  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : Date: Mon, 17 Feb 2020 15:10:35 GMT</span><br><span class="line">2020-02-17 23:10:35.927  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : Connection: keep-alive</span><br><span class="line">2020-02-17 23:10:35.928  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : </span><br><span class="line">2020-02-17 23:10:35.928  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : &#123;&#125;</span><br><span class="line">2020-02-17 23:10:35.928  INFO 62976 --- [api.line.me/...] com.linecorp.bot.client.wire             : &lt;-- END HTTP (2-byte body)</span><br></pre></td></tr></table></figure><h2 id="Murmur"><a href="#Murmur" class="headerlink" title="Murmur"></a>Murmur</h2><p>以行銷的角度來說 bot 真的不是什麼太厲害的技術或是工具, bot 只是額外幫你觸及了另一群使用者, 如果沒有好的策略或是好的 UX 引導, 就是無魂有體的稻草人, 還有協助你做 bot 的工具真的一堆, 在做商業開發的前期我會推薦就先朝以下幾個平台工具去市場測試水溫看看 DAU, MAU, 先講就不傷身體, 再投入成本整合 prodfeed, payflow, etc.</p><ul><li>Chatfuel - <a href="https://chatfuel.com/">https://chatfuel.com/</a>, 老牌也很穩定 APIs 也更新很快, 但只支援 Facebook</li><li>Bottender - <a href="https://bottender.js.org/">https://bottender.js.org/</a>, 在開源社群很活躍的 APIs, 支援多種 Message 平台 (LINE, Facebook, SLACK, Telegram, etc.)</li><li>Super8 - <a href="https://no8.io/">https://no8.io/</a></li><li>Chatcompose - <a href="https://www.chatcompose.com/">https://www.chatcompose.com/</a></li><li>GoSky - <a href="https://www.goskyai.com/">https://www.goskyai.com/</a></li><li>Chatbot - <a href="https://www.chatbot.com/">https://www.chatbot.com/</a></li><li>Intercom - <a href="https://www.intercom.com/">https://www.intercom.com/</a></li><li>Full2house - <a href="https://www.full2house.com/">https://www.full2house.com/</a></li><li>Manychat - <a href="https://manychat.com/">https://manychat.com/</a></li></ul><p>我覺得另一個體驗很棒的訂房 bot - <a href="https://www.snaptravel.com/">https://www.snaptravel.com/</a>, 這才是我理想的產品啊 …</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LINE-BOT-JAVA-SDK&quot;&gt;&lt;a href=&quot;#LINE-BOT-JAVA-SDK&quot; class=&quot;headerlink&quot; title=&quot;LINE BOT JAVA SDK&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/line/li</summary>
      
    
    
    
    <category term="java" scheme="https://jerry80409.github.io/categories/java/"/>
    
    <category term="spring-boot" scheme="https://jerry80409.github.io/categories/java/spring-boot/"/>
    
    
    <category term="spring-boot" scheme="https://jerry80409.github.io/tags/spring-boot/"/>
    
    <category term="line-bot-sdk" scheme="https://jerry80409.github.io/tags/line-bot-sdk/"/>
    
  </entry>
  
  <entry>
    <title>gradle-101</title>
    <link href="https://jerry80409.github.io/2020/02/06/gradle-101/"/>
    <id>https://jerry80409.github.io/2020/02/06/gradle-101/</id>
    <published>2020-02-06T06:39:57.000Z</published>
    <updated>2022-12-19T05:51:57.120Z</updated>
    
    <content type="html"><![CDATA[<p>大部分的 Java 專案通常都會配置 <a href="https://maven.apache.org/">maven</a> 或是 <a href="https://gradle.org/">gradle</a> 來做專案管理, 這兩個工具的角色就類似 PHP 的 <a href="https://getcomposer.org/">composer</a> 或是 nodejs 的 <a href="https://www.npmjs.com/">npm</a>, 可以用來協助建置專案, 套件依賴管理, 建立 task 模組做 deploy 或 testing。</p><p>選用 maven 或是 gradle 端看團隊成員的狀況, 如果有熟悉 Kotlin 或是 Groovy 選用 gradle 會比較好一點, gradle 的優勢是可以更彈性的在 <code>build.gradle</code> 透過 Groovy 或是 Kotlin 撰寫一些自動化的邏輯, 這在做不同類型的整合測試很方便; maven 雖然比較老派, 而且 xml 在大型專案會變得很噁心, 但因為歷史悠久相對的參考資源與 plugin 較豐富。</p><hr><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install</span></span><br><span class="line">brew install gradle</span><br><span class="line"></span><br><span class="line"><span class="comment"># check version</span></span><br><span class="line">gradle -v</span><br></pre></td></tr></table></figure><hr><h2 id="Initial-gradle-project"><a href="#Initial-gradle-project" class="headerlink" title="Initial gradle project"></a>Initial gradle project</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立 project 目錄</span></span><br><span class="line"><span class="built_in">mkdir</span> project-name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 進入 project 目錄, 並且初始化 gradle 專案</span></span><br><span class="line"><span class="built_in">cd</span> project-name &amp;&amp; gradle init</span><br><span class="line"></span><br><span class="line"><span class="comment"># list project 底下的檔案與目錄 (之後在細說)</span></span><br><span class="line"><span class="built_in">ls</span> </span><br><span class="line">build.gradle  gradle  gradlew  gradlew.bat  settings.gradle</span><br></pre></td></tr></table></figure><ul><li><code>build.gradle</code> 專案的主要維運腳本。</li><li><code>gradle</code> 包裝 gradle 程式的主體, 裡面有 <a href="https://docs.gradle.org/4.10.3/userguide/gradle_wrapper.html">gradle-wrapper.jar</a>, 所以 gradle 運行時需要 JVM 的環境。</li><li><code>gradlew</code> 是一個以直接在 UNIX 環境執行的執行檔, 會比較建議執行 gradle 相關操作時使用 <code>gradlew</code>, 不用在 target 或是 CI Runner 再安裝 gradle CLI。</li><li><code>gradlew.bat</code> 是一個可以直接在 WINDOWS 環境執行的執行檔。</li><li><code>settings.gradle</code> 是用來做此專案的 gradle 運行時的 configuration, 比如說: <strong><a href="https://docs.gradle.org/current/userguide/multi_project_builds.html">Multi-Porjects</a></strong> 的架構, 或是添加 <code>org.gradle.daemon=true</code> 在背景運行之類的設定。</li></ul><hr><h2 id="Basic-Task"><a href="#Basic-Task" class="headerlink" title="Basic Task"></a>Basic Task</h2><h3 id="setting-gradle"><a href="#setting-gradle" class="headerlink" title="setting.gradle"></a>setting.gradle</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 會在 Initialization phase 被執行</span></span><br><span class="line">println <span class="string">&#x27;This is executed during the initialization phase.&#x27;</span></span><br><span class="line"></span><br><span class="line">rootProject.name = <span class="string">&#x27;gradle-multi-module&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="build-gradle"><a href="#build-gradle" class="headerlink" title="build.gradle"></a>build.gradle</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    <span class="comment">// 需要 java plugin</span></span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task hello &#123;</span><br><span class="line">    doFirst &#123;</span><br><span class="line">        println <span class="string">&#x27;Executed doFirst block!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;Executed doLast block!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 這行會在 Configure project 階段執行</span></span><br><span class="line">    println <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Execute-task"><a href="#Execute-task" class="headerlink" title="Execute task"></a>Execute task</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gradlew hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以攜帶 -q 參數, 代表 quiet 模式, 會減少一些不必要的 stdout 輸出(比如說: project configure)</span></span><br><span class="line"><span class="comment"># ./gradlew -q hello</span></span><br><span class="line"></span><br><span class="line">&gt; Configure project :</span><br><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">&gt; Task :hello</span><br><span class="line">Executed doFirst block!</span><br><span class="line">Executed doLast block!</span><br></pre></td></tr></table></figure><hr><h2 id="Build-phases"><a href="#Build-phases" class="headerlink" title="Build phases"></a>Build phases</h2><p>參考 <a href="https://docs.gradle.org/current/userguide/build_lifecycle.html">build lifecycle</a></p><h3 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h3><p>依據 <code>settings.gradle</code> 決定是 single &#x2F; multi-projects 再去建立 Gradle 的 project instance.</p><blockquote><p>Gradle supports single and multi-project builds. During the initialization phase, Gradle determines which projects are going to take part in the build, and creates a Project instance for each of these projects.</p></blockquote><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><p>官方說明很簡略, 就只是說在此階段會讀取整個 <code>build.gradle</code> 再去決定要 executed 的部分。</p><blockquote><p>During this phase the project objects are configured. The build scripts of all projects which are part of the build are executed.</p></blockquote><h3 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h3><p>gradle 決定 task 的 subset(<strong>doFirst</strong>, <strong>doLast</strong>), 經過 configuration 階段後再去執行。</p><blockquote><p>Gradle determines the subset of the tasks, created and configured during the configuration phase, to be executed. The subset is determined by the task name arguments passed to the gradle command and the current directory. Gradle then executes each of the selected tasks.</p></blockquote><p>所以在上面的執行範例中, 看到 <code>Hello World</code> 會在 <code>Configure project</code> 階段就被執行, 所以在寫 task 的時候 <strong>要注意這個 task 要在哪個 phases 被執行</strong>。</p><hr><h2 id="Task-with-groovy-DSL"><a href="#Task-with-groovy-DSL" class="headerlink" title="Task with groovy DSL"></a>Task with groovy DSL</h2><h3 id="build-gradle-1"><a href="#build-gradle-1" class="headerlink" title="build.gradle"></a>build.gradle</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task count &#123;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        <span class="number">4.</span>times &#123;</span><br><span class="line">            println <span class="string">&quot;$it&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Execute-task-1"><a href="#Execute-task-1" class="headerlink" title="Execute task"></a>Execute task</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gradlew count   </span><br><span class="line">This is executed during the initialization phase.</span><br><span class="line"></span><br><span class="line">&gt; Configure project :</span><br><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">&gt; Task :count</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><hr><h2 id="Task-dependencies"><a href="#Task-dependencies" class="headerlink" title="Task dependencies"></a>Task dependencies</h2><h3 id="build-gradle-2"><a href="#build-gradle-2" class="headerlink" title="build.gradle"></a>build.gradle</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo task</span></span><br><span class="line">task hello &#123;</span><br><span class="line">    doFirst &#123;</span><br><span class="line">        println <span class="string">&#x27;Executed doFirst block!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;Executed doLast block!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 這行會在 Configure project 階段執行</span></span><br><span class="line">    println <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task greeting &#123;</span><br><span class="line">    dependsOn <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    doLast &#123;</span><br><span class="line">        println <span class="string">&#x27;Morning~&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Execute-task-2"><a href="#Execute-task-2" class="headerlink" title="Execute task"></a>Execute task</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gradlew greeting</span><br><span class="line">This is executed during the initialization phase.</span><br><span class="line"></span><br><span class="line">&gt; Configure project :</span><br><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">&gt; Task :hello</span><br><span class="line">Executed doFirst block!</span><br><span class="line">Executed doLast block!</span><br><span class="line"></span><br><span class="line">&gt; Task :greeting</span><br><span class="line">Morning~</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Dynamic-tasks"><a href="#Dynamic-tasks" class="headerlink" title="Dynamic tasks"></a>Dynamic tasks</h2><h3 id="build-gradle-3"><a href="#build-gradle-3" class="headerlink" title="build.gradle"></a>build.gradle</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="number">4.</span>times &#123; counter -&gt;</span><br><span class="line">    task <span class="string">&quot;task$counter&quot;</span> &#123;</span><br><span class="line">        doLast &#123;</span><br><span class="line">            println <span class="string">&quot;I&#x27;m task number $counter&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Execute-task-3"><a href="#Execute-task-3" class="headerlink" title="Execute task"></a>Execute task</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./gradlew task1   </span><br><span class="line">This is executed during the initialization phase.</span><br><span class="line"></span><br><span class="line">&gt; Configure project :</span><br><span class="line">Hello World!</span><br><span class="line"></span><br><span class="line">&gt; Task :task1</span><br><span class="line">I<span class="string">&#x27;m task number 1</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h2 id="Zip-task"><a href="#Zip-task" class="headerlink" title="Zip task"></a>Zip task</h2><h3 id="build-gradle-4"><a href="#build-gradle-4" class="headerlink" title="build.gradle"></a>build.gradle</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">task zip(<span class="attr">type:</span> Zip, <span class="attr">group:</span> <span class="string">&#x27;Archive&#x27;</span>, <span class="attr">description:</span> <span class="string">&#x27;Archives source in a zip file&#x27;</span>) &#123;</span><br><span class="line">    archiveName <span class="string">&#x27;demo.zip&#x27;</span></span><br><span class="line">    destinationDirectory = file(<span class="string">&quot;$buildDir/dist&quot;</span>)</span><br><span class="line">    from <span class="string">&#x27;src&#x27;</span>  <span class="comment">// from 這邊的設定還不是很懂</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Execute-Task"><a href="#Execute-Task" class="headerlink" title="Execute Task"></a>Execute Task</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This is executed during the initialization phase.</span><br><span class="line"></span><br><span class="line">&gt; Configure project :</span><br><span class="line">Hello World!</span><br><span class="line">Zip files from src to /Users/jerry80409/eton/gradle-multi-module/build/dist</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大部分的 Java 專案通常都會配置 &lt;a href=&quot;https://maven.apache.org/&quot;&gt;maven&lt;/a&gt; 或是 &lt;a href=&quot;https://gradle.org/&quot;&gt;gradle&lt;/a&gt; 來做專案管理, 這兩個工具的角色就類似 PHP 的 &lt;a</summary>
      
    
    
    
    <category term="dev_ops" scheme="https://jerry80409.github.io/categories/dev-ops/"/>
    
    
    <category term="gradle" scheme="https://jerry80409.github.io/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>run-oracle-11g-on-docker</title>
    <link href="https://jerry80409.github.io/2020/01/13/run-oracle-11g-on-docker/"/>
    <id>https://jerry80409.github.io/2020/01/13/run-oracle-11g-on-docker/</id>
    <published>2020-01-13T08:15:20.000Z</published>
    <updated>2022-12-19T05:51:57.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Oracle-Enterprise-11g-Docker-Image"><a href="#Oracle-Enterprise-11g-Docker-Image" class="headerlink" title="Oracle Enterprise 11g Docker Image"></a>Oracle Enterprise 11g Docker Image</h2><p>這個紀錄主要是協助團隊, 於本地 Local 運行 Oracle Database, 方便大家開發, 避免開發上的資料衝突,</p><p>我採用的這個 image 非官方 Oracle 的映像, 但幫我省去了許多 oracle licence 同意處理的問題…</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://hub.docker.com/r/loliconneko/oracle-ee-11g</span><br></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>如果是習慣使用 docker 的人, 可以參照文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull</span></span><br><span class="line">docker pull loliconneko/oracle-ee-11g</span><br><span class="line"></span><br><span class="line"><span class="comment"># run docker</span></span><br><span class="line">docker run -d -p 8080:8080 -p 1521:1521 loliconneko/oracle-ee-11g</span><br></pre></td></tr></table></figure><p>運行後, 基本的 connection 資訊</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">hostname: localhost</span><br><span class="line">port: 1521</span><br><span class="line">sid: EE</span><br><span class="line">service name: EE.oracle.docker</span><br><span class="line">username: system</span><br><span class="line">password: oracle</span><br></pre></td></tr></table></figure><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><p>我自己平常的開發習慣是用 docker-compose(3.7);</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.7&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># https://hub.docker.com/r/loliconneko/oracle-ee-11g</span></span><br><span class="line">  <span class="attr">oracle:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">loliconneko/oracle-ee-11g:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">oracle</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/u01/app/oracle/oradata</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;1521:1521&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WEB_CONSOLE=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">IMPORT_FROM_VOLUME=true</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># 這個 volumn 用來放 Oracle 本體</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./oradata:/u01/app/oracle&quot;</span></span><br><span class="line">      <span class="comment"># 這個 volumn 用來匯入 Oracle 的資料</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./import_oracle:/u01/app/oracle/admin/EE/dpdump&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">docker_backend</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">bridge</span></span><br></pre></td></tr></table></figure><hr><h2 id="Import-data-to-Oracle"><a href="#Import-data-to-Oracle" class="headerlink" title="Import data to Oracle"></a>Import data to Oracle</h2><p>在 Docker volumn 的部分, 我在 local 規劃了 <code>oradata</code> 與 <code>import_oracle</code> 兩個資料夾,</p><ul><li>ordata 用來放 Oracle 本體, 避免 docker compose down 後, 資料遺失</li><li>import_oracle 用來方便資料庫匯入</li><li>資料匯入匯出的操作, 盡量用 sysdba 的 role 操作</li></ul><h3 id="Export-dev-Oracle"><a href="#Export-dev-Oracle" class="headerlink" title="Export dev Oracle"></a>Export dev Oracle</h3><p>DEV 的 Oracle 是 Oracle Server, 簡單的 SSH 登入後, 把資料匯出後下載</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># expdp explain</span></span><br><span class="line">expdp -<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># expdp 匯出 schema, 匯出的檔案會位於 /u01/app/oracle/admin/EE/dpdump/expdat.dmp</span></span><br><span class="line">expdp \&quot;sys\/your-password as sysdba\&quot; schemas=your-schema</span><br><span class="line"></span><br><span class="line"><span class="comment"># download expdat.dmp form dev to import_oracle folder</span></span><br><span class="line">scp user@dev-server:/u01/app/oracle/admin/EE/dpdump/expdat.dmp ~/project/docker/import_oracle</span><br></pre></td></tr></table></figure><h3 id="Import-expdat-dmp-to-Oracle"><a href="#Import-expdat-dmp-to-Oracle" class="headerlink" title="Import expdat.dmp to Oracle"></a>Import expdat.dmp to Oracle</h3><p>因為用 <code>expdp</code> 操作資料匯出, 所以需要用 <code>impdp</code> 才能對應匯入操作, <code>loliconneko/oracle-ee-11g</code> 預設的帳號密碼</p><ul><li>user: sys &#x2F; system</li><li>password: oracle</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># execute oracle bash, this instruction will run oracle container bash</span></span><br><span class="line">docker-compose <span class="built_in">exec</span> oracle bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># in oracle container, go to the dpdump will see the expdat.dmp</span></span><br><span class="line"><span class="built_in">cd</span> /u01/app/oracle/admin/EE/dpdump</span><br><span class="line"><span class="built_in">ls</span> -al</span><br><span class="line"></span><br><span class="line"><span class="comment"># the instruction will scan /u01/app/oracle/admin/EE/dpdump and import expdat.dmp </span></span><br><span class="line">impdp -<span class="built_in">help</span></span><br><span class="line">impdp \&quot;sys\/oracle as sysdba\&quot; schemas=your-schema;</span><br></pre></td></tr></table></figure><hr><h2 id="Memo"><a href="#Memo" class="headerlink" title="Memo"></a>Memo</h2><p>在整個轉移過程中其實 trouble shooting 非常多, 但大多皆可於 google 搜尋到對應的解決方式, 但細部的原因我也沒有很理解, Oracle 是個複雜龐大的系統, 我這邊整理一些我遇到的問題, 希望有幫到大家 XD</p><h3 id="1-failed-ORA-28000-the-account-is-locked"><a href="#1-failed-ORA-28000-the-account-is-locked" class="headerlink" title="1. failed: ORA-28000: the account is locked"></a>1. failed: ORA-28000: the account is locked</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> your<span class="operator">-</span>account ACCOUNT UNLOCK;</span><br></pre></td></tr></table></figure><h3 id="2-failed-ORA-01000-maximum-open-cursors-exceeded"><a href="#2-failed-ORA-01000-maximum-open-cursors-exceeded" class="headerlink" title="2. failed: ORA-01000:maximum open cursors exceeded."></a>2. failed: ORA-01000:maximum open cursors exceeded.</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">SYSTEM</span> <span class="keyword">SET</span> open_cursors<span class="operator">=</span><span class="number">1000</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Oracle-Enterprise-11g-Docker-Image&quot;&gt;&lt;a href=&quot;#Oracle-Enterprise-11g-Docker-Image&quot; class=&quot;headerlink&quot; title=&quot;Oracle Enterprise 11g Do</summary>
      
    
    
    
    <category term="dba" scheme="https://jerry80409.github.io/categories/dba/"/>
    
    
    <category term="oracle" scheme="https://jerry80409.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>plsql_note</title>
    <link href="https://jerry80409.github.io/2019/09/05/plsql-note/"/>
    <id>https://jerry80409.github.io/2019/09/05/plsql-note/</id>
    <published>2019-09-05T07:38:33.000Z</published>
    <updated>2022-12-19T05:51:57.299Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Just-noting"><a href="#Just-noting" class="headerlink" title="Just noting"></a>Just noting</h3><p>Debug 可以考慮用 <code>DBMS_OUTPUT.PUT_LINE(&#39;your-outputs&#39;)</code> 來處理。</p><h3 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h3><p>基本語法結構。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  <span class="comment">-- 變數宣告區塊</span></span><br><span class="line">  m_var VARCHAR2(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="comment">-- 主要執行運算區塊</span></span><br><span class="line">  m_var :<span class="operator">=</span> <span class="string">&#x27;HELLO&#x27;</span>;</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(m_var);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">HELLO</span><br></pre></td></tr></table></figure><hr><h3 id="Create-Type"><a href="#Create-Type" class="headerlink" title="Create Type"></a>Create Type</h3><p>建立自訂義型別, 類似 Java class 的概念。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立 m_type, 裡面有一個欄位是 bigint 類型</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE TYPE student_type <span class="keyword">AS</span> OBJECT (</span><br><span class="line">    s_name VARCHAR2(<span class="number">10</span>),</span><br><span class="line">    s_score <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  <span class="comment">-- 宣告 stu 變數, 為 student_type 型別</span></span><br><span class="line">  stu student_type;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="comment">-- 類似 java 的 new instance</span></span><br><span class="line">  stu :<span class="operator">=</span> student_type(<span class="string">&#x27;Dumdum&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">  DBMS_OUTPUT.PUT_LINE(<span class="string">&#x27;My name is &#x27;</span> <span class="operator">||</span> stu.s_name);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>輸出</p><ul><li>p.s. 無法直接 output 整個 student_type 物件, 需要指定 attritube 去輸出</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">My name is Dumdum</span><br></pre></td></tr></table></figure><hr><h3 id="Create-Type-as-Table"><a href="#Create-Type-as-Table" class="headerlink" title="Create Type as Table"></a>Create Type as Table</h3><p>建立一個 table 類型的型別, 類似 Java collection 的概念 (泛型)。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 建立 student_type</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE TYPE student_type <span class="keyword">AS</span> OBJECT (</span><br><span class="line">    s_name VARCHAR2(<span class="number">10</span>),</span><br><span class="line">    s_score <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建立一個裝 student_teyp 的 class_room</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE TYPE class_room <span class="keyword">AS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> student_type;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span>  </span><br><span class="line">  class class_room :<span class="operator">=</span> class_room();</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">  class :<span class="operator">=</span> class_room (  </span><br><span class="line">    student_type (<span class="string">&#x27;John&#x27;</span>, <span class="number">88</span>),  </span><br><span class="line">    student_type (<span class="string">&#x27;Max&#x27;</span>, <span class="number">90</span>),  </span><br><span class="line">    student_type (<span class="string">&#x27;Lin&#x27;</span>, <span class="number">100</span>));  </span><br><span class="line"></span><br><span class="line">  class.EXTEND;  </span><br><span class="line">  class(class.LAST) :<span class="operator">=</span> student_type(<span class="string">&#x27;Chen&#x27;</span>, <span class="number">56</span>);  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">FOR</span> stu <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">TABLE</span>(<span class="built_in">CAST</span>(class <span class="keyword">AS</span> CLASS_ROOM))) </span><br><span class="line">  LOOP</span><br><span class="line">    DBMS_OUTPUT.put_line(<span class="string">&#x27;Name = &#x27;</span> <span class="operator">||</span> stu.s_name <span class="operator">||</span> <span class="string">&#x27;, Score = &#x27;</span> <span class="operator">||</span> stu.s_score);</span><br><span class="line">  <span class="keyword">END</span> LOOP;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span>;  </span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Name = John,  Score = 88</span><br><span class="line">Name = Max,   Score = 90</span><br><span class="line">Name = Lin,   Score = 100</span><br><span class="line">Name = Chen,  Score = 56</span><br></pre></td></tr></table></figure><hr><h3 id="REGEXP-SUBSTR"><a href="#REGEXP-SUBSTR" class="headerlink" title="REGEXP_SUBSTR()"></a>REGEXP_SUBSTR()</h3><p>用正則表示, 來切割字串。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">REGEXP_SUBSTR(</span><br><span class="line">  <span class="string">&#x27;text&#x27;</span>,         <span class="comment">-- char     , 要處理的字串</span></span><br><span class="line">  <span class="string">&#x27;reg_pattern&#x27;</span>,  <span class="comment">-- char     , 正則表示 expression</span></span><br><span class="line">  position,       <span class="comment">-- integer  , 正則表示驗證起始位置, 預設為 1</span></span><br><span class="line">  occurrence,     <span class="comment">-- integer  , 指定正則匹配成功後, 哪一個匹配成空要觸發字串切割, 預設為 1</span></span><br><span class="line">  modifier        <span class="comment">-- char     , i:不區分大小寫; c:區分大小寫; 預設為 &#x27;c&#x27; </span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>範例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  regexp_substr(</span><br><span class="line">    <span class="string">&#x27;This is Dumdum&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;[[:alpha:]]+&#x27;</span>, </span><br><span class="line">    <span class="number">1</span>, </span><br><span class="line">    <span class="number">3</span></span><br><span class="line">  ) the_3th_word</span><br><span class="line"><span class="keyword">FROM</span> dual;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| the_3th_word |</span><br><span class="line">|--------------|</span><br><span class="line">| Dumdum       |</span><br></pre></td></tr></table></figure><hr><h3 id="REGEXP-SUBSTR-搭配-LEVEL"><a href="#REGEXP-SUBSTR-搭配-LEVEL" class="headerlink" title="REGEXP_SUBSTR() 搭配 LEVEL"></a>REGEXP_SUBSTR() 搭配 LEVEL</h3><p><code>LEVEL</code> 的用途主要是用來標示資料 樹(tree) 結構, 但實際上使用起來不是很直覺。</p><p>範例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  LEVEL, </span><br><span class="line">  regexp_substr(</span><br><span class="line">    <span class="string">&#x27;This is Dumdum testing null&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;[[:alpha:]]+&#x27;</span>, </span><br><span class="line">    <span class="number">1</span>,  </span><br><span class="line">    LEVEL) regexp_substr</span><br><span class="line"><span class="keyword">FROM</span> dual</span><br><span class="line"><span class="comment">-- regexp_count, 用正則表示匹配來計算次數, 下面為例, 用來計算有幾個 &#x27;空白&#x27;, ＋1 後就是實際 word 數量</span></span><br><span class="line"><span class="keyword">CONNECT</span> <span class="keyword">BY</span> LEVEL <span class="operator">&lt;=</span> regexp_count(<span class="string">&#x27;This is Dumdum testing null&#x27;</span>,  <span class="string">&#x27; &#x27;</span>) <span class="operator">+</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>輸出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| LEVEL | REGEXP_SUBSTR |</span><br><span class="line">|-------|---------------|</span><br><span class="line">| 1     | This          |</span><br><span class="line">| 2     | is            |</span><br><span class="line">| 3     | Dumdum        |</span><br><span class="line">| 4     | testing       |</span><br><span class="line">| 5     | null          |</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Just-noting&quot;&gt;&lt;a href=&quot;#Just-noting&quot; class=&quot;headerlink&quot; title=&quot;Just noting&quot;&gt;&lt;/a&gt;Just noting&lt;/h3&gt;&lt;p&gt;Debug 可以考慮用 &lt;code&gt;DBMS_OUTPUT.PUT_</summary>
      
    
    
    
    <category term="dba" scheme="https://jerry80409.github.io/categories/dba/"/>
    
    
    <category term="oracle" scheme="https://jerry80409.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>我要寫一篇我討厭 Oracle 的原因</title>
    <link href="https://jerry80409.github.io/2019/08/22/i-hate-oracle/"/>
    <id>https://jerry80409.github.io/2019/08/22/i-hate-oracle/</id>
    <published>2019-08-22T10:17:28.000Z</published>
    <updated>2022-12-19T05:51:57.122Z</updated>
    
    <content type="html"><![CDATA[<h3 id="I-hate-the-Oracle"><a href="#I-hate-the-Oracle" class="headerlink" title="I hate the Oracle"></a>I hate the Oracle</h3><p>Oracle 算是老牌的資料庫, 但實在是滿令人挫折的,<br>如果是習慣在 terminal 下操作的使用者, 光 accepted 那個 licence,<br>就讓我覺得自己是一個愚蠢的使用者, 官方的文件又難以快速查詢到想要的,<br>Oracle 版本又很多, 對應不同的 OS 環境又有各種奇奇怪怪的設定方式,<br>光是確認 ORACLE_SID 就浪費了不少時間,<br>config 文件也是用特規的方式去撰寫, 不是 <code>.ymal</code> 也不是 <code>.conf</code> 而是 <code>.ora</code>,<br><code>to_date()</code> 也不走 ISO 規範, 硬要跟別人不一樣…<br>基於各種麻煩的問題, 我真的不喜歡 Oracle</p><hr><h3 id="Env"><a href="#Env" class="headerlink" title="Env"></a>Env</h3><ul><li>CentOS 7   (CentOS Linux release 7.6.1810 (Core))</li><li>Oracle 19c (Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production)</li></ul><hr><h3 id="Difficult-setting"><a href="#Difficult-setting" class="headerlink" title="Difficult setting"></a>Difficult setting</h3><p><strong><a href="https://oracle-base.com/articles/19c/oracle-db-19c-rpm-installation-on-oracle-linux-7">安裝教學</a></strong>, 這篇算是我找到比較適合我的教學, 我的安裝記錄如下 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 建立資料夾</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/Download</span><br><span class="line"><span class="built_in">cd</span> ~/Download</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下載 rpm</span></span><br><span class="line">curl -o oracle-database-preinstall-19c-1.0-1.el7.x86_64.rpm https://yum.oracle.com/repo/OracleLinux/OL7/latest/x86_64/getPackage/oracle-database-preinstall-19c-1.0-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝</span></span><br><span class="line">sudo yum -y localinstall oracle-database-preinstall-19c-1.0-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h3 id="Uncomfortable-licence"><a href="#Uncomfortable-licence" class="headerlink" title="Uncomfortable licence"></a>Uncomfortable licence</h3><p>如果想下載官方的 rpm 就要想辦法通過 licence…</p><ol><li><p>acceped and click download<br><img src="/img/i-hate-oracle/oracle-accepted-and-clicked-download.png" alt="get-accepted-licence-url-link"></p></li><li><p>get accepted licence url link<br><img src="/img/i-hate-oracle/get-accepted-licence-url-link.png" alt="get-accepted-licence-url-link"></p></li><li><p>wget</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://download.oracle.com/otn/linux/oracle19c/190000/oracle-databas-ee-19c-1.0-1.x86_64.rpm?AuthParam=some-param</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="Change-the-oracle-user-in-CentOS"><a href="#Change-the-oracle-user-in-CentOS" class="headerlink" title="Change the oracle user in CentOS"></a>Change the oracle user in CentOS</h3><h2 id="如果跟我一樣是手動安裝-那可能會需要設定一下-oracle-的-passwd"><a href="#如果跟我一樣是手動安裝-那可能會需要設定一下-oracle-的-passwd" class="headerlink" title="如果跟我一樣是手動安裝, 那可能會需要設定一下 oracle 的 passwd"></a>如果跟我一樣是手動安裝, 那可能會需要設定一下 oracle 的 <code>passwd</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 設定 oracle 這個 user 的密碼</span></span><br><span class="line">sudo passwd oracle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切換 oracle 才能調整 oracle 相關 config</span></span><br><span class="line">su oracle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登入 sqlplus</span></span><br><span class="line">sqlplus / as sysdba</span><br></pre></td></tr></table></figure></h2><h3 id="Sqlplus-command-not-found"><a href="#Sqlplus-command-not-found" class="headerlink" title="Sqlplus command not found"></a>Sqlplus command not found</h3><p>如果發生了 <strong>sqlplus command not found</strong> 是因為缺少環境變數, 確認 env</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 確認你的環境變數是否有 ORACLE_BASE, ORACLE_HOME, ORACLE_SID</span></span><br><span class="line"><span class="built_in">env</span> | grep ORACLE</span><br></pre></td></tr></table></figure><h2 id="如果沒有-ORACLE-BASE-ORACLE-HOME-ORACLE-SID-就手動設定一下吧-但我沒辦法保證每個人的環境都跟我的一樣-在設定時請手動確認一下路徑是不是跟我一樣"><a href="#如果沒有-ORACLE-BASE-ORACLE-HOME-ORACLE-SID-就手動設定一下吧-但我沒辦法保證每個人的環境都跟我的一樣-在設定時請手動確認一下路徑是不是跟我一樣" class="headerlink" title="如果沒有 ORACLE_BASE, ORACLE_HOME, ORACLE_SID 就手動設定一下吧,但我沒辦法保證每個人的環境都跟我的一樣, 在設定時請手動確認一下路徑是不是跟我一樣"></a>如果沒有 <code>ORACLE_BASE</code>, <code>ORACLE_HOME</code>, <code>ORACLE_SID</code> 就手動設定一下吧,<br>但我沒辦法保證每個人的環境都跟我的一樣, 在設定時請手動確認一下路徑是不是跟我一樣<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果沒有就手動設定吧</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export ORACLE_BASE=/opt/oracle&quot;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export ORACLE_HOME=/opt/oracle/product/19c/dbhome_1&quot;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 這個設定花很多力氣才找到</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export ORACLE_SID=ORCLCDB&quot;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></h2><h3 id="ORA-01034-ORACLE-NOT-AVAILABLE"><a href="#ORA-01034-ORACLE-NOT-AVAILABLE" class="headerlink" title="ORA-01034: ORACLE NOT AVAILABLE"></a>ORA-01034: ORACLE NOT AVAILABLE</h3><p>這個問題是因為 Oracle 環境變數沒有設定好, 因為我找不到 ORACLE_SID</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我也知道可以用 echo, 但就是沒有啊</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$ORACLE_SID</span> </span><br></pre></td></tr></table></figure><p>然後 <a href="http://www.dba-oracle.com/t_find_oracle_sid.htm">教學</a> 說可以進去資料庫 select, 事實上是 ORACLE_SID 沒設定好, 你也無法用 sqlplus 去做登入, 後來找到可以在 <code>tnsnames.ora</code> 找到 ORACLE_SID</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my path is /opt/oracle/product/19c/dbhome_1/network/admin/tnsnames.ora</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$ORACLE_HOME</span>/network/admin</span><br><span class="line"><span class="built_in">cat</span> tnsnames.ora</span><br></pre></td></tr></table></figure><h3 id="The-ora-config-file"><a href="#The-ora-config-file" class="headerlink" title="The .ora config file"></a>The .ora config file</h3><p>為了找 ORACLE_SID 翻遍所有文件, 才在某個文件的小小角落翻到</p><blockquote><p>Change the value of ORACLE_SID to your new value in your .profile, .cshrc, .login, oratab, and tnsnames.ora files.</p></blockquote><p>說明 ORACLE_SID 寫在 <strong>.profile</strong>, <strong>.cshrc</strong>, <strong>.login</strong>, <strong>oratab</strong>, <strong>tnsnames.ora</strong>, 只想罵髒話</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ORCLCDB 就是預設的 SID</span></span><br><span class="line">ORCLCDB =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = ORCLCDB)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">LISTENER_ORCLCDB =</span><br><span class="line">  (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1521))</span><br></pre></td></tr></table></figure><hr><h3 id="Unknow-Charset"><a href="#Unknow-Charset" class="headerlink" title="Unknow Charset"></a>Unknow Charset</h3><p>亂碼問題, 必須先找到 CHARSET</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> userenv(<span class="string">&#x27;language&#x27;</span>) <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line">USERENV(<span class="string">&#x27;LANGUAGE&#x27;</span>)</span><br><span class="line"><span class="comment">----------------------------------------------------</span></span><br><span class="line">TRADITIONAL CHINESE_TAIWAN.AL32UTF8</span><br></pre></td></tr></table></figure><p>再把這個愚蠢的 CHARSET 設定到 ENV</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export NLS_LANG=&#x27;TRADITIONAL CHINESE_TAIWAN.AL32UTF8&#x27;&quot;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><hr><h3 id="ORA-12541-TNS-no-listener"><a href="#ORA-12541-TNS-no-listener" class="headerlink" title="ORA-12541: TNS:no listener"></a>ORA-12541: TNS:no listener</h3><p>先檢查 CentOS 的防火牆, 記得把 1521 打開</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># add port 1521 to firewall</span></span><br><span class="line">sudo firewall-cmd --add-port=1521/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># list firewall available ports</span></span><br><span class="line">sudo firewall-cmd --list-all</span><br><span class="line"></span><br><span class="line"><span class="comment"># stdout</span></span><br><span class="line">target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: enp3s0</span><br><span class="line">  sources:</span><br><span class="line">  services: ssh dhcpv6-client</span><br><span class="line">  ports: 22/tcp 1521/tcp</span><br><span class="line">  protocols:</span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports:</span><br><span class="line">  source-ports:</span><br><span class="line">  icmp-blocks:</span><br><span class="line">  rich rules:</span><br></pre></td></tr></table></figure><p>調整 listener.ora 監聽全部打開, 修改 HOST 為 <code>0.0.0.0</code>, 讓遠端的 Client 也可以連線</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改 HOST 為 0.0.0.0 </span></span><br><span class="line">LISTENER =</span><br><span class="line">  (DESCRIPTION_LIST =</span><br><span class="line">    (DESCRIPTION =</span><br><span class="line">      (ADDRESS = (PROTOCOL = TCP)(HOST = 0.0.0.0)(PORT = 1521))</span><br><span class="line">      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))</span><br><span class="line">    )</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>透過 lsnrctl 重新啟動 listener</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lsnrctl 工具</span></span><br><span class="line">lsnrctl</span><br><span class="line"></span><br><span class="line">LSNRCTL&gt; reload</span><br><span class="line"></span><br><span class="line">LSNRCTL&gt; stop</span><br><span class="line"></span><br><span class="line">LSNRCTL&gt; start</span><br><span class="line"></span><br><span class="line">LSNRCTL&gt; status</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Insert-Records-ORA-01843"><a href="#Insert-Records-ORA-01843" class="headerlink" title="Insert Records : ORA-01843"></a>Insert Records : ORA-01843</h4><p><code>ORA-01843</code> 的錯誤代碼說明是 <strong>不是有效的月份</strong>, 原因是 <code>to_date()</code> 造成的</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">Insert</span> <span class="keyword">into</span> EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE,HIRE_DATE,MANAGER_ID,JOB_TITLE) <span class="keyword">values</span> (<span class="number">107</span>,<span class="string">&#x27;Summer&#x27;</span>,<span class="string">&#x27;Payne&#x27;</span>,<span class="string">&#x27;summer.payne@example.com&#x27;</span>,<span class="string">&#x27;515.123.8181&#x27;</span>,to_date(<span class="string">&#x27;07-JUN-16&#x27;</span>,<span class="string">&#x27;DD-MON-RR&#x27;</span>),<span class="number">106</span>,<span class="string">&#x27;Public Accountant&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ORA<span class="number">-01843</span>: 不是有效的月份</span><br></pre></td></tr></table></figure><p>資料庫就你最特別, 完全不照 ISO 的 Datetime 格式, 硬要自己訂一套, 還要吃 ENV 的 <code>NLS_DATE_LANGUAGE</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">Insert</span> <span class="keyword">into</span> EMPLOYEES (EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE,HIRE_DATE,MANAGER_ID,JOB_TITLE) <span class="keyword">values</span> (<span class="number">107</span>,<span class="string">&#x27;Summer&#x27;</span>,<span class="string">&#x27;Payne&#x27;</span>,<span class="string">&#x27;summer.payne@example.com&#x27;</span>,<span class="string">&#x27;515.123.8181&#x27;</span>,to_date(<span class="string">&#x27;07-JUN-16&#x27;</span>,<span class="string">&#x27;DD-MON-RR&#x27;</span>, <span class="string">&#x27;NLS_DATE_LANGUAGE = AMERICAN&#x27;</span>),<span class="number">106</span>,<span class="string">&#x27;Public Accountant&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="Creaet-user-ORA-00900"><a href="#Creaet-user-ORA-00900" class="headerlink" title="Creaet user : ORA-00900"></a>Creaet user : ORA-00900</h4><p><code>ORA-00900</code> 的錯誤代碼說明是 <strong>SQL 敘述句無效</strong>, 但實際上這樣的錯誤代碼說明有說跟沒說一樣…<br>原因是某些操作的權限不足, 像 <code>SHOW USER</code>, 就只能在 Server 上操作</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">USER</span>;</span><br><span class="line"></span><br><span class="line">ORA<span class="number">-00900</span>: <span class="keyword">SQL</span> 敘述句無效</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;I-hate-the-Oracle&quot;&gt;&lt;a href=&quot;#I-hate-the-Oracle&quot; class=&quot;headerlink&quot; title=&quot;I hate the Oracle&quot;&gt;&lt;/a&gt;I hate the Oracle&lt;/h3&gt;&lt;p&gt;Oracle 算是老</summary>
      
    
    
    
    <category term="dba" scheme="https://jerry80409.github.io/categories/dba/"/>
    
    
    <category term="oracle" scheme="https://jerry80409.github.io/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>ora2pg 安裝</title>
    <link href="https://jerry80409.github.io/2019/08/19/ora2pg-setup/"/>
    <id>https://jerry80409.github.io/2019/08/19/ora2pg-setup/</id>
    <published>2019-08-19T10:20:32.000Z</published>
    <updated>2022-12-19T05:51:57.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>在處理 Oracle 遷移到 Postgres …<br>Postgres <a href="https://wiki.postgresql.org/wiki/Converting_from_other_Databases_to_PostgreSQL#Utilities.2C_tools.2C_scripts_etc.">官方</a> 其實提供了許多 Migration tools, 但大部分都需要付費購買, 但這種一次的作業實在很難爭取到公司資源, 在 open source 上相關資源較多的也只有 <code>Ora2pg</code> 與 <code>Orafce</code> 以及 <code>AWS Schema Conversion Tool</code>, 然而這些工具支持的面向皆不一樣, 以下簡單的介紹一下。</p><ul><li><p><strong><a href="http://ora2pg.darold.net/">Ora2pg</a></strong> - open source, perl 語言, 目前看起來功能最完整的工具支援 Oracle Table, Functaion, Trigger, etc. 轉換, 但設定有點複雜。</p></li><li><p><strong><a href="http://docs.aws.amazon.com/SchemaConversionTool/latest/userguide/CHAP_SchemaConversionTool.Installing.html">AWS Schema Conversion Tool</a></strong> - AWS 的工具, 個人覺得報表功能很好用, 缺點是沒用 AWS 的服務只能幫你轉 Oracle 的 schema。</p></li><li><p><strong><a href="https://github.com/orafce/orafce">Orafce</a></strong> - open source, c 語言, 針對 oracle 的 function 與 package 做調整的工具。</p></li><li><p><a href="https://www.spectralcore.com/fullconvert">fullconvert</a> - 看起來滿完整, 但試用版有滿多限制。</p></li><li><p><a href="https://dbconvert.com/oracle/postgresql/">Database migration for Oracle and PostgreSQL</a> - 沒有支援 Mac 使用者。</p></li><li><p><a href="http://www.convert-in.com/ora2pgs.htm">Oracle-to-PostgreSQL</a> - 沒有支援 Mac 使用者。</p></li></ul><h3 id="Install-Perl"><a href="#Install-Perl" class="headerlink" title="Install Perl"></a>Install Perl</h3><ul><li>Ora2pg 由 perl 編寫, 所以需要 perl 環境</li><li>由於體積不大, 所以我直接把 Ora2pg 安裝在 Oracle Server (CentOS)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># check your perl version, </span></span><br><span class="line"><span class="comment"># if it does&#x27;t work, you should install perl</span></span><br><span class="line">perl -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># setup perl by yum, it&#x27;s will setup all perl packagies</span></span><br><span class="line">yum install perl*</span><br><span class="line"></span><br><span class="line"><span class="comment"># and setup cpan</span></span><br><span class="line">yum install cpan</span><br><span class="line"></span><br><span class="line"><span class="comment"># then check perl</span></span><br><span class="line">perl -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># this is my perl info</span></span><br><span class="line">This is perl 5, version 16, subversion 3 (v5.16.3) built <span class="keyword">for</span> x86_64-linux-thread-multi</span><br><span class="line">(with 39 registered patches, see perl -V <span class="keyword">for</span> more detail)</span><br><span class="line"></span><br><span class="line">Copyright 1987-2012, Larry Wall</span><br><span class="line"></span><br><span class="line">Perl may be copied only under the terms of either the Artistic License or the</span><br><span class="line">GNU General Public License, <span class="built_in">which</span> may be found <span class="keyword">in</span> the Perl 5 <span class="built_in">source</span> kit.</span><br><span class="line"></span><br><span class="line">Complete documentation <span class="keyword">for</span> Perl, including FAQ lists, should be found on</span><br><span class="line">this system using <span class="string">&quot;man perl&quot;</span> or <span class="string">&quot;perldoc perl&quot;</span>.  If you have access to the</span><br><span class="line">Internet, point your browser at http://www.perl.org/, the Perl Home Page.</span><br></pre></td></tr></table></figure><hr><h3 id="Ora2pg-setup"><a href="#Ora2pg-setup" class="headerlink" title="Ora2pg setup"></a>Ora2pg setup</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install ora2pg v.20</span></span><br><span class="line"><span class="built_in">cd</span> ~/Download</span><br><span class="line">wget https://github.com/darold/ora2pg/archive/v20.0.tar.gz</span><br><span class="line">tar zxvf v20.0.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># make and install</span></span><br><span class="line"><span class="built_in">cd</span> ora2pg-20.0</span><br><span class="line">perl Makefile.PL</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># set env</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PERL5LIB=<span class="variable">$PERL5LIB</span>:/root/perl5/lib/perl5&quot;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ORACLE_HOME=<span class="variable">$ORACLE_HOME</span>:/u01/app/oracle/product/11.2.0/EE&quot;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;LD_LIBRARY_PATH=<span class="variable">$LD_LIBRARY_PATH</span>:<span class="variable">$ORACLE_HOME</span>/lib&quot;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># install DBD:Oracle</span></span><br><span class="line">perl -MCPAN -e <span class="string">&#x27;install DBD::Oracle&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># make and install DBD:Oracle</span></span><br><span class="line"><span class="built_in">cd</span> ~/.cpan/build/DBD-Oracle*</span><br><span class="line">perl Makefile.PL</span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 網路上流傳的 check perl XD</span></span><br><span class="line">vim check.pl</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl</span></span><br><span class="line"><span class="keyword">use</span> ExtUtils::Installed;</span><br><span class="line"><span class="keyword">my</span> $inst = ExtUtils::Installed-&gt;new();</span><br><span class="line"><span class="keyword">print</span> <span class="keyword">join</span> <span class="string">&quot;\n&quot;</span>,$inst-&gt;modules();</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 執行看看</span></span><br><span class="line"><span class="built_in">chmod</span> +x check.pl</span><br><span class="line">perl check.pl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 順利的話, stdout 會輸出</span></span><br><span class="line">DBD::Oracle</span><br><span class="line">Ora2Pg</span><br><span class="line">Perl</span><br><span class="line">Test::NoWarnings</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 確認 Ora2pg version</span></span><br><span class="line">ora2pg -v</span><br><span class="line">Ora2Pg v20.0</span><br></pre></td></tr></table></figure><h3 id="Ora2pg-init-project"><a href="#Ora2pg-init-project" class="headerlink" title="Ora2pg init project"></a>Ora2pg init project</h3><p>官方文件有說明專案式的 Ora2pg</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ora2pg --project_base ~/ora2pg_projects/ --init_project project_name</span><br><span class="line">Creating project test_project.</span><br><span class="line">/app/migration/test_project/</span><br><span class="line">        schema/</span><br><span class="line">                dblinks/</span><br><span class="line">                directories/</span><br><span class="line">                <span class="built_in">functions</span>/</span><br><span class="line">                grants/</span><br><span class="line">                mviews/</span><br><span class="line">                packages/</span><br><span class="line">                partitions/</span><br><span class="line">                procedures/</span><br><span class="line">                sequences/</span><br><span class="line">                synonyms/</span><br><span class="line">                tables/</span><br><span class="line">                tablespaces/</span><br><span class="line">                triggers/</span><br><span class="line">                types/</span><br><span class="line">                views/</span><br><span class="line">        sources/</span><br><span class="line">                <span class="built_in">functions</span>/</span><br><span class="line">                mviews/</span><br><span class="line">                packages/</span><br><span class="line">                partitions/</span><br><span class="line">                procedures/</span><br><span class="line">                triggers/</span><br><span class="line">                types/</span><br><span class="line">                views/</span><br><span class="line">        data/</span><br><span class="line">        config/</span><br><span class="line">        reports/</span><br><span class="line"> </span><br><span class="line">Generating generic configuration file</span><br><span class="line">Creating script export_schema.sh to automate all exports.</span><br><span class="line">Creating script import_all.sh to automate all imports.</span><br></pre></td></tr></table></figure><h3 id="Setting-ORACLE-connection"><a href="#Setting-ORACLE-connection" class="headerlink" title="Setting ORACLE connection"></a>Setting ORACLE connection</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ORACLE_DSNdbi:Oracle:host=localhost;sid=EE;port=1521</span><br><span class="line">ORACLE_USERsystem</span><br><span class="line">ORACLE_PWDfoobar</span><br></pre></td></tr></table></figure><h3 id="Export-x2F-Import-schema"><a href="#Export-x2F-Import-schema" class="headerlink" title="Export &#x2F; Import schema"></a>Export &#x2F; Import schema</h3><p><code>--init_project</code> 提供了兩個方便的 scripts 方便作業 </p><ul><li><code>export_schema.sh</code> 用來匯出 data objects schema.</li><li><code>import_all.sh</code> 用來匯入 data objects schema.</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># execute</span></span><br><span class="line">./export_schema.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># stdout</span></span><br><span class="line">[========================&gt;] 52/52 tables (100.0%) end of scanning.</span><br><span class="line">[========================&gt;] 11/11 objects types (100.0%) end of objects auditing.</span><br><span class="line">Running: ora2pg -p -t TABLE -o table.sql -b ./schema/tables -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 52/52 tables (100.0%) end of scanning.</span><br><span class="line">[========================&gt;] 52/52 tables (100.0%) end of table <span class="built_in">export</span>.</span><br><span class="line">Running: ora2pg -p -t PACKAGE -o package.sql -b ./schema/packages -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 1/1 packages (100.0%) end of output.</span><br><span class="line">Running: ora2pg -p -t VIEW -o view.sql -b ./schema/views -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 0/0 views (100.0%) end of output.</span><br><span class="line">Running: ora2pg -p -t GRANT -o grant.sql -b ./schema/grants -c ./config/ora2pg.conf</span><br><span class="line">WARNING: Exporting privilege as non DBA user is not allowed, see USER_GRANT</span><br><span class="line">Running: ora2pg -p -t SEQUENCE -o sequence.sql -b ./schema/sequences -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 1/1 sequences (100.0%) end of output.</span><br><span class="line">Running: ora2pg -p -t TRIGGER -o trigger.sql -b ./schema/triggers -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 82/82 triggers (100.0%) end of output.</span><br><span class="line">Running: ora2pg -p -t FUNCTION -o function.sql -b ./schema/functions -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 4/4 <span class="built_in">functions</span> (100.0%) end of <span class="built_in">functions</span> <span class="built_in">export</span>.</span><br><span class="line">Running: ora2pg -p -t PROCEDURE -o procedure.sql -b ./schema/procedures -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 0/0 procedures (100.0%) end of procedures <span class="built_in">export</span>.</span><br><span class="line">Running: ora2pg -p -t TABLESPACE -o tablespace.sql -b ./schema/tablespaces -c ./config/ora2pg.conf</span><br><span class="line">WARNING: Exporting tablespace as non DBA user is not allowed, see USER_GRANT</span><br><span class="line">Running: ora2pg -p -t PARTITION -o partition.sql -b ./schema/partitions -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 0/0 partitions (100.0%) end of output.</span><br><span class="line">Running: ora2pg -p -t TYPE -o type.sql -b ./schema/types -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 0/0 types (100.0%) end of output.</span><br><span class="line">Running: ora2pg -p -t MVIEW -o mview.sql -b ./schema/mviews -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 0/0 materialized views (100.0%) end of output.</span><br><span class="line">Running: ora2pg -p -t DBLINK -o dblink.sql -b ./schema/dblinks -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 0/0 dblink (100.0%) end of output.</span><br><span class="line">Running: ora2pg -p -t SYNONYM -o synonym.sql -b ./schema/synonyms -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 0/0 synonyms (100.0%) end of output.</span><br><span class="line">Running: ora2pg -p -t DIRECTORY -o directorie.sql -b ./schema/directories -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 0/0 directory (100.0%) end of output.</span><br><span class="line">Running: ora2pg -t PACKAGE -o package.sql -b ./sources/packages -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 1/1 packages (100.0%) end of output.</span><br><span class="line">Running: ora2pg -t VIEW -o view.sql -b ./sources/views -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 0/0 views (100.0%) end of output.</span><br><span class="line">Running: ora2pg -t TRIGGER -o trigger.sql -b ./sources/triggers -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 82/82 triggers (100.0%) end of output.</span><br><span class="line">Running: ora2pg -t FUNCTION -o function.sql -b ./sources/functions -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 4/4 <span class="built_in">functions</span> (100.0%) end of <span class="built_in">functions</span> <span class="built_in">export</span>.</span><br><span class="line">Running: ora2pg -t PROCEDURE -o procedure.sql -b ./sources/procedures -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 0/0 procedures (100.0%) end of procedures <span class="built_in">export</span>.</span><br><span class="line">Running: ora2pg -t PARTITION -o partition.sql -b ./sources/partitions -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 0/0 partitions (100.0%) end of output.</span><br><span class="line">Running: ora2pg -t TYPE -o type.sql -b ./sources/types -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 0/0 types (100.0%) end of output.</span><br><span class="line">Running: ora2pg -t MVIEW -o mview.sql -b ./sources/mviews -c ./config/ora2pg.conf</span><br><span class="line">[========================&gt;] 0/0 materialized views (100.0%) end of output.</span><br><span class="line"></span><br><span class="line">To extract data use the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment"># you can follow this command export data</span></span><br><span class="line">ora2pg -t COPY -o data.sql -b ./data -c ./config/ora2pg.conf</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h3&gt;&lt;p&gt;在處理 Oracle 遷移到 Postgres …&lt;br&gt;Postgres &lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="dba" scheme="https://jerry80409.github.io/categories/dba/"/>
    
    
    <category term="oracle" scheme="https://jerry80409.github.io/tags/oracle/"/>
    
    <category term="postgres" scheme="https://jerry80409.github.io/tags/postgres/"/>
    
  </entry>
  
  <entry>
    <title>SSH 登入小技巧</title>
    <link href="https://jerry80409.github.io/2019/08/19/ssh-login-tips/"/>
    <id>https://jerry80409.github.io/2019/08/19/ssh-login-tips/</id>
    <published>2019-08-19T03:04:39.000Z</published>
    <updated>2022-12-19T05:51:57.303Z</updated>
    
    <content type="html"><![CDATA[<h3 id="設定-x2F-etc-x2F-hosts"><a href="#設定-x2F-etc-x2F-hosts" class="headerlink" title="設定 &#x2F;etc&#x2F;hosts"></a>設定 &#x2F;etc&#x2F;hosts</h3><p>此文件是用來做 DNS (Domain-Name-Service), 編輯 <code>/etc/hosts</code> 可以讓機器辨識其他主機, 所以可以給 target server 一個 Domain Name, 方便 Localhost 辨識與登入。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加入一組 </span></span><br><span class="line">192.168.10.10   target.com</span><br></pre></td></tr></table></figure><h3 id="使用-ssh-key"><a href="#使用-ssh-key" class="headerlink" title="使用 ssh-key"></a>使用 ssh-key</h3><p>別再用密碼啦, ssh (Secure SHELL protocol) 本身就是希望你能透過 <code>非對稱金鑰</code> 來進行連線, 非對稱金鑰通常是由一組 <code>public key</code>, <code>private key</code> 組成, 所以先在本地生成一組 ssh key</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ssh key generated</span></span><br><span class="line">ssh-keygen -t rsa -b 2048</span><br><span class="line"></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/username/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/username/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/username/.ssh/id_rsa.pub.</span><br></pre></td></tr></table></figure><hr><h2 id="上傳到-target-server-這個動作主要是把-public-key-上傳"><a href="#上傳到-target-server-這個動作主要是把-public-key-上傳" class="headerlink" title="上傳到 target server, 這個動作主要是把 public key 上傳"></a>上傳到 target server, 這個動作主要是把 public key 上傳<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-copy-id user@target.com</span><br></pre></td></tr></table></figure></h2><p>login 就變簡潔了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh user@target.com</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;設定-x2F-etc-x2F-hosts&quot;&gt;&lt;a href=&quot;#設定-x2F-etc-x2F-hosts&quot; class=&quot;headerlink&quot; title=&quot;設定 &amp;#x2F;etc&amp;#x2F;hosts&quot;&gt;&lt;/a&gt;設定 &amp;#x2F;etc&amp;#x2F;hosts</summary>
      
    
    
    
    <category term="dev_ops" scheme="https://jerry80409.github.io/categories/dev-ops/"/>
    
    
    <category term="ssh" scheme="https://jerry80409.github.io/tags/ssh/"/>
    
  </entry>
  
</feed>
