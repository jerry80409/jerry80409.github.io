<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PAWS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jerry80409.github.io/"/>
  <updated>2019-08-03T06:24:55.864Z</updated>
  <id>https://jerry80409.github.io/</id>
  
  <author>
    <name>jerry80409</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>clean-and-pre-process-csv</title>
    <link href="https://jerry80409.github.io/2019/08/02/clean-and-pre-process-csv/"/>
    <id>https://jerry80409.github.io/2019/08/02/clean-and-pre-process-csv/</id>
    <published>2019-08-02T06:04:17.000Z</published>
    <updated>2019-08-03T06:24:55.864Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Open-CSV-features"><a href="#Open-CSV-features" class="headerlink" title="Open-CSV features"></a>Open-CSV features</h3><p>I recommed <a href="http://opencsv.sourceforge.net/#features" target="_blank" rel="noopener">open-csv</a>, It’s a nice and aweasome package :)</p><ul><li>Arbitrary numbers of values per line. （允許一行裡面有多個 elements, 避免跟 headers 對應問題）</li><li>Ignoring commas in quoted elements. (忽略 element 裡面的逗號, 避免誤判)</li><li>Handling quoted entries with embedded carriage returns (i.e. entries that span multiple lines). (忽略 element 裡面的換行符號)</li><li>Configurable separator and quote characters (or use sensible defaults). （可自定義 separator 與 quote 切分 csv 的字符）</li></ul><h3 id="Ugly-data"><a href="#Ugly-data" class="headerlink" title="Ugly data"></a>Ugly data</h3><p>雖然 open-csv 可以協助處理 element 裡面的 <strong>逗號</strong>, <strong>換行</strong> 的情境, 但一些狀態仍可能導致 open-csv 判讀錯誤失敗, 以下方的例子來說, <code>\&quot;</code> 與 <code>say &quot;don’t</code> 就會違反 open-csv 的 parsing rule, 導致 exception 發生, 如果是用 try catch 去處理, 就會造成資料缺漏, 違反資料正確性。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;id&quot;,&quot;title&quot;,&quot;member&quot;,&quot;msg&quot;</span><br><span class="line">&quot;1&quot;,&quot;title1&quot;,&quot;eric&quot;,&quot;Hello, I&apos;m Eric.&quot;</span><br><span class="line">&quot;2&quot;,&quot;title2&quot;,&quot;john&quot;,&quot;Hello, Eric, I have a question about your work, </span><br><span class="line"> plz contact me \&quot;</span><br><span class="line">&quot;3&quot;,&quot;title3&quot;,&quot;mike&quot;,&quot;This is Mike, I just want to say &quot;don’t try to be someone you are not meant to be.&quot;&quot;</span><br><span class="line">&quot;4&quot;,&quot;title4&quot;,&quot;jerry&quot;,NA</span><br></pre></td></tr></table></figure></p><h3 id="Clean-data"><a href="#Clean-data" class="headerlink" title="Clean data"></a>Clean data</h3><p>初步的想法就是, 把資料清洗一次, 先移除掉換行符號, 再把會影響 open-csv 處理的因素做 <code>replace()</code> 處理。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean_data</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Charset utf8 = Charset.defaultCharset();</span><br><span class="line">    File originFile = ResourceUtils.getFile(<span class="string">"sample.csv"</span>);</span><br><span class="line">    File cleanFile = ResourceUtils.getFile(<span class="string">"clean_sample.csv"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (BufferedReader reader = Files.newBufferedReader(originFile.toPath(), utf8);</span><br><span class="line">         BufferedWriter writer = Files.newBufferedWriter(cleanFile.toPath(), utf8)) &#123;</span><br><span class="line">        String line;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            line = line.replace(<span class="string">",NA,"</span>, <span class="string">",\"-\","</span>);</span><br><span class="line">            line = line.replace(<span class="string">",NA"</span>, <span class="string">",\"-\""</span>);</span><br><span class="line">            line = line.replace(<span class="string">" \""</span>, <span class="string">" `"</span>);</span><br><span class="line">            line = line.replace(<span class="string">"\"\""</span>, <span class="string">"`\""</span>);</span><br><span class="line">            line = line.replace(<span class="string">"\\\""</span>, <span class="string">"\""</span>);</span><br><span class="line"></span><br><span class="line">            line = line.replaceAll(<span class="string">"\\r\\n|\\r|\\n"</span>, <span class="string">""</span>);</span><br><span class="line">            writer.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再重新換行。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean_data_with_new_line</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    File originFile = ResourceUtils.getFile(<span class="string">"classpath:data/clean_sample.csv"</span>);</span><br><span class="line">    File cleanFile = ResourceUtils.getFile(<span class="string">"new_line_sample.csv"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (Reader reader = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(originFile));</span><br><span class="line">         Writer writer = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(cleanFile))) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// in one line have three comm</span></span><br><span class="line">        <span class="keyword">int</span> commInLine = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> current;</span><br><span class="line">        <span class="keyword">int</span> countComm = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> shouldNewLine = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> currentChar;</span><br><span class="line">        <span class="keyword">char</span> beforeChar = <span class="string">' '</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((current = reader.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            currentChar = (<span class="keyword">char</span>) current;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// two double quotation </span></span><br><span class="line">            <span class="keyword">if</span> (shouldNewLine</span><br><span class="line">                    &amp;&amp; beforeChar==<span class="string">'"'</span></span><br><span class="line">                    &amp;&amp; currentChar==<span class="string">'"'</span>) &#123;</span><br><span class="line"></span><br><span class="line">                writer.append(<span class="string">"\n"</span>);</span><br><span class="line">                writer.append(currentChar);</span><br><span class="line">                shouldNewLine = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                writer.append(currentChar);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// count comm and check new line status</span></span><br><span class="line">            <span class="keyword">if</span> (currentChar == <span class="string">','</span>) &#123;</span><br><span class="line">                countComm++;</span><br><span class="line">                <span class="keyword">if</span> (countComm == commInLine) &#123;</span><br><span class="line">                    countComm = <span class="number">0</span>;</span><br><span class="line">                    shouldNewLine = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            beforeChar = (<span class="keyword">char</span>) current;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Final-data"><a href="#Final-data" class="headerlink" title="Final data"></a>Final data</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;id&quot;,&quot;title&quot;,&quot;member&quot;,&quot;msg&quot;</span><br><span class="line">&quot;1&quot;,&quot;title1&quot;,&quot;eric&quot;,&quot;Hello, I&apos;m Eric.&quot;</span><br><span class="line">&quot;2&quot;,&quot;title2&quot;,&quot;john&quot;,&quot;Hello, Eric, I have a question about your work, plz contact me &quot;</span><br><span class="line">&quot;3&quot;,&quot;title3&quot;,&quot;mike&quot;,&quot;This is Mike, I just want to say `don’t try to be someone you are not meant to be.`&quot;</span><br><span class="line">&quot;4&quot;,&quot;title4&quot;,&quot;jerry&quot;,&quot;-&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Open-CSV-features&quot;&gt;&lt;a href=&quot;#Open-CSV-features&quot; class=&quot;headerlink&quot; title=&quot;Open-CSV features&quot;&gt;&lt;/a&gt;Open-CSV features&lt;/h3&gt;&lt;p&gt;I recommed
      
    
    </summary>
    
      <category term="misc" scheme="https://jerry80409.github.io/categories/misc/"/>
    
    
      <category term="open-csv" scheme="https://jerry80409.github.io/tags/open-csv/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate DDL Syntax Error</title>
    <link href="https://jerry80409.github.io/2019/02/27/hibernate-sql-syntax-error/"/>
    <id>https://jerry80409.github.io/2019/02/27/hibernate-sql-syntax-error/</id>
    <published>2019-02-27T08:40:35.000Z</published>
    <updated>2019-02-27T09:02:25.297Z</updated>
    
    <content type="html"><![CDATA[<h3 id="I-got-an-error"><a href="#I-got-an-error" class="headerlink" title="I got an error"></a>I got an error</h3><p>When I created an <code>order</code> table, just like …</p><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">$&#123;database.username&#125;</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">$&#123;database.password&#125;</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://$&#123;database.host&#125;:3306/$&#123;database.name&#125;?characterEncoding=utf-8&amp;useUnicode=true&amp;useSSL=false&amp;rewriteBatchedStatements=TRUE</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">MYSQL</span></span><br><span class="line">    <span class="string">hibernate.ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    database-platform:</span> <span class="string">com.example.springtransactionisolation.config.MySQL5InnoDBDialectUtf8mb4</span></span><br><span class="line">    <span class="string">properties.hibernate.jdbc.batch_size:</span> <span class="number">100</span></span><br><span class="line">    <span class="string">properties.hibernate.show_sql:</span> <span class="string">$&#123;spring.jpa.show-sql&#125;</span></span><br><span class="line">    <span class="string">properties.hibernate.format_sql:</span> <span class="string">$&#123;spring.jpa.show-sql&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">logging.level.org.hibernate.SQL:</span> <span class="string">debug</span></span><br><span class="line"><span class="string">logging.level.org.hibernate.type:</span> <span class="string">trace</span></span><br></pre></td></tr></table></figure><h4 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated</span>(EnumType.STRING)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"order_status"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> OrderStatus orderStatus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"update_date"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDate updateDate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Sql-syntax-log"><a href="#Sql-syntax-log" class="headerlink" title="Sql syntax log"></a>Sql syntax log</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2019-02-27 16:30:57.626  WARN 73285 --- [           main] o.h.t.s.i.ExceptionHandlerLoggedImpl     : GenerationTarget encountered exception accepting <span class="built_in">command</span> : Error executing DDL <span class="string">"</span></span><br><span class="line"><span class="string">    create table order (</span></span><br><span class="line"><span class="string">       id bigint not null auto_increment,</span></span><br><span class="line"><span class="string">        order_status varchar(255) not null,</span></span><br><span class="line"><span class="string">        update_date date not null,</span></span><br><span class="line"><span class="string">        primary key (id)</span></span><br><span class="line"><span class="string">    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;"</span> via JDBC Statement</span><br></pre></td></tr></table></figure><h3 id="Soluation"><a href="#Soluation" class="headerlink" title="Soluation"></a>Soluation</h3><p>Because the sql table <code>order</code> is a <a href="https://dev.mysql.com/doc/refman/8.0/en/keywords.html#keywords-8-0-detailed-U" target="_blank" rel="noopener">reserved word in MySQL</a> so that hibernate sql syntax executed error.</p><p>So I renamed the <code>order</code> entity to <code>order_form</code>…<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"order_form"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderForm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated</span>(EnumType.STRING)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"order_status"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> OrderStatus orderStatus;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"update_date"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDate updateDate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在命名 table 或 column 的時候真的不能太隨便啊…</p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li>MySQL Docs - <a href="https://dev.mysql.com/doc/refman/8.0/en/keywords.html#keywords-8-0-detailed-U" target="_blank" rel="noopener">Reserved word in MySQL</a></li><li>Same Issue - <a href="https://stackoverflow.com/questions/50727853/you-have-an-error-in-your-sql-syntax-hibernate-and-mysql" target="_blank" rel="noopener">StackOverFlow</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;I-got-an-error&quot;&gt;&lt;a href=&quot;#I-got-an-error&quot; class=&quot;headerlink&quot; title=&quot;I got an error&quot;&gt;&lt;/a&gt;I got an error&lt;/h3&gt;&lt;p&gt;When I created an &lt;cod
      
    
    </summary>
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/categories/spring-boot/"/>
    
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/tags/spring-boot/"/>
    
      <category term="spring-data" scheme="https://jerry80409.github.io/tags/spring-data/"/>
    
      <category term="jpa" scheme="https://jerry80409.github.io/tags/jpa/"/>
    
      <category term="mysql" scheme="https://jerry80409.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot JPA transactional rollback failed</title>
    <link href="https://jerry80409.github.io/2019/02/19/jpa-transactional-rollback/"/>
    <id>https://jerry80409.github.io/2019/02/19/jpa-transactional-rollback/</id>
    <published>2019-02-19T04:21:17.000Z</published>
    <updated>2019-02-19T05:50:24.526Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原因一-沒有指定-spring-jpa-database-platform"><a href="#原因一-沒有指定-spring-jpa-database-platform" class="headerlink" title="原因一, 沒有指定 spring.jpa.database-platform"></a>原因一, 沒有指定 spring.jpa.database-platform</h3><p>如果用了 <code>hibernate.ddl-auto</code>, 會自動選用 <strong>MyISAM</strong> engine 來建立 table schema, 然而 MyISAM 是不支援 Transactional 的, 自然沒有 rollback 功能, 且 spring boot 也不會給你任何警告, <strong>雷爆了!!!</strong></p><p>因此指定 <code>database-platform: org.hibernate.dialect.MySQL5InnoDBDialect</code> 很重要。</p><p>application.yml 修正為<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jpa:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">MYSQL</span></span><br><span class="line">    <span class="string">hibernate.ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    database-platform:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br></pre></td></tr></table></figure></p><p><img src="/img/jpa-transactional-rollback/my-isam-features.png" alt="my-isam-features"></p><h3 id="原因二-沒有指定-rollbackfor"><a href="#原因二-沒有指定-rollbackfor" class="headerlink" title="原因二, 沒有指定 rollbackfor"></a>原因二, 沒有指定 rollbackfor</h3><blockquote><p>In its default configuration, the Spring Framework’s transaction infrastructure code only marks a transaction for rollback in the case of runtime, unchecked exceptions; that is, when the thrown exception is an instance or subclass of <strong>RuntimeException</strong>. ( Errors will also - by default - result in a rollback). Checked exceptions that are thrown from a transactional method do not result in rollback in the default configuration.</p></blockquote><p><code>@Transactional</code> 預設只對 RuntimeException 有反應, 還有繼承 RuntimeException 的層級, 若沒有特別指定 <code>rollbackfor = Exception.class</code> 屬性, 則不會有動作。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springtransactionisolation.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springtransactionisolation.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> com.example.springtransactionisolation.repository.EmployeeRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EmployeeRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmployeeService</span><span class="params">(EmployeeRepository repository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.repository = repository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchCreated</span><span class="params">(List&lt;Employee&gt; employees)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        repository.saveAll(employees);</span><br><span class="line">        employees.clear();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// rollback failed</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"Oops"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="手動-rollback"><a href="#手動-rollback" class="headerlink" title="手動 rollback"></a>手動 rollback</h3><p>手動 rollback 可以寫成這樣, 參考官方 <a href="https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/transaction.html#transaction-declarative-rolling-back" target="_blank" rel="noopener">文件</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchCreated</span><span class="params">(List&lt;Employee&gt; employees)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        repository.saveAll(employees);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"oops"</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception updateEmployeeExp) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Do rollback transaction status"</span>);</span><br><span class="line">        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// notify someone</span></span><br><span class="line">            </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        employees.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Data-too-long-測試"><a href="#Data-too-long-測試" class="headerlink" title="Data too long 測試"></a>Data too long 測試</h3><p>另外, 在 insert 的時候, 如果發生 <code>DataException</code> 也是繼承於 RuntimeException, 所以沒有特別指定 <code>rollbackfor</code> 也是會整批 rollback。</p><p>Sample data 測試<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"birthDate"</span>: <span class="string">"1989-02-22"</span>,</span><br><span class="line">        <span class="attr">"firstName"</span>: <span class="string">"Tom"</span>,</span><br><span class="line">        <span class="attr">"lastName"</span>: <span class="string">"Lin"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="string">"M"</span>,</span><br><span class="line">        <span class="attr">"hireDate"</span>: <span class="string">"2019-02-10"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"birthDate"</span>: <span class="string">"1985-05-25"</span>,</span><br><span class="line">        <span class="attr">"firstName"</span>: <span class="string">"Judy"</span>,</span><br><span class="line">        <span class="attr">"lastName"</span>: <span class="string">"Chen"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="string">"F"</span>,</span><br><span class="line">        <span class="attr">"hireDate"</span>: <span class="string">"2019-02-10"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"birthDate"</span>: <span class="string">"1987-12-25"</span>,</span><br><span class="line">        <span class="attr">"firstName"</span>: <span class="string">"my name is so loooooooooooooooooooooooooooooooooooooooooooooon"</span>,</span><br><span class="line">        <span class="attr">"lastName"</span>: <span class="string">"Wu"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="string">"M"</span>,</span><br><span class="line">        <span class="attr">"hireDate"</span>: <span class="string">"2019-02-10"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2019-02-19 13:24:51.796  WARN 61330 --- [nio-8080-exec-1] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 1406, SQLState: 22001</span><br><span class="line">2019-02-19 13:24:51.796 ERROR 61330 --- [nio-8080-exec-1] o.h.engine.jdbc.spi.SqlExceptionHelper   : Data truncation: Data too long <span class="keyword">for</span> column <span class="string">'first_name'</span> at row 1</span><br><span class="line">2019-02-19 13:24:51.807 ERROR 61330 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() <span class="keyword">for</span> servlet [dispatcherServlet] <span class="keyword">in</span> context with path [] threw exception [Request processing failed; nested exception is org.springframework.dao.DataIntegrityViolationException: could not execute statement; SQL [n/a]; nested exception is org.hibernate.exception.DataException: could not execute statement] with root cause</span><br><span class="line"></span><br><span class="line">com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long <span class="keyword">for</span> column <span class="string">'first_name'</span> at row 1</span><br></pre></td></tr></table></figure><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/transaction.html#transaction-declarative-rolling-back" target="_blank" rel="noopener">spring boot docs - transaction-declarative-rolling-back</a></li><li><a href="https://dev.mysql.com/doc/refman/5.6/en/myisam-storage-engine.html" target="_blank" rel="noopener">mysql docs - MyISAM Storage Engine Features</a></li><li><a href="https://stackoverflow.com/questions/1459265/hibernate-create-mysql-innodb-tables-instead-of-myisam" target="_blank" rel="noopener">stackoverflow - Create Mysql InnoDB tables instead of MyISAM</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;原因一-沒有指定-spring-jpa-database-platform&quot;&gt;&lt;a href=&quot;#原因一-沒有指定-spring-jpa-database-platform&quot; class=&quot;headerlink&quot; title=&quot;原因一, 沒有指定 spring.j
      
    
    </summary>
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/categories/spring-boot/"/>
    
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/tags/spring-boot/"/>
    
      <category term="spring-data" scheme="https://jerry80409.github.io/tags/spring-data/"/>
    
      <category term="jpa" scheme="https://jerry80409.github.io/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>計算 MySql 資料量</title>
    <link href="https://jerry80409.github.io/2019/02/12/calculate-mysql-database-size/"/>
    <id>https://jerry80409.github.io/2019/02/12/calculate-mysql-database-size/</id>
    <published>2019-02-12T03:54:44.000Z</published>
    <updated>2019-02-12T07:02:56.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="計算-Database-大小"><a href="#計算-Database-大小" class="headerlink" title="計算 Database 大小"></a>計算 Database 大小</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_SCHEMA, <span class="keyword">SUM</span>(DATA_LENGTH + INDEX_LENGTH)/<span class="number">1024</span>/<span class="number">1024</span> <span class="string">"DATA_SIZE(MB)"</span></span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> TABLE_SCHEMA;</span><br></pre></td></tr></table></figure><p><code>TABLE_SCHEMA</code> 其實是資料庫<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-------------------------+---------------+</span><br><span class="line">| TABLE_SCHEMA            | DATA_SIZE(MB) |</span><br><span class="line">+-------------------------+---------------+</span><br><span class="line">| employees               |  146.79687500 |</span><br><span class="line">| information_schema      |    0.15625000 |</span><br><span class="line">| mysql                   |    2.49447918 |</span><br><span class="line">| performance_schema      |    0.00000000 |</span><br><span class="line">| spring_transaction_demo |    0.00214386 |</span><br><span class="line">| sys                     |    0.01562500 |</span><br><span class="line">+-------------------------+---------------+</span><br></pre></td></tr></table></figure></p><p><code>GROUP BY</code> 可以替換成 <code>WHERE TABLE_SCHEMA=[your-data-base-name]</code><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_SCHEMA, <span class="keyword">SUM</span>(DATA_LENGTH + INDEX_LENGTH)/<span class="number">1024</span>/<span class="number">1024</span> <span class="string">"DATA_SIZE(MB)"</span></span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES </span><br><span class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA=<span class="string">"employees"</span>;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------------+---------------+</span><br><span class="line">| TABLE_SCHEMA | DATA_SIZE(MB) |</span><br><span class="line">+--------------+---------------+</span><br><span class="line">| employees    |  146.79687500 |</span><br><span class="line">+--------------+---------------+</span><br></pre></td></tr></table></figure><p>INFORMATION_SCHEMA.TABLES 可以提供的 <a href="https://dev.mysql.com/doc/refman/5.7/en/tables-table.html" target="_blank" rel="noopener">資訊</a></p><ul><li>AVG_ROW_LENGTH</li><li>DATA_LENGTH</li><li>MAX_DATA_LENGTH</li><li>INDEX_LENGTH</li><li>DATA_FREE</li><li>CHECKSUM</li></ul><h3 id="計算-Table-資料大小"><a href="#計算-Table-資料大小" class="headerlink" title="計算 Table 資料大小"></a>計算 Table 資料大小</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_SCHEMA, TABLE_NAME, <span class="keyword">ROUND</span>(DATA_LENGTH + INDEX_LENGTH)/<span class="number">1024</span>/<span class="number">1024</span> <span class="string">"DATA_SIZE(MB)"</span></span><br><span class="line"><span class="keyword">FROM</span> INFORMATION_SCHEMA.TABLES </span><br><span class="line"><span class="keyword">WHERE</span> TABLE_SCHEMA=<span class="string">"employees"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+--------------+----------------------+---------------+</span><br><span class="line">| TABLE_SCHEMA | TABLE_NAME           | DATA_SIZE(MB) |</span><br><span class="line">+--------------+----------------------+---------------+</span><br><span class="line">| employees    | current_dept_emp     |          NULL |</span><br><span class="line">| employees    | departments          |    0.03125000 |</span><br><span class="line">| employees    | dept_emp             |   17.03125000 |</span><br><span class="line">| employees    | dept_emp_latest_date |          NULL |</span><br><span class="line">| employees    | dept_manager         |    0.03125000 |</span><br><span class="line">| employees    | employees            |   14.51562500 |</span><br><span class="line">| employees    | salaries             |   95.62500000 |</span><br><span class="line">| employees    | titles               |   19.56250000 |</span><br><span class="line">+--------------+----------------------+---------------+</span><br></pre></td></tr></table></figure><h3 id="計算某個欄位所有資料量的大小"><a href="#計算某個欄位所有資料量的大小" class="headerlink" title="計算某個欄位所有資料量的大小"></a>計算某個欄位所有資料量的大小</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(<span class="keyword">LENGTH</span>(<span class="string">`first_name`</span>))/<span class="number">1024</span>/<span class="number">1024</span> <span class="string">"FIRST_NAME_COL_SIZE(MB)"</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-------------------------+</span><br><span class="line">| FIRST_NAME_COL_SIZE(MB) |</span><br><span class="line">+-------------------------+</span><br><span class="line">|              1.77847385 |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure><h3 id="LENGTH-str-用途"><a href="#LENGTH-str-用途" class="headerlink" title="LENGTH(str) 用途"></a>LENGTH(str) 用途</h3><blockquote><p>Returns the length of the string str, measured in bytes. A multibyte character counts as multiple bytes. This means that for a string containing five 2-byte characters, LENGTH() returns 10, whereas CHAR_LENGTH() returns 5.</p></blockquote><p>用來計算 string 大小, 假設 string 有 5 個 characters, 每個 characters 為 2 bytes, 所以 <code>LENGTH()</code> 會得到 10, 而 <code>CHAR_LENGTH()</code> 則會得到 5。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="string">'hello_world'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-----------------------+</span><br><span class="line">| LENGTH(&apos;hello_world&apos;) |</span><br><span class="line">+-----------------------+</span><br><span class="line">|                    11 |</span><br><span class="line">+-----------------------+</span><br></pre></td></tr></table></figure><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li>MySql 5.7 Docs - <a href="https://dev.mysql.com/doc/refman/5.7/en/tables-table.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/tables-table.html</a></li><li>mkyong, calculate the mysql database size - <a href="https://www.mkyong.com/mysql/how-to-calculate-the-mysql-database-size/" target="_blank" rel="noopener">https://www.mkyong.com/mysql/how-to-calculate-the-mysql-database-size/</a></li><li>chartio - <a href="https://chartio.com/resources/tutorials/how-to-get-the-size-of-a-table-in-mysql/" target="_blank" rel="noopener">https://chartio.com/resources/tutorials/how-to-get-the-size-of-a-table-in-mysql/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;計算-Database-大小&quot;&gt;&lt;a href=&quot;#計算-Database-大小&quot; class=&quot;headerlink&quot; title=&quot;計算 Database 大小&quot;&gt;&lt;/a&gt;計算 Database 大小&lt;/h3&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="mysql" scheme="https://jerry80409.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://jerry80409.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Java Equals and HashCode</title>
    <link href="https://jerry80409.github.io/2019/02/01/java-equals-and-hashcode/"/>
    <id>https://jerry80409.github.io/2019/02/01/java-equals-and-hashcode/</id>
    <published>2019-02-01T04:32:59.000Z</published>
    <updated>2019-02-01T13:12:15.289Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>Java 所有的 class 皆繼承於 <code>java.lang.Object</code>, 其中 <strong>equals()</strong>, <strong>hashcode()</strong> 皆是 <code>native</code> 宣告的 methods(透過 JNI 介面, 用 c/c++ 去實作的東西), 這兩個東西在做 <code>equals()</code> 判斷的時候是緊密相關的, 但通常不太需要去 override 他們, 但是面試官很喜歡問這題…</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String a = <span class="string">"123"</span>;</span><br><span class="line">String b = <span class="string">"123"</span>;</span><br><span class="line">String c = <span class="keyword">new</span> String(<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">System.out.println(a == b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">System.out.println(a == c);</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">System.out.println(a.equals(b));</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">System.out.println(a.equals(c));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="“-”"><a href="#“-”" class="headerlink" title="“==”"></a>“==”</h3><p>就是 References Compare, 比較記憶體的參照。</p><ul><li>a == b (true): 因為底層有 String pool, 所以會 reference 相同的記憶體區段,</li><li>a == c (false): 因為 <code>new String(&quot;123&quot;)</code> 會 allocate 新的記憶體區段, 所以在做 refrenece 比較當然是不一樣的, </li></ul><h3 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h3><p>equals 的比較, 就不是 reference 的比較, 在 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-" target="_blank" rel="noopener">API Docs</a> 裡面有這樣的敘述 “that equal objects must have equal hash codes.”, 我理解為 <code>hashcode</code> 相等, 就是 equals() 成立。如果 override equals() 那相對的也需要調整 hashcode。</p><blockquote><p>Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.</p></blockquote><p>equals 特性如下: </p><ul><li>reflexive(反射性): 在 non-null 的比較, x.equals(x) 永遠是 true</li><li>symmetric(對稱性): 在 non-null 的比較, x.equals(y) 為 true, 則 y.equals(x) 也會是 true</li><li>transitive(傳遞性): 在 non-null 的比較, x.equals(y) 為 true, 且 y.equals(z) 為 true, 則 x.equals(z) 也會是 true</li><li>consistent(一致性): 在 non-null 的比較, x.equals(y) 為 true, 且 equals() 裡面比較的 objects 沒有被修改, 則 x.equals(y) 會永遠成立</li><li>所有的 non-null objects 在跟 null 做比較時, 永遠回傳 false</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Member m1 = <span class="keyword">new</span> Member(<span class="number">1</span>, <span class="string">"Tom"</span>, Gender.M);</span><br><span class="line">Member m2 = <span class="keyword">new</span> Member(<span class="number">1</span>, <span class="string">"Tom"</span>, Gender.M);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 440467858</span></span><br><span class="line">System.out.println(m1.hashCode());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 440467858</span></span><br><span class="line">System.out.println(m2.hashCode());</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">System.out.println(m1.equals(m2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hashcode"><a href="#hashcode" class="headerlink" title="hashcode()"></a>hashcode()</h3><ul><li>在 equals() 裡面比較的 objects 沒有被修改的前提下, 在相同的 Java Application 運行期間都應該回傳相同的 integer.</li><li>如果 x.equals(y) 為 true; 則 x, y 必須產生相同的 hashcode.</li><li>如果 x.equals(y) 為 false; 則 x, y 必須產生完全不同的 hashcode, 在做 HashMap 的處理時, 不同的 hashcode 可以有效提高效能(不容易碰撞的意思吧)</li></ul><h3 id="System-identityHashCode"><a href="#System-identityHashCode" class="headerlink" title="System.identityHashCode()"></a>System.identityHashCode()</h3><p>用途跟 hashcode() 差不多, 不管有沒有 override hashcode(), System.identityHashCode 會透過 <code>native</code> 去產生無法 override 的 hashcode, 且在 objects 為 null 的狀態下, 會回傳 0。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Member m1 = <span class="keyword">new</span> Member(<span class="number">1</span>, <span class="string">"Tom"</span>, Gender.M);</span><br><span class="line">    Member m2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hashcode 被覆寫了, 回傳 32</span></span><br><span class="line">    System.out.println(m1.hashCode());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 5072587</span></span><br><span class="line">    System.out.println(System.identityHashCode(m1));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 0</span></span><br><span class="line">    System.out.println(System.identityHashCode(m2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如果只-override-equals-會怎樣"><a href="#如果只-override-equals-會怎樣" class="headerlink" title="如果只 override equals 會怎樣?"></a>如果只 override equals 會怎樣?</h3><p>舉例來說, 假設 Member 只需要 <code>id</code> 來做 equlas 判斷, 然後不管其他欄位資料的一致性的話, 就需要去 <strong>override equals()</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || <span class="keyword">super</span>.getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Member member = (Member) o;</span><br><span class="line">    <span class="keyword">return</span> id.equals(member.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但如果只 override equals() 而沒有去 <strong>override hashcode()</strong> 的話, 就會有 <strong>矛盾</strong> 的地方<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Member m1 = <span class="keyword">new</span> Member(<span class="number">1</span>, <span class="string">"Tom"</span>, Gender.M);</span><br><span class="line">    Member m2 = <span class="keyword">new</span> Member(<span class="number">1</span>, <span class="string">"Mary"</span>, Gender.F);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在忽略其他欄位, 只考慮 id 的 equals(), 應該只會有 1 筆</span></span><br><span class="line">    Set&lt;Member&gt; members = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    members.add(m1);</span><br><span class="line">    members.add(m2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [Member(id=1, name=Tom, gender=M), Member(id=1, name=Mary, gender=F)]</span></span><br><span class="line">    System.out.println(members);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加入 override hashcode() 之後, Set 的重複問題就解決了<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Member m1 = <span class="keyword">new</span> Member(<span class="number">1</span>, <span class="string">"Tom"</span>, Gender.M);</span><br><span class="line">    Member m2 = <span class="keyword">new</span> Member(<span class="number">1</span>, <span class="string">"Mary"</span>, Gender.F);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因為 override hashcode 所以只會有 1 筆</span></span><br><span class="line">    Set&lt;Member&gt; members = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    members.add(m1);</span><br><span class="line">    members.add(m2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [Member(id=1, name=Tom, gender=M)]</span></span><br><span class="line">    System.out.println(members);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Apache-Commons-Lang"><a href="#Apache-Commons-Lang" class="headerlink" title="Apache Commons Lang"></a>Apache Commons Lang</h3><p>Apache Commons Lang 裡面擴增了許多 java.lang 層面的 API, 可以透過 Builder pattern 來處理 equals(), hashcode(), 好不好用就見仁見智了。</p><h4 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="一般寫法"><a href="#一般寫法" class="headerlink" title="一般寫法"></a>一般寫法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Member member = (Member) o;</span><br><span class="line">    <span class="keyword">return</span> id.equals(member.id) &amp;&amp;</span><br><span class="line">        name.equals(member.name) &amp;&amp;</span><br><span class="line">        gender == member.gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hash(id, name, gender);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Apache-Commons-Lang-1"><a href="#Apache-Commons-Lang-1" class="headerlink" title="Apache Commons Lang"></a>Apache Commons Lang</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Member member = (Member) o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> EqualsBuilder()</span><br><span class="line">        .appendSuper(<span class="keyword">super</span>.equals(member))  <span class="comment">// 加入 parenet 的 equals() 比較</span></span><br><span class="line">        .append(id, member.id)</span><br><span class="line">        .append(name, member.name)</span><br><span class="line">        .append(gender, member.gender)</span><br><span class="line">        .isEquals();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HashCodeBuilder(<span class="number">3</span>, <span class="number">41</span>)  <span class="comment">// 建構子, 一定要奇數</span></span><br><span class="line">        .appendSuper(<span class="keyword">super</span>.hashCode())</span><br><span class="line">        .append(id)</span><br><span class="line">        .append(name)</span><br><span class="line">        .append(gender)</span><br><span class="line">        .toHashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>所以如果 x.equals(y) 為 true, 並不能直接證明 x, y 的 hashcode 相等;<br>相對來說 x, y hashcode 相等, 也不能直接證明 x.equals(y)。</p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li>Java8 API Docs - <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-</a></li><li>Apache Commond Lang 3.1 Docs(HashCodeBuilder) - <a href="https://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/builder/HashCodeBuilder.html" target="_blank" rel="noopener">https://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/builder/HashCodeBuilder.html</a></li><li>Apache Commond Lang 3.1 Docs(EqualsBuilder) - <a href="https://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/builder/EqualsBuilder.html" target="_blank" rel="noopener">https://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/builder/EqualsBuilder.html</a></li><li>良葛格(物件相等性) - <a href="https://openhome.cc/Gossip/JavaEssence/ObjectEquality.html" target="_blank" rel="noopener">https://openhome.cc/Gossip/JavaEssence/ObjectEquality.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h3&gt;&lt;p&gt;Java 所有的 class 皆繼承於 &lt;code&gt;java.lang.Object&lt;/code&gt;,
      
    
    </summary>
    
      <category term="java" scheme="https://jerry80409.github.io/categories/java/"/>
    
    
      <category term="misc" scheme="https://jerry80409.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>牧羊少年的奇幻之旅</title>
    <link href="https://jerry80409.github.io/2019/01/29/the-alchemist/"/>
    <id>https://jerry80409.github.io/2019/01/29/the-alchemist/</id>
    <published>2019-01-29T05:03:23.000Z</published>
    <updated>2019-01-29T15:57:09.312Z</updated>
    
    <content type="html"><![CDATA[<h3 id="當你真心渴望某件東西時-整個宇宙都會聯合起來幫助你完成"><a href="#當你真心渴望某件東西時-整個宇宙都會聯合起來幫助你完成" class="headerlink" title="當你真心渴望某件東西時, 整個宇宙都會聯合起來幫助你完成"></a>當你真心渴望某件東西時, 整個宇宙都會聯合起來幫助你完成</h3><p><img src="/img/the-alchemist/the-alchemist.jpeg" alt="牧羊少年的奇幻之旅"></p><blockquote><p>兒子啊, 全世界的人都來過這個地方, 來尋找新的事物, 當他們離去的時候, 基本上還是跟來時同一個人。他們爬上高山去看過城堡, 最後還是覺得過去的比眼前好, 他們或許是金頭髮, 或許有著黑皮膚, 但他們大致跟這裡的人差不多。</p></blockquote><blockquote><p>在生命的重要時刻, 我們卻對發生在自己身上的事物無能為力, 只能聽天由命 - 這就是世界上最大的謊言 </p></blockquote><blockquote><p>因為你想要完成自己的天命, 也因為你正好處在一個想要放棄他的時刻。</p></blockquote><blockquote><p>如果你一開始就去承諾你根本還未擁有的東西, 你就會失去勇往直前的欲望。</p></blockquote><blockquote><p>我離開了我父親, 母親, 還有我的城鎮, 他們逐漸習慣了沒有我, 我也習慣了沒有他們, 總有一天我的羊兒也會習慣沒有我在身邊。</p></blockquote><blockquote><p>因為我是靠著想去麥加的念頭活下來的, 是這個念頭支持我能夠面對一成不變的每一天, 面對放在架子上的這些沈默水晶, 日復一日地在那間可怕的咖啡廳裡吃午餐和晚餐, 我很害怕一但完成了夢想, 我將不再有活下去的理由。</p></blockquote><blockquote><p>在你來以前, 我總是想著自己一直在原地浪費時間, 而我的朋友們卻不斷前進, 不管他們最終是破產或者更好, 那讓我非常沮喪, 可是現在我卻覺得保持現狀並不一定不好。</p></blockquote><blockquote><p>不可以不耐煩, 他對自己重複著, 就像駱駝伕說的, 該吃的時候就吃, 該前進的時候就前進。</p></blockquote><blockquote><p>如果你專注於現在, 就必定能改善現在, 而如果你能改善現在, 未來一定會更好。</p></blockquote><blockquote><p>魔鬼不是喝進人們嘴吧裡的東西, 而是從人們嘴巴裡說出來的東西</p></blockquote><blockquote><p>駱駝是不能信任的傢伙, 牠們可以一直走, 走好幾千步都不會累似的, 可是突然間牠們就垮下來, 死了。而馬每過一段路就會累, 所以你永遠知道該要求牠們走多遠, 也會知道什麼時候牠們會死。</p></blockquote><blockquote><p>法蒂瑪是一個沙漠的女人, 她知道男人必須出去, 以便能回來, 而且她已經有了屬於她的寶藏, 那就是你。如今她希望你能夠去找到你一直在追尋的東西。</p></blockquote><blockquote><p>初期, 他的心總是試圖要告訴他它的故事, 可是後來又說那些故事不是真的, 接著有一段時間, 他的心一直在告訴他它有多悲傷, 然後又在夕陽時分它又突然變得十分激動, 男孩不得不隱藏起他的淚水。當它訴說著寶藏的時候, 他的心跳得飛快, 可是當男孩凝望著沙漠地平線的時候, 他的心又變得弛緩下來。不過他的心從不曾靜止, 即使當男孩和鍊金術士都陷入沈默的時候。</p></blockquote><blockquote><p>一粒沙便是創造的契機, 而整個宇宙花了幾千萬年才創造出它。</p></blockquote><blockquote><p>當你身上帶著珍貴的財產時, 如果你試著要告訴別人這件事, 往往別人都不會相信你。</p></blockquote><hr><ul><li>El Alquimista (The Alchemist / a Fable About Following Your Dream)</li><li>Publish: 時報文化, 2014</li><li>ISBN: 978-957-13-4171-2</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;當你真心渴望某件東西時-整個宇宙都會聯合起來幫助你完成&quot;&gt;&lt;a href=&quot;#當你真心渴望某件東西時-整個宇宙都會聯合起來幫助你完成&quot; class=&quot;headerlink&quot; title=&quot;當你真心渴望某件東西時, 整個宇宙都會聯合起來幫助你完成&quot;&gt;&lt;/a&gt;當你真心
      
    
    </summary>
    
      <category term="reading" scheme="https://jerry80409.github.io/categories/reading/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring Boot JPA (Hibernate) 入門</title>
    <link href="https://jerry80409.github.io/2019/01/24/spring-boot-jpa-hibernate/"/>
    <id>https://jerry80409.github.io/2019/01/24/spring-boot-jpa-hibernate/</id>
    <published>2019-01-24T03:58:20.000Z</published>
    <updated>2019-02-26T09:44:03.696Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h3><p>Spring Data 是 Spring 的資料（data , model）處理套件的總稱, 從 Spring data 著手, 比較容易知道 Spring 在資料面的生態系, 底層可搭配這些, 守備範圍很廣, 細節就看 <a href="https://spring.io/projects/spring-data" target="_blank" rel="noopener">文件</a>.</p><ul><li>Spring Data JDBC</li><li>Spring Data JPA (底層可搭配 JBoss, Hibernate, OpenJPA, EclipseLink)</li><li>Spring Data LDAP</li><li>Spring Data for Apache Cassandra</li><li>Spring Data DynamoDB</li><li>Spring Data Elasticsearch </li></ul><h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><blockquote><p>Transactions are atomic units of work that can be committed or rolled back</p></blockquote><p>簡單解釋, <code>transaction</code> 應該是一個不可分割的工作單元, 可以像這樣, 同時包含讀, 寫的一個 <strong>工作單元</strong>.<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">SELECT</span> @A:=<span class="keyword">SUM</span>(salary) <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> <span class="keyword">type</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> table2 <span class="keyword">SET</span> summary=@A <span class="keyword">WHERE</span> <span class="keyword">type</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure></p><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h3><p>ACID 是在設計 Transaction 的重要準則, 但有時候很難兼顧… </p><ul><li>Atomicity: 原子特性, translaction 應該盡量維持不能分割的狀態, 以上面例子來說 <code>SELECT</code> 跟 <code>UPDATE</code> 是同一個業務, 不應該拆成 2 個 transaction 去處理</li><li>Consistency: 資料一致性, translaction 在 commit 或 rolled back 都應該保持資料的正確性, 以上面來說假設 <code>SELECT</code> 拿到 2 筆資料, 那 <code>UPDATE</code> 也應該是 <strong>2</strong> 筆資料, 何時會資料不一致？ 當你沒做任何 locking(樂觀鎖, 悲觀鎖) 又在一段時間內有多個 translaction 在同一張 table 操作, 資料就會髒掉(髒讀, 髒寫)</li><li>Isolation: 隔離性, 延伸 Consistency 的敘述, 為了維持ㄧ致性, 隔離是必要手段, 有幾個策略 <code>READ_UNCOMMITTED</code>, <code>REPEATABLE_READ</code>, <code>SERIALIZABLE</code>, 詳細可看 <a href="https://www.byteslounge.com/tutorials/spring-transaction-isolation-tutorial" target="_blank" rel="noopener">這篇</a></li><li>Durability: 持久性, 這邊通常是靠資料庫的特性去處理, 比如 InnoDB 有 <strong>doublewrite buffer</strong> 來確保資料在斷電, 或一些意外情況可以確實寫入 Disk.</li></ul><h3 id="DDL-DML-DCL-TCL"><a href="#DDL-DML-DCL-TCL" class="headerlink" title="DDL, DML, DCL, TCL"></a>DDL, DML, DCL, TCL</h3><p>幾個常見的名詞…</p><ul><li>DDL: Data Definition Language, 建立資料庫 Schema 常用的指令, <code>CREATE</code>, <code>DROP</code>, <code>ALTER</code>, <code>TRUNCATE</code>, <code>COMMENT</code>, <code>RENAME</code></li><li>DML: Data Manipulation Language, 做資料操作的指令 CRUD 那些, <code>SELECT</code>, <code>INSERT</code>, <code>DELETE</code>, <code>UPDATE</code></li><li>DCL: Data Control Language, 資料庫的權限管理, <code>GRUNT</code>, <code>REVOKE</code></li><li>TCL: Transaction Control Language, 做 transaction 操作的, <code>COMMIT</code>, <code>ROLLBACK</code>, <code>SAVEPOINT</code>, <code>SET TRANSACTION</code></li></ul><h3 id="Hibernate-DDL"><a href="#Hibernate-DDL" class="headerlink" title="Hibernate DDL"></a>Hibernate DDL</h3><p>我自己的開發習慣, 小專案通常都會用 <code>Spring Data JPA</code> 搭配 <code>Hibernate</code>, Hibernate 支援 DDL, 所以就算沒有 <a href="https://flywaydb.org/" target="_blank" rel="noopener">flyway</a> 或 <a href="https://www.liquibase.org/" target="_blank" rel="noopener">liquibase</a> 支援, 資料庫基本的 DDL 也能幫你處理得很好.</p><p>hibernate.ddl-auto 幾個參數</p><ul><li>create: 刪除已存在的 tables, 建立新的 tables</li><li>create-drop: 建立新的 tables, SessionFactory 結束後刪除 tables</li><li>update: 建立新的 tables, 若 entity 欄位有異動, 更新對應的 DDL</li><li>validate: 只驗證 tables 與 columns 是否存在, entity 有該欄位, 但資料庫沒有對應的欄位, 噴 <code>PersistenceException</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javax.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory;</span><br><span class="line">nested exception is org.hibernate.tool.schema.spi.SchemaManagementException: Schema-validation: missing column </span><br><span class="line">[locking] in table [employee]</span><br></pre></td></tr></table></figure></li></ul><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">database:</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">spring_transaction_demo</span></span><br><span class="line"><span class="attr">  username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  password:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">$&#123;database.username&#125;</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">$&#123;database.password&#125;</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://$&#123;database.host&#125;:3306/$&#123;database.name&#125;?characterEncoding=utf-8&amp;useUnicode=true&amp;useSSL=false&amp;rewriteBatchedStatements=TRUE</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">MYSQL</span></span><br><span class="line">    <span class="string">hibernate.ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="string">properties.hibernate.show_sql:</span> <span class="string">$&#123;spring.jpa.show-sql&#125;</span></span><br><span class="line">    <span class="string">properties.hibernate.format_sql:</span> <span class="string">$&#123;spring.jpa.show-sql&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="string">logging.level.org.hibernate.SQL:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 懶人用的 lombok 套件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Column;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.EnumType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Enumerated;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Table;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Version;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"employee"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"emp_no"</span>, unique = <span class="keyword">true</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Long empNo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"birth_date"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDate birthDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"first_name"</span>, nullable = <span class="keyword">false</span>, length = <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>, nullable = <span class="keyword">false</span>, length = <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated</span>(EnumType.STRING)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"gender"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Gender gender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"hire_date"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDate hireDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"version"</span>)</span><br><span class="line">    <span class="keyword">private</span> Instant version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.springtransactionisolation.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Employee e1 = <span class="keyword">new</span> Employee();</span><br><span class="line">    e1.setFirstName(<span class="string">"Leo"</span>);</span><br><span class="line">    e1.setLastName(<span class="string">"Foster"</span>);</span><br><span class="line">    e1.setGender(Gender.M);</span><br><span class="line">    e1.setBirthDate(LocalDate.of(<span class="number">1990</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    e1.setHireDate(LocalDate.now());</span><br><span class="line"></span><br><span class="line">    repository.save(e1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li>InnoDB and the ACID Model, <a href="https://dev.mysql.com/doc/refman/5.6/en/mysql-acid.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.6/en/mysql-acid.html</a></li><li>MySQL Glossary - <a href="https://dev.mysql.com/doc/refman/5.6/en/glossary.html#glos_acid" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.6/en/glossary.html#glos_acid</a></li><li>GeeksForGeeks - <a href="https://www.geeksforgeeks.org/sql-ddl-dml-dcl-tcl-commands/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/sql-ddl-dml-dcl-tcl-commands/</a></li><li>Spring Data docs - <a href="https://spring.io/projects/spring-data" target="_blank" rel="noopener">https://spring.io/projects/spring-data</a></li><li>Hibernate_User_Guide - <a href="https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#preface" target="_blank" rel="noopener">https://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#preface</a></li><li>Blog byteslounge - <a href="https://www.byteslounge.com/tutorials/spring-transaction-isolation-tutorial" target="_blank" rel="noopener">https://www.byteslounge.com/tutorials/spring-transaction-isolation-tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spring-Data&quot;&gt;&lt;a href=&quot;#Spring-Data&quot; class=&quot;headerlink&quot; title=&quot;Spring Data&quot;&gt;&lt;/a&gt;Spring Data&lt;/h3&gt;&lt;p&gt;Spring Data 是 Spring 的資料（data , mo
      
    
    </summary>
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/categories/spring-boot/"/>
    
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/tags/spring-boot/"/>
    
      <category term="spring-data" scheme="https://jerry80409.github.io/tags/spring-data/"/>
    
      <category term="jpa" scheme="https://jerry80409.github.io/tags/jpa/"/>
    
  </entry>
  
  <entry>
    <title>facebook-oauth</title>
    <link href="https://jerry80409.github.io/2019/01/23/facebook-oauth/"/>
    <id>https://jerry80409.github.io/2019/01/23/facebook-oauth/</id>
    <published>2019-01-23T15:50:56.000Z</published>
    <updated>2019-01-23T17:04:48.961Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Facebook-OAuth-Login-Flow"><a href="#Facebook-OAuth-Login-Flow" class="headerlink" title="Facebook OAuth Login Flow"></a>Facebook OAuth Login Flow</h3><p><img src="/img/facebook-oauth/facebook-oauth.png" alt="facebook-oauth"><br>從圖片中, 簡單的可以歸納幾個步驟，授權細節會在後面提到。</p><ol><li>(前端) 產生 Login Button 給使用者。</li><li>(後端) 接收 <code>使用者</code> 的 Login Request, Redirect 給 Facebook。</li><li>Facebook 會彈出登入視窗給使用者, 徵求 <code>使用者</code> 授權。</li><li>使用者點選同意授權，會回傳 redirect_uri 跟 code 給 <code>後端</code>。</li><li>(後端) 接收使用者同意授權的 scopes, code 做驗證, 並且跟 Facebook 做 server side 驗證, facebook 會要求一個 callback endpoint。</li><li>(後端) 接收 Facebook OAuth Callback, 並儲存使用者的 access token, 做相關產品的應用, long-terms access token <code>90 days 要重新授權一次</code>。</li></ol><h3 id="第一步是申請-App-Login-功能"><a href="#第一步是申請-App-Login-功能" class="headerlink" title="第一步是申請 App, Login 功能"></a>第一步是申請 App, Login 功能</h3><p>Dashboard 頁面, 主要是管理 app 要啟用的 apis, 可以觀察 apis 錯誤率, rate limit 狀態, security 設定, callback, hook 設定, etc. 最重要的是 facebook 審核, 審查你所申請的 “APP” 有沒有符合他們的規範, 或違反 Facebook 原則或標準, 如果 APP 還在開發階段, 這部分就沒差, 如果要上線基本資料就要填好, <a href="https://zh.wikipedia.org/wiki/Facebook" target="_blank" rel="noopener">2018 劍橋事件</a> 後審查變得比較嚴格, 請參考 <a href="https://developers.facebook.com/docs/apps/review/" target="_blank" rel="noopener">審查指南</a>。</p><p>下方的 OAuth 重新導向 URL 設定大概像這樣, 很簡單的 server side 驗證端點<br><img src="/img/facebook-oauth/fb-dash-board-login.png" alt="fb-app-dash-board"></p><h3 id="產生「登入」對話方塊給使用者"><a href="#產生「登入」對話方塊給使用者" class="headerlink" title="產生「登入」對話方塊給使用者"></a>產生「登入」對話方塊給使用者</h3><p>這一步的重點只是要產生 url, 自己覺得由後端來產生比較好, 簡單來說就是要產生下列這串 url, 當中的 <code>state</code> 很重要, 很重要, 很重要!!!<br>除了放入使用者的一些狀態, 最好還是做一些對稱加密(AES), 是避免 csrf 攻擊的基本防禦方法, 記得在 callback endpoint 驗證 hash 是不是自己公司簽出來的資訊.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.facebook.com/v2.12/dialog/oauth?</span><br><span class="line">  client_id=&#123;app-id&#125;</span><br><span class="line">  &amp;redirect_uri=&#123;&quot;https://www.domain.com/login&quot;&#125;</span><br><span class="line">  &amp;state=&#123;&quot;&#123;st=state123abc,ds=123456789&#125;&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>當使用者點擊這個 URL 會發生兩件事,</p><ol><li>Facebook 會詢問使用者是否願意授權給這個 App</li><li>Facebook 知道使用者已經同意你的 App 做一些事情, Redirect 給你的 server</li></ol><h3 id="Server-收到-Facebook-Redirect"><a href="#Server-收到-Facebook-Redirect" class="headerlink" title="Server 收到 Facebook Redirect"></a>Server 收到 Facebook Redirect</h3><ol><li>驗證 <code>state</code> 是不是由 facebook redirect 過來的</li><li>解密 <code>state</code> 取得使用者的基本資訊</li><li>拿 Facebook Redirect 給你的 <code>code</code> 跟 app 的 <code>id</code>, <code>secret</code> 資訊, 取得使用者的 <code>access token</code> (short-term)</li><li>再把請求 redirect 到登入成功頁面（index.html）</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收 facebook user login callback</span></span><br><span class="line"><span class="comment"> * 此端點無法透過 Authorization 做保護, 所以 state 一定要作加密（加簽）, 驗證處理。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code  facebook oauth response param</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> state facebook oauth response param</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/oauth/callback"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">callbackHandler</span><span class="params">(@RequestParam(value = <span class="string">"code"</span>)</span> String code,</span></span><br><span class="line"><span class="function">                                      @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"state"</span>)</span> String state) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"Received Facebook login callback with code: [&#123;&#125;] and state: [&#123;&#125;]"</span>, code, state);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// decode state</span></span><br><span class="line">    <span class="keyword">final</span> String decodeState = <span class="keyword">new</span> String(decoder.decode(state), <span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 我會在 state 放入 jwt, 做驗證 split status</span></span><br><span class="line">    <span class="keyword">final</span> String[] statusItems = decodeState.split(<span class="string">";"</span>);</span><br><span class="line">    Map&lt;String, String&gt; statusMap = ImmutableMap.&lt;String, String&gt;builder()</span><br><span class="line">        .put(<span class="string">"jwt"</span>, statusItems[<span class="number">0</span>])</span><br><span class="line">        .put(<span class="string">"perms"</span>, statusItems[<span class="number">1</span>])</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有敏感資訊, 設定為 debug 層級</span></span><br><span class="line">    log.debug(<span class="string">"Facebook Login user's jwt: [&#123;&#125;] and request facebook perms is: [&#123;&#125;]"</span>,</span><br><span class="line">        statusMap.get(<span class="string">"jwt"</span>), statusMap.get(<span class="string">"perms"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 2018/3/13 verify jwt</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// request facebook get user access_tokens</span></span><br><span class="line">    <span class="keyword">final</span> HttpUrl baseURL = HttpUrl.get(<span class="keyword">new</span> URL(ACCESS_TOKEN_URL));</span><br><span class="line">    <span class="keyword">final</span> HttpUrl accessTokenUrl = baseURL.newBuilder()</span><br><span class="line">        .addQueryParameter(<span class="string">"client_id"</span>, FACEBOOK_APP_ID)</span><br><span class="line">        .addQueryParameter(<span class="string">"client_secret"</span>, FACEBOOK_APP_SECRET)</span><br><span class="line">        .addQueryParameter(<span class="string">"redirect_uri"</span>, REDIRECT_URI)</span><br><span class="line">        .addQueryParameter(<span class="string">"code"</span>, code)</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> OkHttpClient restClient = <span class="keyword">new</span> OkHttpClient();</span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .url(accessTokenUrl)</span><br><span class="line">        .build();</span><br><span class="line">    Response response = restClient.newCall(request).execute();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 2018/3/13 handler request error.</span></span><br><span class="line"></span><br><span class="line">    AccessTokenDTO accessTokenDTO = </span><br><span class="line">    objectMapper.readValue(response.body().byteStream(), AccessTokenDTO.class);</span><br><span class="line">    log.info(<span class="string">"Request: [&#123;&#125;]"</span>, accessTokenUrl.toString());</span><br><span class="line">    log.debug(<span class="string">"Response: [&#123;&#125;]"</span>, accessTokenDTO);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 2018/3/13 insert or update facebook user info.</span></span><br><span class="line">    log.info(<span class="string">"Update Facebook User ..."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// redirect to index page</span></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.add(<span class="string">"Location"</span>, INDEX_PAGE);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(headers, HttpStatus.FOUND);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Facebook-OAuth-Login-Flow&quot;&gt;&lt;a href=&quot;#Facebook-OAuth-Login-Flow&quot; class=&quot;headerlink&quot; title=&quot;Facebook OAuth Login Flow&quot;&gt;&lt;/a&gt;Facebook OA
      
    
    </summary>
    
      <category term="facebook" scheme="https://jerry80409.github.io/categories/facebook/"/>
    
    
      <category term="facebook_apis" scheme="https://jerry80409.github.io/tags/facebook-apis/"/>
    
      <category term="oauth" scheme="https://jerry80409.github.io/tags/oauth/"/>
    
  </entry>
  
  <entry>
    <title>Dirty Paws</title>
    <link href="https://jerry80409.github.io/2019/01/16/dirty-paws/"/>
    <id>https://jerry80409.github.io/2019/01/16/dirty-paws/</id>
    <published>2019-01-16T03:59:49.000Z</published>
    <updated>2019-01-23T15:43:07.252Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Of-Monsters-and-Men"><a href="#Of-Monsters-and-Men" class="headerlink" title="Of Monsters and Men"></a>Of Monsters and Men</h3><p><a href="https://en.wikipedia.org/wiki/Of_Monsters_and_Men" target="_blank" rel="noopener">Of monster and men</a> 是我最喜歡的樂團, 冰島樂團, 有一陣子我很喜歡 <strong>怪獸</strong>, 朋友就介紹了這個樂團, 直接被命中。 他們大部分的歌詞都很 <strong>寓言故事</strong>, MV 製作也很細心, 像 Dirty paws 用動畫的方式呈現歌詞中的寓意, 感覺就像在看小電影。自己很喜歡裡面的成員 <strong>Ragnar þórhallsson</strong>, 吉他, 聲音也很棒, <strong>Ragnhildur Gunnarsdóttir</strong> 小號超強…, <strong>Nanna Bryndís Hilmarsdóttir</strong> 主唱也很厲害, 總而言之是我近幾年心中排行第一的樂團。  </p><iframe width="640" height="360" src="https://www.youtube.com/embed/ym3AIUvA4ac" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Dirty-Paws"><a href="#Dirty-Paws" class="headerlink" title="Dirty Paws"></a>Dirty Paws</h3><p>聽著這首歌, 就順手把 blog 建置好了, 所以就命名 <strong>PAWS</strong>, 一方面這首也是 <code>The Secret Life of Walter Mitty</code> (白日夢冒險王, 2013) 主題曲之一。</p><iframe width="640" height="360" src="https://www.youtube.com/embed/mCHUw7ACS8o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Lyrics"><a href="#Lyrics" class="headerlink" title="Lyrics"></a>Lyrics</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Songwriters: Arni Gudjonsson / Nanna Bryndis Hilmarsdottir / Ragnar Thorhallsson</span><br><span class="line">Dirty Paws lyrics © Sony/ATV Music Publishing LLC</span><br></pre></td></tr></table></figure><p>Jumping up and down the floor<br>My head is an animal</p><p>And once there was an animal<br>It had a son that mowed the lawn<br>The son was an OK guy<br>They had a pet dragonfly</p><p>The dragonfly it ran away<br>But it came back with a story to say</p><p>Her dirty paws and furry coat<br>She ran down the forest slope</p><p>The forest of talking trees<br>They used to sing about the birds and the bees<br>The bees had declared a war<br>The sky wasn’t big enough for them all<br>The birds, they got help from below<br>From dirty paws and the creatures of snow</p><p>So for a while things were cold<br>They were scared down in their holes<br>The forest that once was green<br>Was colored black by those killing machines<br>But she and her furry friends<br>Took down the queen bee and her men</p><p>And that’s how the story goes<br>The story of the beast with those four dirty paws</p><hr><p>歌詞的意思, 單看字面其實很難掌握,</p><p>第一種解釋, </p><blockquote><p>背景是 <strong>第二次世界大戰</strong>, bees 代表軸心國, Queen Bee(德國), birds 代表法國與英格蘭, dirty paws 代表的是美國與俄羅斯, forest 是歐洲整體, animal 代表在戰爭中人類的野獸天性, 美國之所以代表 dirty paws 是因為經常出現於國際戰爭中, 4 個 dirty paws 分別代表 (Revolutionary, Civil, WWI, WWII ) </p></blockquote><p>但這樣解釋也不太完全啦, 冰島在第二次世界大戰屬於中立國, 沒有直接參與二戰</p><p>第二種解釋,</p><blockquote><p>Dirty paws 是 <strong>My Head Is an Animal</strong> 專輯之首, 整張專輯就是一個故事, 故事的開端是一個人, 被人群責備想殺死的對象; 在第二首 <strong>King And Lionheart</strong> 那個人墜入愛河, 並安定下來; 在第三首 <strong>Mountain Sound</strong> 主角被敵人找到, 只好逃離愛人身邊; 在 <strong>Slow And Steady</strong> 與 <strong>From Finner</strong>, 主角被抓了並且被殺死, 所以在 <strong>Little Talks</strong> 愛情破碎了, 女主角因為他的死亡而瘋狂, 在 <strong>Six Weeks</strong> 找到新的寄託, 在 <strong>Love Love Love</strong> 女主角發現自己意識到自己不是真正的愛他, 只是精神上的寄託,</p></blockquote><p>我也還沒把整張專輯都弄懂, 但看 MV 來解釋的話我是覺得有點牽強 XD,<br>其他解釋也都滿有趣的, 可以讀讀…</p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li>lyric interpretations - <a href="https://www.lyricinterpretations.com/of-monsters-and-men/dirty-paws" target="_blank" rel="noopener">https://www.lyricinterpretations.com/of-monsters-and-men/dirty-paws</a></li><li>song meanings - <a href="https://songmeanings.com/songs/view/3530822107858883535/" target="_blank" rel="noopener">https://songmeanings.com/songs/view/3530822107858883535/</a></li><li>好邱推薦 - <a href="https://greeninthemorningsun.blogspot.com/2015/07/of-monsters-and-men-beneath-skin.html" target="_blank" rel="noopener">https://greeninthemorningsun.blogspot.com/2015/07/of-monsters-and-men-beneath-skin.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Of-Monsters-and-Men&quot;&gt;&lt;a href=&quot;#Of-Monsters-and-Men&quot; class=&quot;headerlink&quot; title=&quot;Of Monsters and Men&quot;&gt;&lt;/a&gt;Of Monsters and Men&lt;/h3&gt;&lt;p&gt;&lt;a
      
    
    </summary>
    
      <category term="song" scheme="https://jerry80409.github.io/categories/song/"/>
    
    
      <category term="of_monster_and_men" scheme="https://jerry80409.github.io/tags/of-monster-and-men/"/>
    
  </entry>
  
  <entry>
    <title>Inversion Of Control 學習筆記</title>
    <link href="https://jerry80409.github.io/2019/01/11/notting-inversion-of-control/"/>
    <id>https://jerry80409.github.io/2019/01/11/notting-inversion-of-control/</id>
    <published>2019-01-11T05:42:30.000Z</published>
    <updated>2019-02-26T09:45:02.996Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>只是我的閱讀筆記而已, 網路上資料滿多的, 個人比較推薦的是 <strong>Martin Fowler</strong> 這篇, 這篇記錄是我個人的理解, 再加上一些 Spring 的開發經驗描述, 有些地方我覺得還好就沒特別紀錄, 有些則是按照我自己的經驗解釋, 我還很阿菜, 如果有錯誤的地方也歡迎指正與討論 XD</p><p>原文: <a href="https://martinfowler.com/articles/injection.html" target="_blank" rel="noopener">https://martinfowler.com/articles/injection.html</a></p><h3 id="Inversion-Of-Control"><a href="#Inversion-Of-Control" class="headerlink" title="Inversion Of Control"></a>Inversion Of Control</h3><p>Inversion Of Control (反轉控制), 在使用這個名詞之前, 我會先想一下他是用來解決怎樣的問題? <strong>解耦</strong>? 這是一個非常抽象的解釋, 如果只是單純的解耦, 其實會寫 <strong>interface</strong> 都能辦到, 我自己覺得更好的解釋方式應該是這樣:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">讓 [A Class] 能夠自然的依據使用情境自動使用 [N Class]</span><br></pre></td></tr></table></figure></p><p>在文章中, 用了 <strong>MovieLister</strong> 跟 <strong>MovieFinder</strong> 解釋了許多。<br>最一開始直覺的寫法是直接依賴 <code>MovieLister -&gt; MovieFinder</code>, 但如果 MovieFinder 需要從 SQL、XML、WebService 讀入清單, 那透過 interface 就能解決, 但最終還是必須在 MovieLister 決定哪一種 implement(SQL, XML, WebService)? 為了解決這種不自然的依賴, 所以作者先從 <strong>Dependency Injection</strong> 角度來解釋。</p><h3 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h3><p>Dependency Injection (依賴注入), 這個名詞的主要觀念, 就是把 new instance 的主控權移交給外部, 實作就自己參照 Martin Fowler, 簡單記錄一下而已。</p><h4 id="1-Constructor-Injection"><a href="#1-Constructor-Injection" class="headerlink" title="1. Constructor Injection"></a>1. Constructor Injection</h4><p>簡單來說, 建構 MovieLister 的時候, 就選好要用哪一種 MovieFinder<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 由建構子注入 MovieFinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieLister</span><span class="params">(MovieFinder finder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finder = finder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-Setter-Injection"><a href="#2-Setter-Injection" class="headerlink" title="2. Setter Injection"></a>2. Setter Injection</h4><p>做法其實跟 Constructor Injection 差不多, 優點是在測試的時候更容易替換 MovieFinder 的實作。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> MovieFinder finder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由 setter method 注入 MovieFinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFinder</span><span class="params">(MovieFinder finder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finder = finder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-Interface-Injection"><a href="#3-Interface-Injection" class="headerlink" title="3. Interface Injection"></a>3. Interface Injection</h4><p>算是 Setter Injection 更進階的用法, 透過 interface 規範 instance 一定要實作 setter, 因為是 interface 的關係, 所以相對於 Setter Injection 更有彈性, 更統一, 舉例來說你在 InjectFinder 不但可以 <code>void injectFinder()</code> 還可以 <code>void injectEditor()</code> 之類的, 在測試的時候也比較容易製作 stub.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在 interface 定義 injectFinder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InjectFinder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectFinder</span><span class="params">(MovieFinder finder)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 透過 implement interface 來注入 MovieFinder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> <span class="keyword">implements</span> <span class="title">InjectFinder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectFinder</span><span class="params">(MovieFinder finder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finder = finder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service-Locator"><a href="#Service-Locator" class="headerlink" title="Service Locator"></a>Service Locator</h3><p>Service Locator (服務定位), 這個做法有種我認知的容器 (第三者) 的味道, 這種做法不同於 DI (外部注入), 而是透過 ServiceLocator 來封裝, 所以 MovieLister 是依賴 ServiceLocator 來取得 MovieFinder 的實體, 透過 Singleton design pattern 可以快速地實現。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceLocator</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// singleton pattern</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ServiceLocator soleInstance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Constructor, 容器初始化 (在容器裡註冊 MovieFinder)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceLocator</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 取得 MovieFinder instance</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MovieFinder <span class="title">movieFinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> soleInstance.movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 載入 ServiceLocator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ServiceLocator locator)</span> </span>&#123;</span><br><span class="line">        soleInstance = locator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieFinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Movie&gt; MOVIES = Stream.of(</span><br><span class="line">        <span class="keyword">new</span> Movie(<span class="string">"The Godfather"</span>, <span class="string">"Francis Ford Coppola"</span>),</span><br><span class="line">        <span class="keyword">new</span> Movie(<span class="string">"The Shawshank Redemption"</span>, <span class="string">"Frank Darabont"</span>),</span><br><span class="line">        <span class="keyword">new</span> Movie(<span class="string">"Inception"</span>, <span class="string">"Christopher Nolan"</span>),</span><br><span class="line">        <span class="keyword">new</span> Movie(<span class="string">"Fight Club"</span>, <span class="string">"David Fincher"</span>)</span><br><span class="line">    ).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Movie&gt; <span class="title">findByDirector</span><span class="params">(<span class="keyword">final</span> String director)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MOVIES.stream()</span><br><span class="line">            .filter(movie -&gt; director.equals(movie.getDirector()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 透過 singleton pattern, 直接從 ServiceLocator 取得 MovieFinder instance</span></span><br><span class="line">    <span class="keyword">private</span> MovieFinder finder = ServiceLocator.movieFinder();</span><br><span class="line"></span><br><span class="line">    Movie[] moviesDirectedBy(<span class="keyword">final</span> String director) &#123;</span><br><span class="line">        <span class="keyword">return</span> finder.findByDirector(director).toArray(<span class="keyword">new</span> Movie[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>請注意上面的第 3 個步驟 <code>ServiceLocator.movieFinder()</code>, 如果沒有在某個地方做 <code>configure()</code>, 就會發生 NPE(NullPointerException), 算是 ServiceLocator 的缺點吧, 但基本上大部分的 Framework 都會幫你處理這個 configure 的初始化, 而且如果不是 LazyLoading 的話, 在 configure 階段就能知道初始化成功或失敗。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tester</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServiceLocator.load(</span><br><span class="line">            <span class="keyword">new</span> ServiceLocator(<span class="keyword">new</span> MovieFinder()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        configure();</span><br><span class="line">        MovieLister lister = <span class="keyword">new</span> MovieLister();</span><br><span class="line">        Movie[] movies = lister.moviesDirectedBy(<span class="string">"Francis Ford Coppola"</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">1</span>, movies.length);</span><br><span class="line">        assertEquals(<span class="string">"The Godfather"</span>, movies[<span class="number">0</span>].getTitle());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="1-Segregated-Interface-for-the-Locator"><a href="#1-Segregated-Interface-for-the-Locator" class="headerlink" title="1. Segregated Interface for the Locator"></a>1. Segregated Interface for the Locator</h4><p>作者針對 Service Locator 做了更進一步的設計, 前面的 ServiceLocator 的缺點就是無法單獨使用 MovieFinder, 所以透過 <a href="https://martinfowler.com/bliki/RoleInterface.html" target="_blank" rel="noopener">role interface</a> 來把 MovieFinde 從 ServiceLocator 抽離, 作者的 Sample Code 讓我想了很久, 怎麼想都會是 NPE, 或是 StackOverflow XD</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MovieFinderLocator</span> </span>&#123;</span><br><span class="line">    <span class="function">MovieFinder <span class="title">movieFinder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceLocator</span> <span class="keyword">implements</span> <span class="title">MovieFinderLocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ServiceLocator soleInstance;</span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不是很能體會這樣寫法的優勢, 而且容易造成 StackOverflow</span></span><br><span class="line">    <span class="comment">// MovieFinderLocator locator = ServiceLocator.locator();</span></span><br><span class="line">    <span class="comment">// MovieFinder finder = locator.movieFinder();</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. Constructor, 容器初始化 (在容器裡註冊 MovieFinder)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceLocator</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 取得 MovieFinder instance</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MovieFinder <span class="title">movieFinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> soleInstance.movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 載入 ServiceLocator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ServiceLocator locator)</span> </span>&#123;</span><br><span class="line">        soleInstance = locator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 對外提供取得 ServiceLocator instance</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ServiceLocator <span class="title">locator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> soleInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 單獨使用 movieFinder, 不太確定是否為作者所提的 Segregated Interface for the Locator ?</span></span><br><span class="line">    <span class="keyword">private</span> MovieFinder finder = ServiceLocator.locator().movieFinder();</span><br><span class="line"></span><br><span class="line">    Movie[] moviesDirectedBy(<span class="keyword">final</span> String director) &#123;</span><br><span class="line">        <span class="keyword">return</span> finder.findByDirector(director).toArray(<span class="keyword">new</span> Movie[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MovieFinder <span class="title">getFinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.finder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// configure</span></span><br><span class="line">    MovieFinder finder = <span class="keyword">new</span> MovieFinder();</span><br><span class="line">    ServiceLocator.load(<span class="keyword">new</span> ServiceLocator(finder));</span><br><span class="line"></span><br><span class="line">    MovieLister lister = <span class="keyword">new</span> MovieLister();</span><br><span class="line">    Movie[] movies = lister.moviesDirectedBy(<span class="string">"Francis Ford Coppola"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 測試 lister 的 finder 是 ServiceLocator 所提供的 finder</span></span><br><span class="line">    assertEquals(lister.getFinder().hashCode(), finder.hashCode());</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">1</span>, movies.length);</span><br><span class="line">    assertEquals(<span class="string">"The Godfather"</span>, movies[<span class="number">0</span>].getTitle());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-A-Dynamic-Service-Locator"><a href="#2-A-Dynamic-Service-Locator" class="headerlink" title="2. A Dynamic Service Locator"></a>2. A Dynamic Service Locator</h4><p>多了 HashMap 來記錄 Servicies, 然後再藉由 <code>loadService()</code>, <code>getService()</code>, 來達到 Dynamic Service Locator, 滿好理解的就沒實作了。</p><h4 id="3-Using-both-a-locator-and-injection-with-Avalon"><a href="#3-Using-both-a-locator-and-injection-with-Avalon" class="headerlink" title="3. Using both a locator and injection with Avalon"></a>3. Using both a locator and injection with Avalon</h4><p>這個做法看起來滿理想, 也滿好理解的, 透過 ServiceManager 來做 ServiceLocator, 再透過 Role Interface 來達到隔離其他不相關的 Servicies, </p><h3 id="作者總結"><a href="#作者總結" class="headerlink" title="作者總結"></a>作者總結</h3><ol><li>DI, ServiceLoactor 會增加閱讀與理解的難度, 不管怎麼解耦合, 最終也只是將依賴對象轉換到另一個單位, 最終取決於這樣的情境是否能夠對開發, 測試上有所優化。</li><li>DI 對開發者比較容易掌握到物件相依狀況, 容易調整擴展; ServiceLocator 相對於 DI 更難理解與閱讀, 在一些比較常用的工具(HttpClient, SQLConnection, Logger), 我自己習慣以 ServiceLocator 的方式去開發, ServiceLocator 會比較適合, 有點像 Spring 的 <strong>Configuration Bean</strong>; 如果只是單純的提供給某些業務使用, 那 DI 的做法會比較合適, 容易調整擴展。</li><li>代碼配置, 文件配置, 寫過 Spring xml 應該都痛過, 代碼配置缺點就是翻 API 理解名詞, 翻到快升天。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h3&gt;&lt;p&gt;只是我的閱讀筆記而已, 網路上資料滿多的, 個人比較推薦的是 &lt;strong&gt;Martin Fowl
      
    
    </summary>
    
      <category term="misc" scheme="https://jerry80409.github.io/categories/misc/"/>
    
    
      <category term="inversion-of-control" scheme="https://jerry80409.github.io/tags/inversion-of-control/"/>
    
  </entry>
  
</feed>
