<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PAWS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jerry80409.github.io/"/>
  <updated>2018-11-27T13:35:05.433Z</updated>
  <id>https://jerry80409.github.io/</id>
  
  <author>
    <name>jerry80409</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>osx-install-python3</title>
    <link href="https://jerry80409.github.io/2018/11/27/osx-install-python3/"/>
    <id>https://jerry80409.github.io/2018/11/27/osx-install-python3/</id>
    <published>2018-11-27T13:23:24.000Z</published>
    <updated>2018-11-27T13:35:05.433Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h3><p>OSX 自帶 python2, 查了一下, <a href="https://docs.python.org/3/using/mac.html" target="_blank" rel="noopener">官方建議</a> 是說不應該刪,</p><blockquote><p>The Apple-provided build of Python is installed in /System/Library/Frameworks/Python.framework and /usr/bin/python, respectively. You should never modify or delete these<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python --version</span><br><span class="line">Python 2.7.15</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="ptyhon3"><a href="#ptyhon3" class="headerlink" title="ptyhon3"></a>ptyhon3</h3><p>忘記自己在什麼時候安裝好的, 所以 upgrade 就好<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew upgrade python3</span><br></pre></td></tr></table></figure></p><p>upgrade 完成後, 會說明 OSX 的預設 python2.7 的相關環境與設定,<br>而 python3 的相關環境與設定分別是 <code>python3</code>, <code>python3-config</code>, <code>pip3</code>, etc.<br>這些都安裝在 <code>/usr/local/opt/python/libexec/bin</code> ,<br>如果你還想要使用 <strong>**python2.7</strong>, 再自行安裝 <code>brew install python@2</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Upgrading 1 outdated package, with result:</span><br><span class="line">python3 3.6.5 -&gt; 3.7.0</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Python has been installed as</span><br><span class="line">  /usr/<span class="built_in">local</span>/bin/python3</span><br><span class="line"></span><br><span class="line">Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to</span><br><span class="line">`python3`, `python3-config`, `pip3` etc., respectively, have been installed into</span><br><span class="line">  /usr/<span class="built_in">local</span>/opt/python/libexec/bin</span><br><span class="line"></span><br><span class="line">If you need Homebrew<span class="string">'s Python 2.7 run</span></span><br><span class="line"><span class="string">  brew install python@2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Pip, setuptools, and wheel have been installed. To update them run</span></span><br><span class="line"><span class="string">  pip3 install --upgrade pip setuptools wheel</span></span><br></pre></td></tr></table></figure></p><p>提示還說要升級, pip, setuptools, wheel<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade pip setuptools wheel</span><br></pre></td></tr></table></figure></p><p>這樣一來基本的開發環境已經完成了, 就先照 官方文件 來個互動吧<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">Python 3.7.0 (default, Aug 22 2018, 15:22:56) </span><br><span class="line">[Clang 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; the_world_is_flat = True</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">if</span> the_world_is_flat:</span><br><span class="line">...     <span class="built_in">print</span>(<span class="string">"Be careful not to fall off!"</span>)</span><br><span class="line">...</span><br><span class="line">Be careful not to fall off!</span><br></pre></td></tr></table></figure></p><p>先說說第一個雷, 就是 print 之前要 tab (4 個 space) 一下 :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python2&quot;&gt;&lt;a href=&quot;#python2&quot; class=&quot;headerlink&quot; title=&quot;python2&quot;&gt;&lt;/a&gt;python2&lt;/h3&gt;&lt;p&gt;OSX 自帶 python2, 查了一下, &lt;a href=&quot;https://docs.python
      
    
    </summary>
    
      <category term="python" scheme="https://jerry80409.github.io/categories/python/"/>
    
    
      <category term="python3" scheme="https://jerry80409.github.io/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>spring-batch-fault-tolerant</title>
    <link href="https://jerry80409.github.io/2018/11/27/spring-batch-fault-tolerant/"/>
    <id>https://jerry80409.github.io/2018/11/27/spring-batch-fault-tolerant/</id>
    <published>2018-11-27T07:37:44.000Z</published>
    <updated>2018-11-27T12:22:51.343Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p><strong>spring-batch</strong> 其實是很深的東西, 其中的容錯性 <code>fault-tolerant</code> 是個很棒的設計, 在批次處理中如果因為某些 exception 或是 http timeout exception 發生時, 只要指定好 exception handler, spring-batch 會自動重新運行該失敗的 step, 不需要整個 job 重新來過, 可以節省很多時間跟運算成本。</p><h3 id="Docs"><a href="#Docs" class="headerlink" title="Docs"></a>Docs</h3><ul><li>Spring Batch - <a href="https://docs.spring.io/spring-batch/4.0.x/reference/html/index.html" target="_blank" rel="noopener">Reference Documentation</a></li><li><a href="https://docs.spring.io/spring-batch/4.1.x/reference/html/step.html#stepRestart" target="_blank" rel="noopener">Step Restart</a></li><li><a href="https://www.bookstack.cn/read/SpringBatchReferenceCN/README.md" target="_blank" rel="noopener">Spring Batch参考文档中文版</a></li></ul><h3 id="Configure-Job"><a href="#Configure-Job" class="headerlink" title="Configure Job"></a>Configure Job</h3><p>簡單示範一下, 大小寫轉換的 job。</p><ol><li>這個 job 只會有一個 step</li><li>step 的 reader 操作, 用來讀取字串到 queue 裡面</li><li>step 的 processor 操作, 用來將字串轉為 upper case</li><li>step 的 writer 操作, 將處理完的字串 println 輸出</li></ol><h3 id="ItemReader"><a href="#ItemReader" class="headerlink" title="ItemReader"></a>ItemReader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleReader</span> <span class="keyword">implements</span> <span class="title">ItemReader</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConcurrentLinkedQueue&lt;String&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * for spring bean init</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"init simple reader..."</span>);</span><br><span class="line">        queue = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class="line">        queue.addAll(Arrays.asList(</span><br><span class="line">            <span class="string">"message 1"</span>, <span class="string">"message 2"</span>, <span class="string">"message 3"</span>, <span class="string">"message 4"</span>, <span class="string">"message 5"</span>,</span><br><span class="line">            <span class="string">"message 6"</span>, <span class="string">"message 7"</span>, <span class="string">"message 8"</span>, <span class="string">"message 9"</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> Exception, UnexpectedInputException, ParseException, NonTransientResourceException </span>&#123;</span><br><span class="line">        <span class="comment">// 一次輸出一個 message, 直到 queue 為空</span></span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty() ? <span class="keyword">null</span> : queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ItemProcessor"><a href="#ItemProcessor" class="headerlink" title="ItemProcessor"></a>ItemProcessor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"message 5"</span>.equals(msg)) &#123;</span><br><span class="line">            <span class="comment">// 簡單示範 message 5, 處理時必定會拋出自定義的 RetryException </span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RetryException(<span class="string">"message 5 was FAILED"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"message 8"</span>.equals(msg)) &#123;</span><br><span class="line">            <span class="comment">// 簡單示範 message 8, 處理時必定會拋出自定義的 RetryException</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RetryException(<span class="string">"message 8 was FAILED"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"processing : &#123;&#125;"</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> msg.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RetryException"><a href="#RetryException" class="headerlink" title="RetryException"></a>RetryException</h3><p>自定義的 RetryException, 當失敗的資料拋到這裡時, 可以做一些簡單的 log 或 notification<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RetryException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        log.warn(<span class="string">"Catch Retry Exception: &#123;&#125;"</span>, message); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ItemWriter"><a href="#ItemWriter" class="headerlink" title="ItemWriter"></a>ItemWriter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleWriter</span> <span class="keyword">implements</span> <span class="title">ItemWriter</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(List&lt;? extends String&gt; msgList)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        msgList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><p>當使用了 <code>.faultTolerant()</code> 必定需要 <code>.retry(RetryException.class)</code> 或 <code>.skip(RetryException.class)</code> 的配合。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleReader <span class="title">simpleReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleReader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleProcessor <span class="title">simpleProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleWriter <span class="title">simpleWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleWriter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">simpleJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"SIMPLE_JOB"</span>)</span><br><span class="line">            .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">            .flow(simpleStep())     <span class="comment">// 在操作設計上, 個人比較喜歡用 flow, 在設計上更方便組合 step</span></span><br><span class="line">            .end()</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">simpleStep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"SIMPLE_STEP"</span>)</span><br><span class="line">            .&lt;String, String&gt;chunk(<span class="number">1</span>)</span><br><span class="line">            .reader(simpleReader())</span><br><span class="line">            .processor(simpleProcessor())</span><br><span class="line">            .writer(simpleWriter())</span><br><span class="line">            .faultTolerant()                    <span class="comment">// 開啟容錯設定</span></span><br><span class="line">            .retry(RetryException.class)        <span class="comment">// 當這個 step 某個階段拋出 RetryException</span></span><br><span class="line">            .backOffPolicy(backOfFiveSec())     <span class="comment">// wait 5 sec</span></span><br><span class="line">            .retryLimit(<span class="number">3</span>)                      <span class="comment">// 最多 retry 3 次</span></span><br><span class="line">            .skip(RetryException.class)         <span class="comment">// 當這個 step 某個階段拋出 RetryException 做 skip 處理</span></span><br><span class="line">            .skipLimit(<span class="number">1</span>)                       <span class="comment">// 最多 skip 1 次</span></span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> FixedBackOffPolicy <span class="title">backOfFiveSec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FixedBackOffPolicy fiveSecBackoff = <span class="keyword">new</span> FixedBackOffPolicy();</span><br><span class="line">        fiveSecBackoff.setBackOffPeriod(<span class="number">5_000</span>);</span><br><span class="line">        fiveSecBackoff.setSleeper(<span class="keyword">new</span> ThreadWaitSleeper());</span><br><span class="line">        <span class="keyword">return</span> fiveSecBackoff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Scheduling-Launch-Job"><a href="#Scheduling-Launch-Job" class="headerlink" title="Scheduling Launch Job"></a>Scheduling Launch Job</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LaunchJob</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JobLauncher jobLauncher;</span><br><span class="line">    <span class="keyword">private</span> Job job;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"launching foo-job..."</span>);</span><br><span class="line">        <span class="keyword">final</span> JobParameters jobParameters = <span class="keyword">new</span> JobParametersBuilder()</span><br><span class="line">            .addLong(<span class="string">"execution"</span>, System.currentTimeMillis())</span><br><span class="line">            .toJobParameters();</span><br><span class="line">        jobLauncher.run(job, jobParameters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><ol><li>當 message 5 發生錯誤時, 自動 Retry 3 次</li><li>step 收到第 1 次 RetryExcpetion, 做 Skip 處理, 繼續往下執行</li><li>當 message 8 發生錯誤時, 一樣 Retry 3 次</li><li>step 收到第 2 次 RetryExcpetion, 已達到 skip 上限, 視為 step 失敗</li><li>job 失敗</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c.example.batchdemo.config.LaunchJob   : launching foo-job...</span><br><span class="line">o.s.b.a.batch.JpaBatchConfigurer         : JPA does not support custom isolation levels, so locks may not be taken when launching Jobs</span><br><span class="line">o.s.b.c.r.s.JobRepositoryFactoryBean     : No database type set, using meta data indicating: MYSQL</span><br><span class="line">o.s.b.c.l.support.SimpleJobLauncher      : No TaskExecutor has been set, defaulting to synchronous executor.</span><br><span class="line">o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=SIMPLE_JOB]] launched with the following parameters: [&#123;execution=1533892561146&#125;]</span><br><span class="line">o.s.batch.core.job.SimpleStepHandler     : Executing step: [SIMPLE_STEP]</span><br><span class="line">c.example.batchdemo.job.SimpleReader   : init simple reader...</span><br><span class="line">c.e.batchdemo.job.SimpleProcessor      : processing : message 1</span><br><span class="line">MESSAGE 1</span><br><span class="line">c.e.batchdemo.job.SimpleProcessor      : processing : message 2</span><br><span class="line">MESSAGE 2</span><br><span class="line">c.e.batchdemo.job.SimpleProcessor      : processing : message 3</span><br><span class="line">MESSAGE 3</span><br><span class="line">c.e.batchdemo.job.SimpleProcessor      : processing : message 4</span><br><span class="line">MESSAGE 4</span><br><span class="line">c.e.batchdemo.job.RetryException       : Catch Retry Exception: message 5 was FAILED</span><br><span class="line">c.e.batchdemo.job.RetryException       : Catch Retry Exception: message 5 was FAILED</span><br><span class="line">c.e.batchdemo.job.RetryException       : Catch Retry Exception: message 5 was FAILED</span><br><span class="line">c.e.batchdemo.job.SimpleProcessor      : processing : message 6</span><br><span class="line">MESSAGE 6</span><br><span class="line">c.e.batchdemo.job.SimpleProcessor      : processing : message 7</span><br><span class="line">MESSAGE 7</span><br><span class="line">c.e.batchdemo.job.RetryException       : Catch Retry Exception: message 8 was FAILED</span><br><span class="line">c.e.batchdemo.job.RetryException       : Catch Retry Exception: message 8 was FAILED</span><br><span class="line">c.e.batchdemo.job.RetryException       : Catch Retry Exception: message 8 was FAILED</span><br><span class="line">o.s.batch.core.step.AbstractStep         : Encountered an error executing step SIMPLE_STEP in job SIMPLE_JOB</span><br><span class="line"></span><br><span class="line">org.springframework.batch.core.step.skip.SkipLimitExceededException: Skip limit of &apos;1&apos; exceeded</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;spring-batch&lt;/strong&gt; 其實是很深的東西, 其中的容錯性
      
    
    </summary>
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/categories/spring-boot/"/>
    
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/tags/spring-boot/"/>
    
      <category term="spring-batch" scheme="https://jerry80409.github.io/tags/spring-batch/"/>
    
  </entry>
  
  <entry>
    <title>leet-code-575-distribute-candies</title>
    <link href="https://jerry80409.github.io/2018/11/27/leet-code-575-distribute-candies/"/>
    <id>https://jerry80409.github.io/2018/11/27/leet-code-575-distribute-candies/</id>
    <published>2018-11-27T06:49:18.000Z</published>
    <updated>2018-11-27T07:20:26.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Quests"><a href="#Quests" class="headerlink" title="Quests"></a>Quests</h3><p>Q: <a href="https://leetcode.com/problems/distribute-candies/" target="_blank" rel="noopener">https://leetcode.com/problems/distribute-candies/</a></p><blockquote><p>Given an integer array with even length, where different numbers in this array represent different kinds of candies. Each number means one candy of the corresponding kind. You need to distribute these candies equally in number to brother and sister. Return the maximum number of kinds of candies the sister could gain.</p></blockquote><ul><li>給予 <strong>偶數</strong> 長度的 int 陣列</li><li>一個 int value 代表一種糖果</li><li>需要平均分配糖果給 2 人 （sister, brother）</li><li>回傳 sister 可以拿到最多幾種糖果</li></ul><h3 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h3><ul><li>The length of the given array is in range [2, 10,000], and will be even.</li><li>The number in given array is in range [-100,000, 100,000].</li></ul><h3 id="Cases"><a href="#Cases" class="headerlink" title="Cases"></a>Cases</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: candies = [1,1,2,2,3,3]</span><br><span class="line">output: 3</span><br><span class="line">6 顆糖果, 1 人最多 3 顆, 最大可以拿 3 種 =&gt; 3</span><br><span class="line"></span><br><span class="line">Input: candies = [1,1,2,3]</span><br><span class="line">Output: 2</span><br><span class="line">4 顆糖果, 1 人最多 2 顆, 最大可以拿 2 種 =&gt; 2, [1,2] 或 [1,3] 或 [2,3]</span><br><span class="line"></span><br><span class="line">Input: candies = [1,2,3,4]</span><br><span class="line">Output: 2</span><br><span class="line">4 顆糖果, 1 人最多 2 顆, 最大可以拿 2 種 =&gt; 2, [1,2] 或 [1,3] 或 [1,4] 或 [2,3] ...</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">distributeCandies</span><span class="params">(<span class="keyword">int</span>[] candies)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果只有 2 顆, 一人一顆, 最多一種</span></span><br><span class="line">  <span class="keyword">if</span> (candies.length == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 先算出, 糖果有幾種</span></span><br><span class="line">  HashSet&lt;Integer&gt; candiesType = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  Arrays.stream(candies).boxed().forEach(candiesType::add);</span><br><span class="line">  <span class="keyword">int</span> typeSize = candiesType.size();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 一人, 拿到最多糖果的可能</span></span><br><span class="line">  <span class="keyword">int</span> maxType = candies.length / <span class="number">2</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 最多拿 maxType, 或者 typeSize</span></span><br><span class="line">  <span class="keyword">return</span> typeSize &lt;= maxType ? typeSize : maxType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以優化為<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">distributeCandies</span><span class="params">(<span class="keyword">int</span>[] candies)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果只有 2 顆, 一人一顆, 最多一種</span></span><br><span class="line">  <span class="keyword">if</span> (candies.length == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 先算出, 糖果有幾種</span></span><br><span class="line">  HashSet&lt;Integer&gt; candiesType = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  Arrays.stream(candies).boxed().forEach(candiesType::add);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> Math.min(candiesType.size(), candies.length / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Quests&quot;&gt;&lt;a href=&quot;#Quests&quot; class=&quot;headerlink&quot; title=&quot;Quests&quot;&gt;&lt;/a&gt;Quests&lt;/h3&gt;&lt;p&gt;Q: &lt;a href=&quot;https://leetcode.com/problems/distribute-c
      
    
    </summary>
    
      <category term="leetcode" scheme="https://jerry80409.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://jerry80409.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>spring boot scheduleing 設定</title>
    <link href="https://jerry80409.github.io/2018/11/27/spring-boot-conditionally-enable-scheduleing/"/>
    <id>https://jerry80409.github.io/2018/11/27/spring-boot-conditionally-enable-scheduleing/</id>
    <published>2018-11-27T06:38:13.000Z</published>
    <updated>2018-11-27T07:11:51.244Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>因為在 localhost 做開發時, 不希望 Spring-boot 的 scheduling 被啟動, 所以透過 <code>ConditionalOnProperty annotation</code> 做了一個開關, 方便在 <code>applicaion.yml</code> 做維護切換, 在 <code>application-prod.yml</code> 才會被 enable。</p><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># scheduling</span><br><span class="line">scheduling.enabled: false</span><br></pre></td></tr></table></figure><h3 id="Configuration-bean"><a href="#Configuration-bean" class="headerlink" title="Configuration bean"></a>Configuration bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"scheduling"</span>, name = <span class="string">"enabled"</span>, havingValue = <span class="string">"true"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulingConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">" */1 * * * * *"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentTimeCron</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> SimpleDateFormat DATE_FORMAT = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">        System.out.println(String.format(<span class="string">"Executing [%s] Times, datetime：%s"</span>, count++, DATE_FORMAT.format(<span class="keyword">new</span> Date())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Executing [1] Times, datetime：2018-08-06 11:17:03</span><br><span class="line">Executing [2] Times, datetime：2018-08-06 11:17:04</span><br><span class="line">Executing [3] Times, datetime：2018-08-06 11:17:05</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;因為在 localhost 做開發時, 不希望 Spring-boot 的 scheduli
      
    
    </summary>
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/categories/spring-boot/"/>
    
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>osx 安裝 homestead 與 laravel</title>
    <link href="https://jerry80409.github.io/2018/11/27/osx-install-laravel-homestead/"/>
    <id>https://jerry80409.github.io/2018/11/27/osx-install-laravel-homestead/</id>
    <published>2018-11-27T06:06:26.000Z</published>
    <updated>2018-11-27T06:38:45.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h3><p>我對 vagrant 的理解就是, 它在 virtual-box, VMware 的架構上, 再做一層抽象, 方便在不同的 providers 建立 instance<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install vagrant</span><br></pre></td></tr></table></figure></p><h3 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h3><p>用 virtual-box 長大的, 所以沒特別選用 hyper-v<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install virtualbox</span><br></pre></td></tr></table></figure></p><h3 id="Homestead"><a href="#Homestead" class="headerlink" title="Homestead"></a>Homestead</h3><p>簡單的理解為 image, 裡面包含 ubuntu 16.04, mysql, nginx, 基本的 php 運作環境與相關套件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant box add laravel/homestead       <span class="comment"># install vagrant VM</span></span><br><span class="line">vagrant box list                        <span class="comment"># list vagrant VMs</span></span><br></pre></td></tr></table></figure></p><h3 id="Initial-Homestead"><a href="#Initial-Homestead" class="headerlink" title="Initial Homestead"></a>Initial Homestead</h3><p>這個步驟, 主要用來初始化 Homestead, 對應 local 的 port, cpu, memory, etc., 下面有簡單的對 Homestead.yml 修改的範例<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/laravel/homestead.git ~/Homestead</span><br><span class="line"><span class="built_in">cd</span> ~/Homestead</span><br><span class="line">git checkout v7.9.0</span><br><span class="line">bash init.sh</span><br></pre></td></tr></table></figure></p><h3 id="Build-a-Laravel-Project"><a href="#Build-a-Laravel-Project" class="headerlink" title="Build a Laravel Project"></a>Build a Laravel Project</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/code/</span><br><span class="line"><span class="built_in">cd</span>  ~/code</span><br><span class="line">composer create-project --prefer-dist laravel/laravel blog</span><br></pre></td></tr></table></figure><h3 id="Edit-the-Homestead-yml"><a href="#Edit-the-Homestead-yml" class="headerlink" title="Edit the Homestead.yml"></a>Edit the Homestead.yml</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Homestead</span><br><span class="line">vim Homestead.yml</span><br><span class="line">folders:</span><br><span class="line">    - map: ~/code/blog</span><br><span class="line">      to: /home/vagrant/code/blog</span><br><span class="line">sites:</span><br><span class="line">    - map: blog.app</span><br><span class="line">      to: /home/vagrant/code/blog/public</span><br></pre></td></tr></table></figure><h3 id="Update-Host"><a href="#Update-Host" class="headerlink" title="Update Host"></a>Update Host</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/hosts</span><br></pre></td></tr></table></figure><p>添加<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.10.10   blog.app</span><br><span class="line">Reload Vagrant</span><br><span class="line">vagrant reload --provision</span><br></pre></td></tr></table></figure></p><p>我在這階段, 遇到了 Vagrant up times out<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Timed out while waiting for the machine to boot. This means that</span><br><span class="line">Vagrant was unable to communicate with the guest machine within</span><br><span class="line">the configured (&quot;config.vm.boot_timeout&quot; value) time period.</span><br><span class="line"></span><br><span class="line">If the box appears to be booting properly, you may want to increase</span><br><span class="line">the timeout (&quot;config.vm.boot_timeout&quot;) value.</span><br></pre></td></tr></table></figure></p><p>解決方式, 參考 <a href="https://stackoverflow.com/questions/41064388/laravel-homestead-vagrant-up-times-out" target="_blank" rel="noopener">stackoverflow</a><br>是把 virtual-box 的 網路已連接 勾選<br><img src="/img/install-laravel-homestead/virtual-box-cable-connected.png" alt="virtual-box-cable-connected"></p><p>記得重新 reload<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant reload --provision</span><br></pre></td></tr></table></figure></p><h3 id="Initial-Project"><a href="#Initial-Project" class="headerlink" title="Initial Project"></a>Initial Project</h3><p>Homestead 的開發環境, 真的對第一次寫 laravel 有點難度, 要手動設定一堆東西 XD<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant ssh</span><br><span class="line"><span class="built_in">cd</span> ~/code/blog</span><br><span class="line">cp .env.example .env</span><br><span class="line">php artisan key:generate    <span class="comment"># 產生 app key</span></span><br></pre></td></tr></table></figure></p><p>建立 database<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uhomestead -p</span><br><span class="line">CREATE DATABASE homestead CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure></p><p>建立 table schema<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan migrate</span><br></pre></td></tr></table></figure></p><h3 id="Https-not-working"><a href="#Https-not-working" class="headerlink" title="Https not working"></a>Https not working</h3><p>其實 localhost 不用這麼糾結 https, 但我有強迫症, 因為 <a href="https://github.com/laravel/homestead/issues/754" target="_blank" rel="noopener">#754 Issue</a> Https Not working, issue 裡面給的參考是把 <code>Homestead.yml</code> 的 sites 做調整, 把原本的 blog.app 更改為 blog.localhost 或 blog.test, 但 blog.localhost 但在 mac OS 在解析 host name 會無限循環, 所以在 mac OS 上只能用 *.test, 參考這個 <a href="https://github.com/laravel/homestead/pull/697" target="_blank" rel="noopener">PR</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sites:</span><br><span class="line">    - map: blog.test</span><br><span class="line">      to: /home/vagrant/code/blog/public</span><br></pre></td></tr></table></figure><p>記得 <code>/etc/hosts</code> 也要修改<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.10.10   blog.test</span><br></pre></td></tr></table></figure></p><p>再 Reload 一次, 好雷啊 Orz<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vagrant reload --provision</span><br></pre></td></tr></table></figure></p><p>然後, Chrome 打開, 讓我哭一次<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://blog.test/   # 可以瀏覽</span><br><span class="line">https://blog.test/  # 不能瀏覽 Tears</span><br></pre></td></tr></table></figure></p><p>因為 <a href="https://github.com/laravel/homestead/issues/834" target="_blank" rel="noopener">#834 Issue</a>, <code>Homestead certificate</code> 不被 Chrome 信任,<br>讓我擦乾眼淚, 重新來過…</p><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><p>參考 <a href="https://stackoverflow.com/questions/48969083/how-to-get-https-certificate-working-on-local-laravel-homestead-site/49612084#49612084" target="_blank" rel="noopener">stackoverflow</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Homestead</span><br><span class="line">vagrant ssh -c <span class="string">'cat /etc/nginx/ssl/blog.test.crt'</span> &gt;blog.test.crt    <span class="comment"># 把 ssl crt 複製到 localhost</span></span><br></pre></td></tr></table></figure></p><p>直接點擊 blog.test.crt 把設定為 永遠信任</p><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h3><p><a href="https://laravel-china.org/articles/7359/let-your-homestead-site-support-https" target="_blank" rel="noopener">homestead support https</a></p><h3 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h3><p><img src="/img/install-laravel-homestead/laravel-homestead-https-demo.png" alt="homestead"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Vagrant&quot;&gt;&lt;a href=&quot;#Vagrant&quot; class=&quot;headerlink&quot; title=&quot;Vagrant&quot;&gt;&lt;/a&gt;Vagrant&lt;/h3&gt;&lt;p&gt;我對 vagrant 的理解就是, 它在 virtual-box, VMware 的架構上, 再做一
      
    
    </summary>
    
      <category term="laravel" scheme="https://jerry80409.github.io/categories/laravel/"/>
    
    
      <category term="laravel" scheme="https://jerry80409.github.io/tags/laravel/"/>
    
      <category term="homestead" scheme="https://jerry80409.github.io/tags/homestead/"/>
    
  </entry>
  
  <entry>
    <title>google-trends-hacking</title>
    <link href="https://jerry80409.github.io/2018/11/26/google-trends-hacking/"/>
    <id>https://jerry80409.github.io/2018/11/26/google-trends-hacking/</id>
    <published>2018-11-26T15:02:02.000Z</published>
    <updated>2018-11-26T15:10:35.569Z</updated>
    
    <content type="html"><![CDATA[<h3 id="給我資料"><a href="#給我資料" class="headerlink" title="給我資料"></a>給我資料</h3><p>最近試著在蒐集一些看起來有點用途的資料, Google Trends 看起來是一個 “滿有價值” 的資料平台, 是 Google 蒐集的全球趨勢資料, 包含最近流行的關鍵字, 關鍵字與關鍵字的比較, etc., 但 Google 並沒有提供相關的 API 介面, 所以要取得資料的做法我第一個想到的是 Crawler, 於是順手找了一下大神的開源專案, 左看右看上看下看, 都覺得太複雜不順手XD。</p><h3 id="Hack-Fun"><a href="#Hack-Fun" class="headerlink" title="Hack Fun"></a>Hack Fun</h3><p>剛好讀到一篇很有趣的文章 hacking the google trends api, 文章內容提到了幾個有趣的 resource</p><p>這是 2014 年的 Resource</p><ul><li><a href="https://trends.google.com/trends/hottrends/visualize?pn=p1" target="_blank" rel="noopener">Google Trends? Visualization</a></li><li><a href="https://trends.google.com/trends/topcharts" target="_blank" rel="noopener">Google Trends? Top-Charts</a></li><li><a href="https://trends.google.com/trends/hottrends/atom/feed?pn=p1" target="_blank" rel="noopener">Hot Trends Rss Feed</a></li></ul><p>當然還有今年（2018）最重要的世足趨勢</p><ul><li><a href="https://googletrends.github.io/world-cup-2018/?lang=en&amp;view=GB-ENG" target="_blank" rel="noopener">World-Cup-2018</a></li><li><a href="https://www.google.com/intl/es419/insidesearch/features/search/knowledge.html" target="_blank" rel="noopener">Knowledge Graph</a></li></ul><h3 id="Chrome-DevTools"><a href="#Chrome-DevTools" class="headerlink" title="Chrome DevTools"></a>Chrome DevTools</h3><p>2014 年那篇 hacking 有點過期了, 所以我稍微調整了一下做法,<br>以 Google-Trends 每日搜尋趨勢 為例, 先取得 uri。</p><ul><li>打開 Chrome DevTools</li><li>點選 Network Tab</li><li>勾選 Preserve log</li><li>重整頁面</li><li>觀察這個頁面的 Requests 行為</li><li>找到一個像這樣的請求, 複製他的 curl 語法</li></ul><p><img src="/img/google-trends-hacking/google-trends-hacking-with-chrome.png" alt="hacking-with-chrome-devtools"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl <span class="string">'https://trends.google.com/trends/api/dailytrends?hl=zh-TW&amp;tz=-480&amp;geo=TW&amp;ns=15'</span> </span><br><span class="line">-H <span class="string">'dnt: 1'</span> </span><br><span class="line">-H <span class="string">'accept-encoding: gzip, deflate, br'</span> </span><br><span class="line">-H <span class="string">'accept-language: zh-TW,zh;q=0.9,en-US;q=0.8,en;q=0.7'</span> </span><br><span class="line">-H <span class="string">'user-agent: Mozilla/5.0 ...'</span> </span><br><span class="line">-H <span class="string">'accept: application/json, text/plain, */*'</span> </span><br><span class="line">-H <span class="string">'referer: https://trends.google.com/trends/trendingsearches/daily?geo=TW'</span> </span><br><span class="line">-H <span class="string">'authority: trends.google.com'</span> </span><br><span class="line">-H <span class="string">'cookie: ...'</span> </span><br><span class="line">-H <span class="string">'x-client-data: ...'</span> </span><br><span class="line">--compressed</span><br></pre></td></tr></table></figure><h3 id="對-query-的猜測"><a href="#對-query-的猜測" class="headerlink" title="對 query 的猜測"></a>對 query 的猜測</h3><p>hl: Location 或是 Language<br>tz: timezone<br>ns: ??<br>可以得到, 像這樣的資料<br><img src="google-trends-hacking-json.png" alt="hacking-result-json"></p><h3 id="That’s-Rock"><a href="#That’s-Rock" class="headerlink" title="That’s Rock"></a>That’s Rock</h3><p>簡單地用 Retrofit2 + Okhttp3 做個接口(沒更新了)<br><a href="https://github.com/jerry80409/open-data-demo" target="_blank" rel="noopener">https://github.com/jerry80409/open-data-demo</a></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>沒實際使用過這些 Reference, 但可從一些文件去推斷 google trends 的 uri</p><ul><li><a href="https://www.npmjs.com/package/google-trends-api" target="_blank" rel="noopener">npm-google-trends-api</a></li><li><a href="https://github.com/GeneralMills/pytrends" target="_blank" rel="noopener">pytrends</a></li><li><a href="http://myweb.fcu.edu.tw/~mhsung/Research/InformationSystem/JSON/JSON_24.htm" target="_blank" rel="noopener">fcu.edu.tw</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;給我資料&quot;&gt;&lt;a href=&quot;#給我資料&quot; class=&quot;headerlink&quot; title=&quot;給我資料&quot;&gt;&lt;/a&gt;給我資料&lt;/h3&gt;&lt;p&gt;最近試著在蒐集一些看起來有點用途的資料, Google Trends 看起來是一個 “滿有價值” 的資料平台, 是 Goog
      
    
    </summary>
    
      <category term="hacking" scheme="https://jerry80409.github.io/categories/hacking/"/>
    
    
      <category term="misc" scheme="https://jerry80409.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>Shell 常用的基本指令</title>
    <link href="https://jerry80409.github.io/2018/11/26/basic-shell/"/>
    <id>https://jerry80409.github.io/2018/11/26/basic-shell/</id>
    <published>2018-11-26T14:48:31.000Z</published>
    <updated>2018-11-26T15:00:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Docs"><a href="#Docs" class="headerlink" title="Docs"></a>Docs</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man bash    <span class="comment"># 還滿詳盡的, 但讀的眼睛很酸, 問 google 比較快</span></span><br></pre></td></tr></table></figure><h3 id="預設的環境變數"><a href="#預設的環境變數" class="headerlink" title="預設的環境變數"></a>預設的環境變數</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">env</span><br></pre></td></tr></table></figure><h3 id="環境變數與自訂變數"><a href="#環境變數與自訂變數" class="headerlink" title="環境變數與自訂變數"></a>環境變數與自訂變數</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span></span><br><span class="line"><span class="built_in">echo</span> $$     <span class="comment"># bash process 的 pid</span></span><br><span class="line"><span class="built_in">echo</span> $?     <span class="comment"># 上個指令的執行狀況, 沒有錯誤會回傳 0</span></span><br></pre></td></tr></table></figure><h3 id="crash-by-exception"><a href="#crash-by-exception" class="headerlink" title="crash by exception"></a>crash by exception</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -e     <span class="comment"># 當 script 發生 error 會中斷執行</span></span><br><span class="line"><span class="built_in">set</span> +e     <span class="comment"># 當 script 發生 error 會繼續執行</span></span><br></pre></td></tr></table></figure><h3 id="export"><a href="#export" class="headerlink" title="export"></a>export</h3><p>可以在 sub process 使用被 export 的變數<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> var=<span class="string">'foo bar'</span></span><br><span class="line">bash         <span class="comment"># 切換到 sub process</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$var</span>    <span class="comment"># print 'foo bar’</span></span><br></pre></td></tr></table></figure></p><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><p>用來與使用者互動, 會讀取使用者的鍵盤輸入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'pleas type your name?'</span></span><br><span class="line"><span class="built_in">read</span> name    <span class="comment"># block 等待使用者輸入</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br></pre></td></tr></table></figure></p><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p>集合, 陣列<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">a[0]=John</span><br><span class="line">a[1]=18</span><br><span class="line">a[2]=male</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a[0]&#125;</span> is <span class="variable">$&#123;a[1]&#125;</span> age</span><br><span class="line"><span class="comment"># John is 18 age</span></span><br></pre></td></tr></table></figure></p><h3 id="RANDOM"><a href="#RANDOM" class="headerlink" title="RANDOM"></a>RANDOM</h3><p>亂數,<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$RANDOM</span>            <span class="comment"># 產生 Range 0 ~ 32767 隨機亂數 </span></span><br><span class="line"><span class="built_in">echo</span> $(((RANDOM%10)+1)) <span class="comment"># 產生 Range 1 ~ 10 隨機亂數</span></span><br></pre></td></tr></table></figure></p><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><p>evaluate(評估) 簡稱, 我不是很會用這個指令, 使用情境通常是把一個運算的結果, 迭代到新的變數裡面, 我翻譯得很怪, 看範例吧<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">days=365</span><br><span class="line">year=days</span><br><span class="line"><span class="built_in">echo</span> \$<span class="variable">$year</span>         <span class="comment"># $days, '\$' 做 escape character 輸出為 '$', $year 則輸出 'days'</span></span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">eval</span> \$<span class="variable">$year</span>    <span class="comment"># 365, 等同於 echo $days</span></span><br></pre></td></tr></table></figure></p><h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>我超愛的指令, 用來 “簡化” 操作<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -alFh'</span>     <span class="comment"># -h 方便閱讀檔案 size</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">'ls -Ah'</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">'ls -CFh'</span></span><br><span class="line"><span class="built_in">alias</span> k=<span class="string">'clear'</span></span><br><span class="line"><span class="built_in">alias</span> ..=<span class="string">'cd ..'</span></span><br><span class="line"><span class="built_in">alias</span> md=<span class="string">'mkdir -p'</span>     <span class="comment"># auto recursive create sub dirctory</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> lp=<span class="string">'function _lp()&#123; lsof -n -iTCP:$1 | grep LISTEN; &#125;;_lp'</span>    <span class="comment"># 查看 port 被哪個 process 使用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> psjar=<span class="string">'ps aux | grep jar'</span>    <span class="comment"># 查看 jar process</span></span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">'rm -i'</span>        <span class="comment"># 多一層 confirm 確認刪除, 更好的方法是改為 mv $@ ./trash</span></span><br><span class="line"><span class="built_in">alias</span> df=<span class="string">'df -h'</span>        <span class="comment"># -h 方便閱讀 size</span></span><br></pre></td></tr></table></figure></p><h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>不登出, 重新載入設定檔到目前 shell process, 在一些開發工具或語言為了方便在 shell 做一些事情, 通常都需要設定 $PATH, 設定完直接 source<br>編輯 .bashrc<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>設定 Go 的開發環境, 在 ./bashrc 裡面添加<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># go lang</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">"<span class="variable">$&#123;HOME&#125;</span>/go"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$&#123;GOPATH&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span>"</span></span><br></pre></td></tr></table></figure></p><p>載入 .bashrc 到當下的 bash shell process<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><h3 id="連續指令"><a href="#連續指令" class="headerlink" title="連續指令"></a>連續指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">command1; command2      <span class="comment"># 執行完 cmd1 後接著執行 cmd2, 無論 cmd1 成功或失敗</span></span><br><span class="line">command1 &amp;&amp; command2    <span class="comment"># 只要 cmd1 失敗, cmd2 就不執行</span></span><br><span class="line">command1 || command2    <span class="comment"># cmd1 失敗, 還是會執行 cmd2</span></span><br></pre></td></tr></table></figure><h3 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h3><p>這個要花點力氣記一下, 但用習慣就好了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 <span class="comment"># stdin, 標準輸入</span></span><br><span class="line">1 <span class="comment"># stdout, 標準輸出</span></span><br><span class="line">2 <span class="comment"># stderr, 錯誤輸出</span></span><br></pre></td></tr></table></figure></p><p>看實際應用範例比較快<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wc &lt;file                    <span class="comment"># 會計算 file 的行數, 字數, 字元數</span></span><br><span class="line">ls -al 1&gt;file               <span class="comment"># 把 list directory file 的結果, 輸出到檔案裡</span></span><br><span class="line">ls ./not-exist 2&gt;file       <span class="comment"># 由於 list not exist file, 所以噴錯 ls: cannot access ...到檔案裡 </span></span><br><span class="line"><span class="built_in">command</span> &gt;/dev/null 2&gt;&amp;1     <span class="comment"># 無論 cmd 執行的輸出的訊息, 或錯誤訊息, 皆拋出到 /dev/null (大家都稱呼這個路徑為 '黑洞')</span></span><br></pre></td></tr></table></figure></p><p>關於 <code>2&gt;&amp;1</code> 的詳細說明 <a href="http://ibookmen.blogspot.com/2010/11/unix-2.html" target="_blank" rel="noopener">http://ibookmen.blogspot.com/2010/11/unix-2.html</a>,<br>但還仍不是很懂, 不懂的東西, 就先記下他的用途跟結果就好 XD</p><p><code>2&gt;&amp;1</code> 我常用的情境, 我在 run jar 都會引用 logback package 方便整理 log 訊息, 所以 stdout 的 log 訊息, 我都會捨棄掉<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar app.jar &gt;/dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure></p><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><p>pip-line, 想像水管, 會依序執行指令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> | command2    <span class="comment"># pip 把 cmd1 執行結果 pass 給 cmd2 繼續執行, e.g. ps aux | grep jar</span></span><br><span class="line">cat /etc/group        <span class="comment"># 查看 group</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 回傳 </span></span><br><span class="line"><span class="comment"># group-name : password : gid : members</span></span><br><span class="line"><span class="comment"># nobody:*:-2:</span></span><br><span class="line"><span class="comment"># nogroup:*:-1:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 只要看 group-name</span></span><br><span class="line">cat /etc/group | cut -d<span class="string">":"</span> -f1        <span class="comment"># 將 cat 的 stdout 傳給 cut 做 stdin; cut -d:切分符號 -f:取切分後的欄位 n</span></span><br><span class="line">cat /etc/group | cut -d<span class="string">":"</span> -f1 | sort <span class="comment"># 同上, 並對 group-name a~z 排序</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Docs&quot;&gt;&lt;a href=&quot;#Docs&quot; class=&quot;headerlink&quot; title=&quot;Docs&quot;&gt;&lt;/a&gt;Docs&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="dev_ops" scheme="https://jerry80409.github.io/categories/dev-ops/"/>
    
    
      <category term="bash_shell" scheme="https://jerry80409.github.io/tags/bash-shell/"/>
    
  </entry>
  
  <entry>
    <title>單元測試藝術 Ch3</title>
    <link href="https://jerry80409.github.io/2018/11/26/the-art-of-unit-testing-note-ch3/"/>
    <id>https://jerry80409.github.io/2018/11/26/the-art-of-unit-testing-note-ch3/</id>
    <published>2018-11-26T13:52:01.000Z</published>
    <updated>2018-11-26T14:47:43.016Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ch3-透過虛設常式解決依賴問題"><a href="#Ch3-透過虛設常式解決依賴問題" class="headerlink" title="Ch3 透過虛設常式解決依賴問題"></a>Ch3 透過虛設常式解決依賴問題</h2><p>虛設常式原文是 <code>Stubs</code>, 老實說我並不是很清楚事不是我平常溝通用的 <code>Mock</code>, 稍微翻過後面的章節, 好像後面會說到, 就先稍微紀錄一下書上的解釋,</p><blockquote><p>要測試太空梭在宇宙航行安不安全, 不可能先飛上與宇宙, 因此 NASA 建立了太空梭的模擬系統, 模擬宇宙環境與操作面板。在開發中, 無法掌控的物件 (檔案系統, 執行緒, 記憶體, 時間, etc.) 就像無法控制的宇宙環境, 為了處理這一類的開發測試問題, 可以透過 stub, mock, fake, 避免直接依賴造成的問題。</p></blockquote><p>此章節主要案例以將 log 寫到檔案系統為例, 在測試時並不直接將 log 寫到檔案系統（File Writting）, 因此 <code>File Writting</code> 這段程式碼應該要被設計成可以抽換, 或者在 <code>File Writting</code> 之上考慮加一個中介層, 我對這個 <code>中介層</code> 的理解, 比較像是一個代理人, 測試的時候只要代理人說我去寫 log 了, 這樣就達到我們所要的 <code>隔離</code>, 就是不直接寫檔案到系統上。</p><h3 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="/img/the-art-of-unit-testing-note-ch3/demo.png" alt="demo"></p><h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>實作大致上可以分為兩類,<br>A type: 使用 interface, 或 delegates （類似 Proxy Pattern）<br>B type: 在建構 class 時, injection 假的實作物件</p><p>這邊簡單的紀錄一下我讀完比較有感覺的地方, 就是 Proxy pattern 在測試的應用,<br><img src="/img/the-art-of-unit-testing-note-ch3/uml.png" alt="uml"></p><p><code>LogAnalyzerUsingFactory</code> 用來抽象的, 裡面只會做兩件事,<br><code>getManager()</code> 來取得 FakeExtenstionManager 或 FileExtensionManager 實體,<br><code>isValidLogFileName()</code> 回傳實體的 isValid() 驗證</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAnalyzerUsingFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidLogFileName</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> getManager().isValid(fileName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 讓 factory 可以替換 FileExtensionManager 或 FakeFileExtensionManager</span></span><br><span class="line"><span class="comment">     * 參考 TestableLogAnalyzer.java</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> IExtensionManager <span class="title">getManager</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理人"><a href="#代理人" class="headerlink" title="代理人"></a>代理人</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestableLogAnalyzer</span> <span class="keyword">extends</span> <span class="title">LogAnalyzerUsingFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IExtensionManager manager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestableLogAnalyzer</span><span class="params">(IExtensionManager manager)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.manager = manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> IExtensionManager <span class="title">getManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FakeExtensionManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><p>裡面的 <code>FakeExtensionManager</code> 就是 stub 工人<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用測試工廠 (TestableLogAnalyzer) 包裝 stub (FakeExtensionManager)</span></span><br><span class="line"><span class="comment"> * TestableLogAnalyze 有點類似 proxy, 封裝了 IExtensionManager</span></span><br><span class="line"><span class="comment"> * 間接測試了 Manager 的實體</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">override_test</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">  FakeExtensionManager stub = <span class="keyword">new</span> FakeExtensionManager();</span><br><span class="line">  FakeExtensionManager.WILL_BE_VALID = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  TestableLogAnalyzer logAnalyzer = <span class="keyword">new</span> TestableLogAnalyzer(stub);</span><br><span class="line">  <span class="keyword">boolean</span> result = logAnalyzer.isValidLogFileName(<span class="string">"target_file.ext"</span>);</span><br><span class="line"></span><br><span class="line">  assertTrue(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ch3-透過虛設常式解決依賴問題&quot;&gt;&lt;a href=&quot;#Ch3-透過虛設常式解決依賴問題&quot; class=&quot;headerlink&quot; title=&quot;Ch3 透過虛設常式解決依賴問題&quot;&gt;&lt;/a&gt;Ch3 透過虛設常式解決依賴問題&lt;/h2&gt;&lt;p&gt;虛設常式原文是 &lt;code&gt;
      
    
    </summary>
    
      <category term="reading" scheme="https://jerry80409.github.io/categories/reading/"/>
    
    
      <category term="unit_test" scheme="https://jerry80409.github.io/tags/unit-test/"/>
    
  </entry>
  
  <entry>
    <title>單元測試藝術 Ch1 Ch2</title>
    <link href="https://jerry80409.github.io/2018/05/25/the-art-of-unit-testing-note-ch1-ch2/"/>
    <id>https://jerry80409.github.io/2018/05/25/the-art-of-unit-testing-note-ch1-ch2/</id>
    <published>2018-05-25T13:04:36.000Z</published>
    <updated>2018-11-26T14:46:22.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ch1-單元測試基礎"><a href="#Ch1-單元測試基礎" class="headerlink" title="Ch1 單元測試基礎"></a>Ch1 單元測試基礎</h3><ul><li>單元測試的範圍, 可以小到一個 function, 大到多個 Class</li><li>呼叫一個 <code>沒有回傳值</code> 的第三方 API, 也可以被歸類於單元測試</li><li>單元測試執行時, 要隔離其他沒有相關的程式</li><li>理想的單元測試, 容易自動化, 容易被實現, 非臨時性</li><li>整合測試, 測試更完整, 但涵蓋許多單元的運作, 難以快速釐清問題</li><li>沒有測試的程式碼, 在某些程度上也算是 Legacy code</li><li>Test-Driven Development (TDD), 測試先行的開發模式, 在開發之前, 就先釐清程式會產生的結果</li><li>TDD 的好處在於協助開發者釐清複雜的邏輯處理, 降低程式碼的複雜度</li><li>TDD 並不能保證設計出一個 perfect 的系統</li></ul><h3 id="Ch2-單元測試"><a href="#Ch2-單元測試" class="headerlink" title="Ch2 單元測試"></a>Ch2 單元測試</h3><ul><li>主要介紹 C# 的測試框架 (NUnit)</li><li>測試包含三種行為 Arrange, Act, Assert</li><li>撰寫測試時, <code>可讀性</code> 是最重要的考量</li><li>善用 setup 與 tearDown, 省去一些重複的操作, 並可以確保每次的測試, 不會影響下一次的測試</li><li>驗證預期的例外</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Ch1-單元測試基礎&quot;&gt;&lt;a href=&quot;#Ch1-單元測試基礎&quot; class=&quot;headerlink&quot; title=&quot;Ch1 單元測試基礎&quot;&gt;&lt;/a&gt;Ch1 單元測試基礎&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;單元測試的範圍, 可以小到一個 function, 大到多個 C
      
    
    </summary>
    
      <category term="reading" scheme="https://jerry80409.github.io/categories/reading/"/>
    
    
      <category term="unit_test" scheme="https://jerry80409.github.io/tags/unit-test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jerry80409.github.io/2018/05/25/hello-world/"/>
    <id>https://jerry80409.github.io/2018/05/25/hello-world/</id>
    <published>2018-05-25T12:04:36.000Z</published>
    <updated>2018-11-26T13:50:31.544Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Java-Code"><a href="#Java-Code" class="headerlink" title="Java Code"></a>Java Code</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Block-Quote"><a href="#Block-Quote" class="headerlink" title="Block Quote"></a>Block Quote</h3><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><h3 id="Quote-form-book"><a href="#Quote-form-book" class="headerlink" title="Quote form book"></a>Quote form book</h3><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><h3 id="Chinese-test"><a href="#Chinese-test" class="headerlink" title="Chinese test"></a>Chinese test</h3><p>年格先在可放無優的；玩實不：那年計時黃改家接指是門過和有輕時向苦等竟自工算不計時情老強過：產合待：定可臺想性許息能下，不創時望今，是微。</p><p>頭車利軍而險成時、照我這打定不相，班車人人而關，媽自無管得是以個馬權子用得關，燈水就老過時信部員顧決水上就發！結單那戲不；眼灣市有買因覺一校須始始部你車年卻來反服：生在老子正、國一他期考自那月不，排海否器。屋分因此走濟知十日的紙地給地市兒、驗多來、清且小讓線紙裡笑平地我電，倒高師起；己比設復全轉時過系意些有叫臺達十有意；書果自息始獎直遠出足動小供故禮賽去走力王種他是的算景心論理車行洲品把大紙大究人在能外題完府一帶最兒所來作。保的主是期口提大，風可院當法一會，還那重吃、物眼整到無支民一快活加雖如評言本多，分不飛星一許他水。</p><p>舉數下用的西車王角。多推再念草為草建育之的，孩得顧德。子場實……眾了些經中何是車減器設、男為學！中上有及，油病國又沒火竟離負間時童望題後、加方石房的生不導廠結好省克別考？</p><h3 id="Code-block"><a href="#Code-block" class="headerlink" title="Code block"></a>Code block</h3><p>Lorem ipsum dolor sit amet, <code>consectetur</code> adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p><h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><p><img src="/img/home-bg.jpg" alt=""><br><a style="background-color:black;color:white;text-decoration:none;padding:4px 6px;font-family:-apple-system, BlinkMacSystemFont, &quot;San Francisco&quot;, &quot;Helvetica Neue&quot;, Helvetica, Ubuntu, Roboto, Noto, &quot;Segoe UI&quot;, Arial, sans-serif;font-size:12px;font-weight:bold;line-height:1.2;display:inline-block;border-radius:3px" href="https://unsplash.com/@einarstorsul?utm_medium=referral&amp;utm_campaign=photographer-credit&amp;utm_content=creditBadge" target="_blank" rel="noopener noreferrer" title="Download free do whatever you want high-resolution photos from Einar Storsul"><span style="display:inline-block;padding:2px 3px"><svg xmlns="http://www.w3.org/2000/svg" style="height:12px;width:auto;position:relative;vertical-align:middle;top:-1px;fill:white" viewbox="0 0 32 32"><title>unsplash-logo</title><path d="M20.8 18.1c0 2.7-2.2 4.8-4.8 4.8s-4.8-2.1-4.8-4.8c0-2.7 2.2-4.8 4.8-4.8 2.7.1 4.8 2.2 4.8 4.8zm11.2-7.4v14.9c0 2.3-1.9 4.3-4.3 4.3h-23.4c-2.4 0-4.3-1.9-4.3-4.3v-15c0-2.3 1.9-4.3 4.3-4.3h3.7l.8-2.3c.4-1.1 1.7-2 2.9-2h8.6c1.2 0 2.5.9 2.9 2l.8 2.4h3.7c2.4 0 4.3 1.9 4.3 4.3zm-8.6 7.5c0-4.1-3.3-7.5-7.5-7.5-4.1 0-7.5 3.4-7.5 7.5s3.3 7.5 7.5 7.5c4.2-.1 7.5-3.4 7.5-7.5z"/></svg></span><span style="display:inline-block;padding:2px 3px">Einar Storsul</span></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="misc" scheme="https://jerry80409.github.io/tags/misc/"/>
    
  </entry>
  
</feed>
