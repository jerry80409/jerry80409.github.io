<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PAWS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jerry80409.github.io/"/>
  <updated>2018-12-04T10:59:04.486Z</updated>
  <id>https://jerry80409.github.io/</id>
  
  <author>
    <name>jerry80409</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maven 新手教學</title>
    <link href="https://jerry80409.github.io/2018/11/30/maven-for-beginners/"/>
    <id>https://jerry80409.github.io/2018/11/30/maven-for-beginners/</id>
    <published>2018-11-30T05:54:55.000Z</published>
    <updated>2018-12-04T10:59:04.486Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><blockquote><p>People develop abstractions by generalizing from concrete examples. Every attempt to determine the correct abstraction on paper without actually developing a running system is doomed to failure. No one is that smart. A framework is a resuable design, so you develop it by looking at the things it is supposed to be a design of. The more examples you look at, the more general your framework will be. </p></blockquote><p>Maven 擁有跟大多數的專案管理工具一樣, 具有建構專案, 整合測試, 管理套件相依, 檢查套件衝突問題, 友善但複雜的 plugins, 如果你有用過 <code>npm</code>, <code>composer</code> 那些工具的話, 大概就知道它的角色了。因為脫離了 intelliJ 許多東西都要自己來, 手動建立專案就是一個新的開始, 如果可以, 我還是推薦用 <code>intelliJ</code> 真的快很多啊, (tears。</p><p>在寫這篇的時候, 無聊稍微翻了一下 Maven 的起源來自於另一個 <a href="http://jakarta.apache.org/alexandria/legacy/" target="_blank" rel="noopener">Alexandria</a> 專案裡的一部分, 後來才轉入 <a href="http://turbine.apache.org/" target="_blank" rel="noopener">Turbine</a>, HA 離題了。</p><h3 id="Dev-environment"><a href="#Dev-environment" class="headerlink" title="Dev environment"></a>Dev environment</h3><ul><li>Mac</li><li>Java8</li><li>VSCode</li></ul><h3 id="Maven-in-5-mins"><a href="#Maven-in-5-mins" class="headerlink" title="Maven in 5 mins"></a>Maven in 5 mins</h3><p><a href="https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html" target="_blank" rel="noopener">Maven in 5 mins</a>, 這是一個簡單瞭解 Maven 功能的教學, 初學者必看。<br>另一篇, 我推薦這個 <a href="http://puremonkey2010.blogspot.com/2017/06/maven-maven-part1.html" target="_blank" rel="noopener">blog</a>, 基本的指令說明的很清楚。<br>建立專案的起手式<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate \</span><br><span class="line">  -DarchetypeGroupId=org.apache.maven.archetypes \  <span class="comment"># 專案的 archetypes, 可以替換自己喜歡的</span></span><br><span class="line">  -DgroupId=com.mycompany.app \                     <span class="comment"># package name</span></span><br><span class="line">  -DartifactId=my-app                               <span class="comment"># app name</span></span><br></pre></td></tr></table></figure></p><p>官方提供了幾種專案架構(J2EE, JSR-268, Webapp, etc.), 我沒有全部都用過, 細節可以 <a href="https://maven.apache.org/guides/introduction/introduction-to-archetypes.html" target="_blank" rel="noopener">參考這裡</a>。</p><h3 id="Archetype-quickstart-jdk8"><a href="#Archetype-quickstart-jdk8" class="headerlink" title="Archetype-quickstart-jdk8"></a>Archetype-quickstart-jdk8</h3><p><a href="https://github.com/ngeor/archetype-quickstart-jdk8" target="_blank" rel="noopener">https://github.com/ngeor/archetype-quickstart-jdk8</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn archetype:generate \</span><br><span class="line">    -DgroupId=com.examples \</span><br><span class="line">    -DartifactId=java-examples \</span><br><span class="line">    -Dpackaging=jar \</span><br><span class="line">    -DarchetypeGroupId=com.github.ngeor \</span><br><span class="line">    -DarchetypeArtifactId=archetype-quickstart-jdk8 \</span><br><span class="line">    -DarchetypeVersion=1.2.0 \</span><br><span class="line">    -DinteractiveMode=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>Archetypes, 我會推薦這個, 而且也比較符合團隊開發用, 支援:</p><ul><li>Java version set to 8</li><li>jUnit updated to latest (4.12)</li><li>fixed indentation and formatting (4 spaces)  </li><li>.gitignore file</li><li>checkstyle rules</li><li>travis support</li><li>checkstyle plugin</li><li>jacoco plugin</li><li>javadoc plugin</li><li>coveralls plugin</li></ul><p>架構長這樣<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   └── java</span><br><span class="line">    │       └── com</span><br><span class="line">    │           └── examples</span><br><span class="line">    │               └── App.java</span><br><span class="line">    └── <span class="built_in">test</span></span><br><span class="line">        └── java</span><br><span class="line">            └── com</span><br><span class="line">                └── examples</span><br><span class="line">                    └── AppTest.java</span><br></pre></td></tr></table></figure></p><h3 id="測試與打包"><a href="#測試與打包" class="headerlink" title="測試與打包"></a>測試與打包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> java-examples</span><br><span class="line">mvn clean package</span><br><span class="line">-------------------------------------------------------</span><br><span class="line"> T E S T S</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">Running com.examples.AppTest</span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.05 sec</span><br><span class="line"></span><br><span class="line">Results :</span><br><span class="line"></span><br><span class="line">Tests run: 1, Failures: 0, Errors: 0, Skipped: 0</span><br><span class="line"></span><br><span class="line">[INFO]</span><br><span class="line">[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ java-examples ---</span><br><span class="line">[INFO] Building jar: /Users/jerry80409/java/java-examples/target/java-examples-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 4.049 s</span><br><span class="line">[INFO] Finished at: 2018-11-30T15:23:16+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h3 id="套件管理"><a href="#套件管理" class="headerlink" title="套件管理"></a>套件管理</h3><p><code>.pom</code> 就類似 npm 的 <code>package.json</code> 應該很好懂吧, 套件的依賴就寫在 <code>&lt;dependencies&gt;</code> tag 底下, <strong>archetype-quickstart-jdk8</strong> 自帶 <code>junit4</code>, 很棒吧。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Profile-設定"><a href="#Profile-設定" class="headerlink" title="Profile 設定"></a>Profile 設定</h3><p>Profile 標籤允許依據不同的環境來執行不同的建構與 plugins 組合, <strong>archetype-quickstart-jdk8</strong> 裡面就包含了兩種 profiles (<code>jacoco</code>, <code>travis</code>)。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    This profile enables jacoco when unit tests are run.</span></span><br><span class="line"><span class="comment">    You can run it with mvn -P jacoco test.</span></span><br><span class="line"><span class="comment">    It also activates itself on Travis.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jacoco<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    For the Travis profile:</span></span><br><span class="line"><span class="comment">    - we want to break the build on any checkstyle violation.</span></span><br><span class="line"><span class="comment">    - we want to be able to publish coverage report to coveralls.</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>travis<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://www.jacoco.org/jacoco/trunk/doc/maven.html" target="_blank" rel="noopener">jacoco</a> 是用來檢查你的測試 (Junit) 覆蓋了多少比例的程式碼, 執行完之後會在 <code>/target/site/jacoco/</code> 出一份 Report。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn <span class="built_in">help</span>:describe -Dplugin=org.jacoco:jacoco-maven-plugin -Ddetail    <span class="comment"># 看文件</span></span><br><span class="line">mvn <span class="built_in">test</span> -Pjacoco</span><br></pre></td></tr></table></figure></p><p><img src="/img/maven-for-beginners/maven-jacoco.png" alt="maven-jacoco"></p><h3 id="Help-describe-plugin"><a href="#Help-describe-plugin" class="headerlink" title="Help:describe plugin"></a>Help:describe plugin</h3><p>任何的 plugin 都可以用 <code>help:describe</code> 來取得說明, 基本用法<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn <span class="built_in">help</span>:describe -Dplugin:[group-id]:[artifact-id] -Dgoal=[some-goal]</span><br></pre></td></tr></table></figure></p><h3 id="Plugin-設定"><a href="#Plugin-設定" class="headerlink" title="Plugin 設定"></a>Plugin 設定</h3><p>Plugin 是 <code>build</code> 標籤底下的子標籤, 功能很強大也很複雜, 可以用來做很多自動化的事情節省不少時間, 在說明之前建議先閱讀</p><ul><li><a href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html" target="_blank" rel="noopener">https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html</a></li><li><a href="https://www.baeldung.com/core-maven-plugins" target="_blank" rel="noopener">https://www.baeldung.com/core-maven-plugins</a></li></ul><p>再來是了解 <code>phases</code>, <code>goals</code> 的概念, 是 plugin 的主要核心, 一般來說, 一個 <code>phase</code> 通常會對應多個 <code>goals</code>, 如果沒有對應的 <code>goals</code> 在 build 的時候就不會被執行, 基本的用法就是<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn --<span class="built_in">help</span></span><br><span class="line">usage: mvn [options] [&lt;goal(s)&gt;] [&lt;phase(s)&gt;]</span><br></pre></td></tr></table></figure></p><p>以 <a href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html" target="_blank" rel="noopener">Introduction-to-the-lifecycle</a> 裡面的範例來做解釋,<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean dependency:copy-dependencies package</span><br></pre></td></tr></table></figure></p><ul><li><code>clean</code>, <code>package</code> 是 <strong>phases</strong></li><li><code>dependency:copy-dependencies</code> 是 <strong>goal</strong></li><li>這個指令會先執行 <code>clean</code>, 包含 pre-clean, clean 這兩個 phases</li><li>再執行 <code>dependency:copy-dependencies</code>, 這是 <a href="http://maven.apache.org/plugins/maven-dependency-plugin/" target="_blank" rel="noopener">maven-dependency-plugin</a> 的 goals 之一, 用來將依賴套件 (dependencies) 下載到指定位置</li><li>再執行 <code>package</code> 依據 pom.xml 裡面定義的 <code>&lt;packaging&gt;</code> tag 打包成對應的格式, 預設是 <code>jar</code></li></ul><h3 id="Jacoco-plugin"><a href="#Jacoco-plugin" class="headerlink" title="Jacoco plugin"></a>Jacoco plugin</h3><p>是 <strong>archetype-quickstart-jdk8</strong> 模板裡面的其中一個 plugin, 在 travis 的環境底下會自動執行</p><ul><li>在 <code>validate</code> phase 會做 <code>mvn jacoco:prepare-agent</code>, </li><li>在 <code>test phase</code> 會做 <code>mvn jacoco:report</code>, </li><li><p>等同於底下這行指令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn jacoco:prepare-agent <span class="built_in">test</span> jacoco:report</span><br></pre></td></tr></table></figure></li><li><p><code>pom.xml</code> 註解</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jacoco<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 這是在 travis 上面才會有的環境變數, 會在 travis 環境下自動執行相關的 build --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>env.TRAVIS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jacoco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jacoco-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 這個 execution 綁定了 validate phase, 會執行 jacoco:prepare-agent --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>prepare-agent<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>prepare-agent<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 這個 execution 綁定了 test phase, 會執行 jacoco:report --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 會在 /target/site/jacoco/ 底下產生報告 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>report<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>report<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Checkstyle-plugin"><a href="#Checkstyle-plugin" class="headerlink" title="Checkstyle plugin"></a>Checkstyle plugin</h3><p>是 <strong>archetype-quickstart-jdk8</strong> 模板裡面的另一個 plugin, 在 travis 的環境底下會自動執行</p><ul><li>使的的是 <code>com/github/ngeor/checkstyle.xml</code> 的 checkstyle</li><li><p>在 <code>test</code> phase 會做 <code>mvn checkstyle:check</code>, 如果你想要看 html 的話, 可以改成<code>mvn checkstyle:checkstyle</code>, 就會產生 <code>/target/site/checkstyle.html</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>checkstyle<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>checkstyle<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>pom.xml</code> 註解</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>travis<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>env.TRAVIS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 這個 execution 綁定了 test phase, 會執行 checkstyle:check --&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 會在產生報告 /target/checkstyle-result.xml --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>checkstyle<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>check<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 會將報告提交到 coveralls --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- https://docs.coveralls.io/java --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eluder.coveralls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>coveralls-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                &lt;configuration&gt;</span></span><br><span class="line"><span class="comment">                    &lt;repoToken&gt;your-coveralls-project-repository-token&lt;/repoToken&gt;</span></span><br><span class="line"><span class="comment">                &lt;/configuration&gt;</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li><a href="http://jakarta.apache.org/alexandria/legacy/" target="_blank" rel="noopener">Alexandria</a></li><li><a href="https://github.com/ngeor/archetype-quickstart-jdk8" target="_blank" rel="noopener">Archetype-quickstart-jdk8</a></li><li><a href="https://www.baeldung.com/core-maven-plugins" target="_blank" rel="noopener">Baeldung - core-maven-plugins</a></li><li><a href="https://maven.apache.org/plugins/maven-help-plugin/examples/describe-configuration.html" target="_blank" rel="noopener">Describe Plugin</a></li><li><a href="https://maven.apache.org/background/history-of-maven.html" target="_blank" rel="noopener">History-of-maven</a></li><li><a href="https://maven.apache.org/guides/introduction/introduction-to-archetypes.html" target="_blank" rel="noopener">Introduction-to-archetypes</a></li><li><a href="https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html" target="_blank" rel="noopener">Introduction-to-the-lifecycle</a></li><li><a href="http://kentyeh.github.io/mavenStartup/index.html" target="_blank" rel="noopener">Kentyeh Maven 教學</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;People develop abstractions by ge
      
    
    </summary>
    
      <category term="java8" scheme="https://jerry80409.github.io/categories/java8/"/>
    
    
      <category term="java" scheme="https://jerry80409.github.io/tags/java/"/>
    
      <category term="maven" scheme="https://jerry80409.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>git-sync-remote-branch</title>
    <link href="https://jerry80409.github.io/2018/11/28/git-sync-remote-branch/"/>
    <id>https://jerry80409.github.io/2018/11/28/git-sync-remote-branch/</id>
    <published>2018-11-28T06:37:25.000Z</published>
    <updated>2018-11-28T07:04:49.210Z</updated>
    
    <content type="html"><![CDATA[<h3 id="同步-local-branch"><a href="#同步-local-branch" class="headerlink" title="同步 local branch"></a>同步 local branch</h3><p>在團隊開發過程中, 多多少少都會有些意外, 還好這個不是災難性的意外, (笑<br>這個問題是發生在 <code>git pull origin master</code>, <code>pull master</code> 其實會做兩件事 <code>git fetch</code> 跟 <code>git merge</code>, 因為本地還存在 a branch 所以會檢查 remote 的 a branch 做 merge, 但 remote 已經 PR 結束了, 被 merge 到 master 裡面, 按照開發流程 merge 完成的 branch 會被刪除, 所以 remote 的 a branch 沒了, 因此噴了一個警告。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: cannot lock ref &apos;refs/remotes/origin/feature/lambda/dynamoDb&apos;: &apos;refs/remotes/origin/feature/lambda&apos; exists; cannot create &apos;refs/remotes/origin/feature/lambda/dynamoDb&apos;</span><br></pre></td></tr></table></figure></p><p>SourceTree 給我的提示是這樣, 所以就查了一下 <code>prune</code> 的用途<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error: some local refs could not be updated; try running</span><br><span class="line"> &apos;git remote prune origin&apos; to remove any old, conflicting branches</span><br></pre></td></tr></table></figure></p><h3 id="Git-remote-prune"><a href="#Git-remote-prune" class="headerlink" title="Git remote prune"></a>Git remote prune</h3><p>先看一下文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">prune</span><br><span class="line">           Deletes stale references associated with &lt;name&gt;. By default, stale</span><br><span class="line">           remote-tracking branches under &lt;name&gt; are deleted, but depending on</span><br><span class="line">           global configuration and the configuration of the remote we might</span><br><span class="line">           even prune local tags that haven&apos;t been pushed there. Equivalent to</span><br><span class="line">           git fetch --prune &lt;name&gt;, except that no new references will be</span><br><span class="line">           fetched.</span><br><span class="line"></span><br><span class="line">           See the PRUNING section of git-fetch(1) for what it&apos;ll prune</span><br><span class="line">           depending on various configuration.</span><br><span class="line"></span><br><span class="line">           With --dry-run option, report what branches will be pruned, but do</span><br><span class="line">           not actually prune them.</span><br></pre></td></tr></table></figure></p><p>所以我比較建議的做法是, 先跑一次 <code>--dry-run</code> 看看哪些會刪除, 再執行 <code>prune origin</code>, 這樣就能保持 local 跟 remote 的 branch 同步。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote prune --dry-run origin    # 確定一下有沒有可能會刪錯</span><br><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;同步-local-branch&quot;&gt;&lt;a href=&quot;#同步-local-branch&quot; class=&quot;headerlink&quot; title=&quot;同步 local branch&quot;&gt;&lt;/a&gt;同步 local branch&lt;/h3&gt;&lt;p&gt;在團隊開發過程中, 多多少少都會有些
      
    
    </summary>
    
      <category term="git" scheme="https://jerry80409.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://jerry80409.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>修正 git remote 資料夾大小寫問題</title>
    <link href="https://jerry80409.github.io/2018/11/28/git-case-sensitive/"/>
    <id>https://jerry80409.github.io/2018/11/28/git-case-sensitive/</id>
    <published>2018-11-28T06:25:56.000Z</published>
    <updated>2018-11-28T06:35:10.521Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><p>團隊有統一命名原則, 所以得改一下</p><h3 id="core-ignoreCase"><a href="#core-ignoreCase" class="headerlink" title="core.ignoreCase"></a>core.ignoreCase</h3><blockquote><p>If true, this option enables various workarounds to enable Git to work better on filesystems that are not case sensitive, like FAT. For example, if a directory listing finds “makefile” when Git expects “Makefile”, Git will assume it is really the same file, and continue to remember it as “Makefile”.<br>The default is false, except git-clone[1] or git-init[1] will probe and set core.ignoreCase true if appropriate when the repository is created.</p></blockquote><p><code>core.ignoreCase</code> 預設是 <code>false</code> (大小寫敏感), 所以如果沒有改這個 config, <code>push</code> 上去就會長出兩個名稱一樣, 但大小寫寫法不一樣的資料夾, <code>FolderA</code> 跟 <code>foldera</code>, 但我還是不建議把 <code>core.ignoreCase</code> 改為 <code>true</code>, 怕之後開發一團亂之類的。</p><h3 id="手動解"><a href="#手動解" class="headerlink" title="手動解"></a>手動解</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git mv improper_Case improve_case2</span><br><span class="line">git mv improve_case2 improve_case</span><br><span class="line">git commit -m <span class="string">"modified folder cases"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h3&gt;&lt;p&gt;團隊有統一命名原則, 所以得改一下&lt;/p&gt;
&lt;h3 id=&quot;core-ignoreCase&quot;&gt;&lt;a href=&quot;#c
      
    
    </summary>
    
      <category term="git" scheme="https://jerry80409.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://jerry80409.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Git branch 學習</title>
    <link href="https://jerry80409.github.io/2018/11/28/learning-git-branch/"/>
    <id>https://jerry80409.github.io/2018/11/28/learning-git-branch/</id>
    <published>2018-11-28T06:16:24.000Z</published>
    <updated>2018-11-28T06:20:32.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Learngitbranching"><a href="#Learngitbranching" class="headerlink" title="Learngitbranching"></a>Learngitbranching</h3><p>我自己還滿喜歡的一個學習 git branch 的地方<br><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">https://learngitbranching.js.org/</a></p><p><img src="/img/learning-git-branch/learning-git-branch.png" alt="learngitbranching"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Learngitbranching&quot;&gt;&lt;a href=&quot;#Learngitbranching&quot; class=&quot;headerlink&quot; title=&quot;Learngitbranching&quot;&gt;&lt;/a&gt;Learngitbranching&lt;/h3&gt;&lt;p&gt;我自己還滿喜
      
    
    </summary>
    
      <category term="git" scheme="https://jerry80409.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://jerry80409.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Keep changelog</title>
    <link href="https://jerry80409.github.io/2018/11/28/keep-changelog/"/>
    <id>https://jerry80409.github.io/2018/11/28/keep-changelog/</id>
    <published>2018-11-28T06:05:16.000Z</published>
    <updated>2018-11-28T06:15:56.059Z</updated>
    
    <content type="html"><![CDATA[<h3 id="維護-Changelog"><a href="#維護-Changelog" class="headerlink" title="維護 Changelog"></a>維護 Changelog</h3><p>每個團隊的維護策略不一樣, 這篇只是我找來參考用的<br><a href="https://keepachangelog.com/zh-TW/0.3.0/" target="_blank" rel="noopener">https://keepachangelog.com/zh-TW/0.3.0/</a> </p><h3 id="版本號定義"><a href="#版本號定義" class="headerlink" title="版本號定義"></a>版本號定義</h3><ul><li>主版號：當你做了不相容的 API 修改，</li><li>次版號：當你做了向下相容的功能性新增，</li><li>修訂號：當你做了向下相容的問題修正。</li><li>標準的版號「必須 MUST」採用 X.Y.Z 的格式，其中 X、Y 和 Z 為非負的整數，且「禁止 MUST NOT」在數字前方補零。X 是主版號、Y 是次版號、而 Z 為修訂號。每個元素「必須 MUST」以數值來遞增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。</li><li>標記版號的軟體發行後，「禁止 MUST NOT」改變該版本軟體的內容。任何修改都「必須 MUST」以新版本發行。</li><li>版本編譯資訊「可以 MAY」被標注在修訂版或先行版號之後，先加上一個加號再加上一連串以句點分隔的標識符號來修飾。標識符號「必須 MUST」由 ASCII 的英數字和連接號 [0-9A-Za-z-]組成，且「禁止 MUST NOT」留白。當判斷版本的優先層級時，版本編譯資訊「可 SHOULD」被忽略。因此當兩個版本只有在版本編譯資訊有差別時，屬於相同的優先層級。範例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。</li></ul><h3 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h3><ul><li>版版修訂號, 可以用 <code>master</code> 的 head 去做編號</li><li>每個正式 release 的版本號, 都應該下 <code>git tag</code></li><li>考慮把最新版的 changelog 寫在 <code>README.md</code>, 起碼可以知道最近產品的更新狀態</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;維護-Changelog&quot;&gt;&lt;a href=&quot;#維護-Changelog&quot; class=&quot;headerlink&quot; title=&quot;維護 Changelog&quot;&gt;&lt;/a&gt;維護 Changelog&lt;/h3&gt;&lt;p&gt;每個團隊的維護策略不一樣, 這篇只是我找來參考用的&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="misc" scheme="https://jerry80409.github.io/categories/misc/"/>
    
    
  </entry>
  
  <entry>
    <title>Java8 base64</title>
    <link href="https://jerry80409.github.io/2018/11/28/java-base64-snippet/"/>
    <id>https://jerry80409.github.io/2018/11/28/java-base64-snippet/</id>
    <published>2018-11-28T05:45:49.000Z</published>
    <updated>2018-11-28T06:22:06.579Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h3><p>java8 支援 <code>Base64.Decoder</code>, <code>Base64.Encoder</code>, <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Base64.html" target="_blank" rel="noopener">API docs</a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Base64.Decoder decoder = Base64.getDecoder();</span><br><span class="line"><span class="keyword">final</span> Base64.Encoder encoder = Base64.getEncoder();</span><br><span class="line"><span class="keyword">final</span> String text = <span class="string">"字串文字"</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">byte</span>[] textByte = text.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//編碼</span></span><br><span class="line"><span class="keyword">final</span> String encodedText = encoder.encodeToString(textByte);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解碼</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> String(decoder.decode(encodedText), <span class="string">"UTF-8"</span>));</span><br></pre></td></tr></table></figure></p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>text -&gt; ascii -&gt; 取 6bits -&gt; mapping 64 code -&gt; 空白捕 ‘=’<br><a href="base64 wiki : https://zh.wikipedia.org/wiki/Base64">https://zh.wikipedia.org/wiki/Base64</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Base64&quot;&gt;&lt;a href=&quot;#Base64&quot; class=&quot;headerlink&quot; title=&quot;Base64&quot;&gt;&lt;/a&gt;Base64&lt;/h3&gt;&lt;p&gt;java8 支援 &lt;code&gt;Base64.Decoder&lt;/code&gt;, &lt;code&gt;Base64.Enc
      
    
    </summary>
    
      <category term="java8" scheme="https://jerry80409.github.io/categories/java8/"/>
    
    
      <category term="base64" scheme="https://jerry80409.github.io/tags/base64/"/>
    
  </entry>
  
  <entry>
    <title>微框架 owner-boilerplate 介紹</title>
    <link href="https://jerry80409.github.io/2018/11/28/owner-boilerplate/"/>
    <id>https://jerry80409.github.io/2018/11/28/owner-boilerplate/</id>
    <published>2018-11-28T05:08:09.000Z</published>
    <updated>2018-11-28T05:28:06.851Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/owner-boilerplate/owner-aeonbits.png" alt="owner-boilerplate"></p><h3 id="Owner-boilerplate"><a href="#Owner-boilerplate" class="headerlink" title="Owner boilerplate"></a>Owner boilerplate</h3><p><a href="http://owner.aeonbits.org/docs/welcome/" target="_blank" rel="noopener">Owner boilerplate</a> 是我自己還滿喜歡用的一個微框架, 適合維運在 aws lambda 服務, 如果你的專案有複雜的 config propertities, 如: mysql connection info, redis connection info, aws setting, etc. 有的沒的, 後端宅宅通常都要處理一大堆的服務, 就很推薦用這個, 可以幫你把那些設定整理的很乾淨, 還有支援 config 的 <a href="http://owner.aeonbits.org/docs/reload/" target="_blank" rel="noopener">hot reload</a>, 很棒吧!</p><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><p>java8 support<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aeonbits.owner<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>owner-java8<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p><a href="http://owner.aeonbits.org/docs/usage/" target="_blank" rel="noopener">http://owner.aeonbits.org/docs/usage/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/owner-boilerplate/owner-aeonbits.png&quot; alt=&quot;owner-boilerplate&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Owner-boilerplate&quot;&gt;&lt;a href=&quot;#Owner-boilerplate&quot;
      
    
    </summary>
    
      <category term="java8" scheme="https://jerry80409.github.io/categories/java8/"/>
    
    
      <category term="owner-boilerplate" scheme="https://jerry80409.github.io/tags/owner-boilerplate/"/>
    
  </entry>
  
  <entry>
    <title>osx-install-python3</title>
    <link href="https://jerry80409.github.io/2018/11/27/osx-install-python3/"/>
    <id>https://jerry80409.github.io/2018/11/27/osx-install-python3/</id>
    <published>2018-11-27T13:23:24.000Z</published>
    <updated>2018-11-27T13:35:05.433Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h3><p>OSX 自帶 python2, 查了一下, <a href="https://docs.python.org/3/using/mac.html" target="_blank" rel="noopener">官方建議</a> 是說不應該刪,</p><blockquote><p>The Apple-provided build of Python is installed in /System/Library/Frameworks/Python.framework and /usr/bin/python, respectively. You should never modify or delete these<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python --version</span><br><span class="line">Python 2.7.15</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="ptyhon3"><a href="#ptyhon3" class="headerlink" title="ptyhon3"></a>ptyhon3</h3><p>忘記自己在什麼時候安裝好的, 所以 upgrade 就好<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew upgrade python3</span><br></pre></td></tr></table></figure></p><p>upgrade 完成後, 會說明 OSX 的預設 python2.7 的相關環境與設定,<br>而 python3 的相關環境與設定分別是 <code>python3</code>, <code>python3-config</code>, <code>pip3</code>, etc.<br>這些都安裝在 <code>/usr/local/opt/python/libexec/bin</code> ,<br>如果你還想要使用 <strong>**python2.7</strong>, 再自行安裝 <code>brew install python@2</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Updating Homebrew...</span><br><span class="line">==&gt; Upgrading 1 outdated package, with result:</span><br><span class="line">python3 3.6.5 -&gt; 3.7.0</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">Python has been installed as</span><br><span class="line">  /usr/<span class="built_in">local</span>/bin/python3</span><br><span class="line"></span><br><span class="line">Unversioned symlinks `python`, `python-config`, `pip` etc. pointing to</span><br><span class="line">`python3`, `python3-config`, `pip3` etc., respectively, have been installed into</span><br><span class="line">  /usr/<span class="built_in">local</span>/opt/python/libexec/bin</span><br><span class="line"></span><br><span class="line">If you need Homebrew<span class="string">'s Python 2.7 run</span></span><br><span class="line"><span class="string">  brew install python@2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Pip, setuptools, and wheel have been installed. To update them run</span></span><br><span class="line"><span class="string">  pip3 install --upgrade pip setuptools wheel</span></span><br></pre></td></tr></table></figure></p><p>提示還說要升級, pip, setuptools, wheel<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade pip setuptools wheel</span><br></pre></td></tr></table></figure></p><p>這樣一來基本的開發環境已經完成了, 就先照 官方文件 來個互動吧<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python3</span><br><span class="line">Python 3.7.0 (default, Aug 22 2018, 15:22:56) </span><br><span class="line">[Clang 9.0.0 (clang-900.0.39.2)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; the_world_is_flat = True</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">if</span> the_world_is_flat:</span><br><span class="line">...     <span class="built_in">print</span>(<span class="string">"Be careful not to fall off!"</span>)</span><br><span class="line">...</span><br><span class="line">Be careful not to fall off!</span><br></pre></td></tr></table></figure></p><p>先說說第一個雷, 就是 print 之前要 tab (4 個 space) 一下 :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python2&quot;&gt;&lt;a href=&quot;#python2&quot; class=&quot;headerlink&quot; title=&quot;python2&quot;&gt;&lt;/a&gt;python2&lt;/h3&gt;&lt;p&gt;OSX 自帶 python2, 查了一下, &lt;a href=&quot;https://docs.python
      
    
    </summary>
    
      <category term="python" scheme="https://jerry80409.github.io/categories/python/"/>
    
    
      <category term="python3" scheme="https://jerry80409.github.io/tags/python3/"/>
    
  </entry>
  
  <entry>
    <title>spring-batch-fault-tolerant</title>
    <link href="https://jerry80409.github.io/2018/11/27/spring-batch-fault-tolerant/"/>
    <id>https://jerry80409.github.io/2018/11/27/spring-batch-fault-tolerant/</id>
    <published>2018-11-27T07:37:44.000Z</published>
    <updated>2018-11-27T12:22:51.343Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p><strong>spring-batch</strong> 其實是很深的東西, 其中的容錯性 <code>fault-tolerant</code> 是個很棒的設計, 在批次處理中如果因為某些 exception 或是 http timeout exception 發生時, 只要指定好 exception handler, spring-batch 會自動重新運行該失敗的 step, 不需要整個 job 重新來過, 可以節省很多時間跟運算成本。</p><h3 id="Docs"><a href="#Docs" class="headerlink" title="Docs"></a>Docs</h3><ul><li>Spring Batch - <a href="https://docs.spring.io/spring-batch/4.0.x/reference/html/index.html" target="_blank" rel="noopener">Reference Documentation</a></li><li><a href="https://docs.spring.io/spring-batch/4.1.x/reference/html/step.html#stepRestart" target="_blank" rel="noopener">Step Restart</a></li><li><a href="https://www.bookstack.cn/read/SpringBatchReferenceCN/README.md" target="_blank" rel="noopener">Spring Batch参考文档中文版</a></li></ul><h3 id="Configure-Job"><a href="#Configure-Job" class="headerlink" title="Configure Job"></a>Configure Job</h3><p>簡單示範一下, 大小寫轉換的 job。</p><ol><li>這個 job 只會有一個 step</li><li>step 的 reader 操作, 用來讀取字串到 queue 裡面</li><li>step 的 processor 操作, 用來將字串轉為 upper case</li><li>step 的 writer 操作, 將處理完的字串 println 輸出</li></ol><h3 id="ItemReader"><a href="#ItemReader" class="headerlink" title="ItemReader"></a>ItemReader</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleReader</span> <span class="keyword">implements</span> <span class="title">ItemReader</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ConcurrentLinkedQueue&lt;String&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * for spring bean init</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"init simple reader..."</span>);</span><br><span class="line">        queue = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;&gt;();</span><br><span class="line">        queue.addAll(Arrays.asList(</span><br><span class="line">            <span class="string">"message 1"</span>, <span class="string">"message 2"</span>, <span class="string">"message 3"</span>, <span class="string">"message 4"</span>, <span class="string">"message 5"</span>,</span><br><span class="line">            <span class="string">"message 6"</span>, <span class="string">"message 7"</span>, <span class="string">"message 8"</span>, <span class="string">"message 9"</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> Exception, UnexpectedInputException, ParseException, NonTransientResourceException </span>&#123;</span><br><span class="line">        <span class="comment">// 一次輸出一個 message, 直到 queue 為空</span></span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty() ? <span class="keyword">null</span> : queue.poll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ItemProcessor"><a href="#ItemProcessor" class="headerlink" title="ItemProcessor"></a>ItemProcessor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProcessor</span> <span class="keyword">implements</span> <span class="title">ItemProcessor</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">process</span><span class="params">(String msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"message 5"</span>.equals(msg)) &#123;</span><br><span class="line">            <span class="comment">// 簡單示範 message 5, 處理時必定會拋出自定義的 RetryException </span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RetryException(<span class="string">"message 5 was FAILED"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"message 8"</span>.equals(msg)) &#123;</span><br><span class="line">            <span class="comment">// 簡單示範 message 8, 處理時必定會拋出自定義的 RetryException</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RetryException(<span class="string">"message 8 was FAILED"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"processing : &#123;&#125;"</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> msg.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RetryException"><a href="#RetryException" class="headerlink" title="RetryException"></a>RetryException</h3><p>自定義的 RetryException, 當失敗的資料拋到這裡時, 可以做一些簡單的 log 或 notification<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RetryException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        log.warn(<span class="string">"Catch Retry Exception: &#123;&#125;"</span>, message); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ItemWriter"><a href="#ItemWriter" class="headerlink" title="ItemWriter"></a>ItemWriter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleWriter</span> <span class="keyword">implements</span> <span class="title">ItemWriter</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(List&lt;? extends String&gt; msgList)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        msgList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><p>當使用了 <code>.faultTolerant()</code> 必定需要 <code>.retry(RetryException.class)</code> 或 <code>.skip(RetryException.class)</code> 的配合。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableBatchProcessing</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FooJob</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> JobBuilderFactory jobBuilderFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> StepBuilderFactory stepBuilderFactory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleReader <span class="title">simpleReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleReader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleProcessor <span class="title">simpleProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleWriter <span class="title">simpleWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleWriter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Job <span class="title">simpleJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.get(<span class="string">"SIMPLE_JOB"</span>)</span><br><span class="line">            .incrementer(<span class="keyword">new</span> RunIdIncrementer())</span><br><span class="line">            .flow(simpleStep())     <span class="comment">// 在操作設計上, 個人比較喜歡用 flow, 在設計上更方便組合 step</span></span><br><span class="line">            .end()</span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Step <span class="title">simpleStep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.get(<span class="string">"SIMPLE_STEP"</span>)</span><br><span class="line">            .&lt;String, String&gt;chunk(<span class="number">1</span>)</span><br><span class="line">            .reader(simpleReader())</span><br><span class="line">            .processor(simpleProcessor())</span><br><span class="line">            .writer(simpleWriter())</span><br><span class="line">            .faultTolerant()                    <span class="comment">// 開啟容錯設定</span></span><br><span class="line">            .retry(RetryException.class)        <span class="comment">// 當這個 step 某個階段拋出 RetryException</span></span><br><span class="line">            .backOffPolicy(backOfFiveSec())     <span class="comment">// wait 5 sec</span></span><br><span class="line">            .retryLimit(<span class="number">3</span>)                      <span class="comment">// 最多 retry 3 次</span></span><br><span class="line">            .skip(RetryException.class)         <span class="comment">// 當這個 step 某個階段拋出 RetryException 做 skip 處理</span></span><br><span class="line">            .skipLimit(<span class="number">1</span>)                       <span class="comment">// 最多 skip 1 次</span></span><br><span class="line">            .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> FixedBackOffPolicy <span class="title">backOfFiveSec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FixedBackOffPolicy fiveSecBackoff = <span class="keyword">new</span> FixedBackOffPolicy();</span><br><span class="line">        fiveSecBackoff.setBackOffPeriod(<span class="number">5_000</span>);</span><br><span class="line">        fiveSecBackoff.setSleeper(<span class="keyword">new</span> ThreadWaitSleeper());</span><br><span class="line">        <span class="keyword">return</span> fiveSecBackoff;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Scheduling-Launch-Job"><a href="#Scheduling-Launch-Job" class="headerlink" title="Scheduling Launch Job"></a>Scheduling Launch Job</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LaunchJob</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JobLauncher jobLauncher;</span><br><span class="line">    <span class="keyword">private</span> Job job;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"launching foo-job..."</span>);</span><br><span class="line">        <span class="keyword">final</span> JobParameters jobParameters = <span class="keyword">new</span> JobParametersBuilder()</span><br><span class="line">            .addLong(<span class="string">"execution"</span>, System.currentTimeMillis())</span><br><span class="line">            .toJobParameters();</span><br><span class="line">        jobLauncher.run(job, jobParameters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><ol><li>當 message 5 發生錯誤時, 自動 Retry 3 次</li><li>step 收到第 1 次 RetryExcpetion, 做 Skip 處理, 繼續往下執行</li><li>當 message 8 發生錯誤時, 一樣 Retry 3 次</li><li>step 收到第 2 次 RetryExcpetion, 已達到 skip 上限, 視為 step 失敗</li><li>job 失敗</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c.example.batchdemo.config.LaunchJob   : launching foo-job...</span><br><span class="line">o.s.b.a.batch.JpaBatchConfigurer         : JPA does not support custom isolation levels, so locks may not be taken when launching Jobs</span><br><span class="line">o.s.b.c.r.s.JobRepositoryFactoryBean     : No database type set, using meta data indicating: MYSQL</span><br><span class="line">o.s.b.c.l.support.SimpleJobLauncher      : No TaskExecutor has been set, defaulting to synchronous executor.</span><br><span class="line">o.s.b.c.l.support.SimpleJobLauncher      : Job: [FlowJob: [name=SIMPLE_JOB]] launched with the following parameters: [&#123;execution=1533892561146&#125;]</span><br><span class="line">o.s.batch.core.job.SimpleStepHandler     : Executing step: [SIMPLE_STEP]</span><br><span class="line">c.example.batchdemo.job.SimpleReader   : init simple reader...</span><br><span class="line">c.e.batchdemo.job.SimpleProcessor      : processing : message 1</span><br><span class="line">MESSAGE 1</span><br><span class="line">c.e.batchdemo.job.SimpleProcessor      : processing : message 2</span><br><span class="line">MESSAGE 2</span><br><span class="line">c.e.batchdemo.job.SimpleProcessor      : processing : message 3</span><br><span class="line">MESSAGE 3</span><br><span class="line">c.e.batchdemo.job.SimpleProcessor      : processing : message 4</span><br><span class="line">MESSAGE 4</span><br><span class="line">c.e.batchdemo.job.RetryException       : Catch Retry Exception: message 5 was FAILED</span><br><span class="line">c.e.batchdemo.job.RetryException       : Catch Retry Exception: message 5 was FAILED</span><br><span class="line">c.e.batchdemo.job.RetryException       : Catch Retry Exception: message 5 was FAILED</span><br><span class="line">c.e.batchdemo.job.SimpleProcessor      : processing : message 6</span><br><span class="line">MESSAGE 6</span><br><span class="line">c.e.batchdemo.job.SimpleProcessor      : processing : message 7</span><br><span class="line">MESSAGE 7</span><br><span class="line">c.e.batchdemo.job.RetryException       : Catch Retry Exception: message 8 was FAILED</span><br><span class="line">c.e.batchdemo.job.RetryException       : Catch Retry Exception: message 8 was FAILED</span><br><span class="line">c.e.batchdemo.job.RetryException       : Catch Retry Exception: message 8 was FAILED</span><br><span class="line">o.s.batch.core.step.AbstractStep         : Encountered an error executing step SIMPLE_STEP in job SIMPLE_JOB</span><br><span class="line"></span><br><span class="line">org.springframework.batch.core.step.skip.SkipLimitExceededException: Skip limit of &apos;1&apos; exceeded</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;spring-batch&lt;/strong&gt; 其實是很深的東西, 其中的容錯性
      
    
    </summary>
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/categories/spring-boot/"/>
    
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/tags/spring-boot/"/>
    
      <category term="spring-batch" scheme="https://jerry80409.github.io/tags/spring-batch/"/>
    
  </entry>
  
  <entry>
    <title>leet-code-575-distribute-candies</title>
    <link href="https://jerry80409.github.io/2018/11/27/leet-code-575-distribute-candies/"/>
    <id>https://jerry80409.github.io/2018/11/27/leet-code-575-distribute-candies/</id>
    <published>2018-11-27T06:49:18.000Z</published>
    <updated>2018-11-27T07:20:26.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Quests"><a href="#Quests" class="headerlink" title="Quests"></a>Quests</h3><p>Q: <a href="https://leetcode.com/problems/distribute-candies/" target="_blank" rel="noopener">https://leetcode.com/problems/distribute-candies/</a></p><blockquote><p>Given an integer array with even length, where different numbers in this array represent different kinds of candies. Each number means one candy of the corresponding kind. You need to distribute these candies equally in number to brother and sister. Return the maximum number of kinds of candies the sister could gain.</p></blockquote><ul><li>給予 <strong>偶數</strong> 長度的 int 陣列</li><li>一個 int value 代表一種糖果</li><li>需要平均分配糖果給 2 人 （sister, brother）</li><li>回傳 sister 可以拿到最多幾種糖果</li></ul><h3 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h3><ul><li>The length of the given array is in range [2, 10,000], and will be even.</li><li>The number in given array is in range [-100,000, 100,000].</li></ul><h3 id="Cases"><a href="#Cases" class="headerlink" title="Cases"></a>Cases</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: candies = [1,1,2,2,3,3]</span><br><span class="line">output: 3</span><br><span class="line">6 顆糖果, 1 人最多 3 顆, 最大可以拿 3 種 =&gt; 3</span><br><span class="line"></span><br><span class="line">Input: candies = [1,1,2,3]</span><br><span class="line">Output: 2</span><br><span class="line">4 顆糖果, 1 人最多 2 顆, 最大可以拿 2 種 =&gt; 2, [1,2] 或 [1,3] 或 [2,3]</span><br><span class="line"></span><br><span class="line">Input: candies = [1,2,3,4]</span><br><span class="line">Output: 2</span><br><span class="line">4 顆糖果, 1 人最多 2 顆, 最大可以拿 2 種 =&gt; 2, [1,2] 或 [1,3] 或 [1,4] 或 [2,3] ...</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">distributeCandies</span><span class="params">(<span class="keyword">int</span>[] candies)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果只有 2 顆, 一人一顆, 最多一種</span></span><br><span class="line">  <span class="keyword">if</span> (candies.length == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 先算出, 糖果有幾種</span></span><br><span class="line">  HashSet&lt;Integer&gt; candiesType = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  Arrays.stream(candies).boxed().forEach(candiesType::add);</span><br><span class="line">  <span class="keyword">int</span> typeSize = candiesType.size();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 一人, 拿到最多糖果的可能</span></span><br><span class="line">  <span class="keyword">int</span> maxType = candies.length / <span class="number">2</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 最多拿 maxType, 或者 typeSize</span></span><br><span class="line">  <span class="keyword">return</span> typeSize &lt;= maxType ? typeSize : maxType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以優化為<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">distributeCandies</span><span class="params">(<span class="keyword">int</span>[] candies)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 如果只有 2 顆, 一人一顆, 最多一種</span></span><br><span class="line">  <span class="keyword">if</span> (candies.length == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 先算出, 糖果有幾種</span></span><br><span class="line">  HashSet&lt;Integer&gt; candiesType = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  Arrays.stream(candies).boxed().forEach(candiesType::add);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> Math.min(candiesType.size(), candies.length / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Quests&quot;&gt;&lt;a href=&quot;#Quests&quot; class=&quot;headerlink&quot; title=&quot;Quests&quot;&gt;&lt;/a&gt;Quests&lt;/h3&gt;&lt;p&gt;Q: &lt;a href=&quot;https://leetcode.com/problems/distribute-c
      
    
    </summary>
    
      <category term="leetcode" scheme="https://jerry80409.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://jerry80409.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
