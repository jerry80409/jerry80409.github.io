<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PAWS</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jerry80409.github.io/"/>
  <updated>2019-01-23T15:43:07.252Z</updated>
  <id>https://jerry80409.github.io/</id>
  
  <author>
    <name>jerry80409</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dirty Paws</title>
    <link href="https://jerry80409.github.io/2019/01/16/dirty-paws/"/>
    <id>https://jerry80409.github.io/2019/01/16/dirty-paws/</id>
    <published>2019-01-16T03:59:49.000Z</published>
    <updated>2019-01-23T15:43:07.252Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Of-Monsters-and-Men"><a href="#Of-Monsters-and-Men" class="headerlink" title="Of Monsters and Men"></a>Of Monsters and Men</h3><p><a href="https://en.wikipedia.org/wiki/Of_Monsters_and_Men" target="_blank" rel="noopener">Of monster and men</a> 是我最喜歡的樂團, 冰島樂團, 有一陣子我很喜歡 <strong>怪獸</strong>, 朋友就介紹了這個樂團, 直接被命中。 他們大部分的歌詞都很 <strong>寓言故事</strong>, MV 製作也很細心, 像 Dirty paws 用動畫的方式呈現歌詞中的寓意, 感覺就像在看小電影。自己很喜歡裡面的成員 <strong>Ragnar þórhallsson</strong>, 吉他, 聲音也很棒, <strong>Ragnhildur Gunnarsdóttir</strong> 小號超強…, <strong>Nanna Bryndís Hilmarsdóttir</strong> 主唱也很厲害, 總而言之是我近幾年心中排行第一的樂團。  </p><iframe width="640" height="360" src="https://www.youtube.com/embed/ym3AIUvA4ac" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Dirty-Paws"><a href="#Dirty-Paws" class="headerlink" title="Dirty Paws"></a>Dirty Paws</h3><p>聽著這首歌, 就順手把 blog 建置好了, 所以就命名 <strong>PAWS</strong>, 一方面這首也是 <code>The Secret Life of Walter Mitty</code> (白日夢冒險王, 2013) 主題曲之一。</p><iframe width="640" height="360" src="https://www.youtube.com/embed/mCHUw7ACS8o" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h3 id="Lyrics"><a href="#Lyrics" class="headerlink" title="Lyrics"></a>Lyrics</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Songwriters: Arni Gudjonsson / Nanna Bryndis Hilmarsdottir / Ragnar Thorhallsson</span><br><span class="line">Dirty Paws lyrics © Sony/ATV Music Publishing LLC</span><br></pre></td></tr></table></figure><p>Jumping up and down the floor<br>My head is an animal</p><p>And once there was an animal<br>It had a son that mowed the lawn<br>The son was an OK guy<br>They had a pet dragonfly</p><p>The dragonfly it ran away<br>But it came back with a story to say</p><p>Her dirty paws and furry coat<br>She ran down the forest slope</p><p>The forest of talking trees<br>They used to sing about the birds and the bees<br>The bees had declared a war<br>The sky wasn’t big enough for them all<br>The birds, they got help from below<br>From dirty paws and the creatures of snow</p><p>So for a while things were cold<br>They were scared down in their holes<br>The forest that once was green<br>Was colored black by those killing machines<br>But she and her furry friends<br>Took down the queen bee and her men</p><p>And that’s how the story goes<br>The story of the beast with those four dirty paws</p><hr><p>歌詞的意思, 單看字面其實很難掌握,</p><p>第一種解釋, </p><blockquote><p>背景是 <strong>第二次世界大戰</strong>, bees 代表軸心國, Queen Bee(德國), birds 代表法國與英格蘭, dirty paws 代表的是美國與俄羅斯, forest 是歐洲整體, animal 代表在戰爭中人類的野獸天性, 美國之所以代表 dirty paws 是因為經常出現於國際戰爭中, 4 個 dirty paws 分別代表 (Revolutionary, Civil, WWI, WWII ) </p></blockquote><p>但這樣解釋也不太完全啦, 冰島在第二次世界大戰屬於中立國, 沒有直接參與二戰</p><p>第二種解釋,</p><blockquote><p>Dirty paws 是 <strong>My Head Is an Animal</strong> 專輯之首, 整張專輯就是一個故事, 故事的開端是一個人, 被人群責備想殺死的對象; 在第二首 <strong>King And Lionheart</strong> 那個人墜入愛河, 並安定下來; 在第三首 <strong>Mountain Sound</strong> 主角被敵人找到, 只好逃離愛人身邊; 在 <strong>Slow And Steady</strong> 與 <strong>From Finner</strong>, 主角被抓了並且被殺死, 所以在 <strong>Little Talks</strong> 愛情破碎了, 女主角因為他的死亡而瘋狂, 在 <strong>Six Weeks</strong> 找到新的寄託, 在 <strong>Love Love Love</strong> 女主角發現自己意識到自己不是真正的愛他, 只是精神上的寄託,</p></blockquote><p>我也還沒把整張專輯都弄懂, 但看 MV 來解釋的話我是覺得有點牽強 XD,<br>其他解釋也都滿有趣的, 可以讀讀…</p><h3 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h3><ul><li>lyric interpretations - <a href="https://www.lyricinterpretations.com/of-monsters-and-men/dirty-paws" target="_blank" rel="noopener">https://www.lyricinterpretations.com/of-monsters-and-men/dirty-paws</a></li><li>song meanings - <a href="https://songmeanings.com/songs/view/3530822107858883535/" target="_blank" rel="noopener">https://songmeanings.com/songs/view/3530822107858883535/</a></li><li>好邱推薦 - <a href="https://greeninthemorningsun.blogspot.com/2015/07/of-monsters-and-men-beneath-skin.html" target="_blank" rel="noopener">https://greeninthemorningsun.blogspot.com/2015/07/of-monsters-and-men-beneath-skin.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Of-Monsters-and-Men&quot;&gt;&lt;a href=&quot;#Of-Monsters-and-Men&quot; class=&quot;headerlink&quot; title=&quot;Of Monsters and Men&quot;&gt;&lt;/a&gt;Of Monsters and Men&lt;/h3&gt;&lt;p&gt;&lt;a
      
    
    </summary>
    
      <category term="song" scheme="https://jerry80409.github.io/categories/song/"/>
    
    
      <category term="of_monster_and_men" scheme="https://jerry80409.github.io/tags/of-monster-and-men/"/>
    
  </entry>
  
  <entry>
    <title>Inversion Of Control 學習筆記</title>
    <link href="https://jerry80409.github.io/2019/01/11/notting-inversion-of-control/"/>
    <id>https://jerry80409.github.io/2019/01/11/notting-inversion-of-control/</id>
    <published>2019-01-11T05:42:30.000Z</published>
    <updated>2019-01-16T04:01:52.198Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>只是我的閱讀筆記而已, 網路上資料滿多的, 個人比較推薦的是 <strong>Martin Fowler</strong> 這篇, 這篇記錄是我個人的理解, 再加上一些 Spring 的開發經驗描述, 有些地方我覺得還好就沒特別紀錄, 有些則是按照我自己的經驗解釋, 我還很阿菜, 如果有錯誤的地方也歡迎指正與討論 XD</p><p>原文: <a href="https://martinfowler.com/articles/injection.html" target="_blank" rel="noopener">https://martinfowler.com/articles/injection.html</a></p><h3 id="Inversion-Of-Control"><a href="#Inversion-Of-Control" class="headerlink" title="Inversion Of Control"></a>Inversion Of Control</h3><p>Inversion Of Control (反轉控制), 在使用這個名詞之前, 我會先想一下他是用來解決怎樣的問題? <strong>解耦</strong>? 這是一個非常抽象的解釋, 如果只是單純的解耦, 其實會寫 <strong>interface</strong> 都能辦到, 我自己覺得更好的解釋方式應該是這樣 (單純只是我自己的理解):<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">讓 [A Class] 能夠自然的依據使用情境自動使用 [N Class]</span><br></pre></td></tr></table></figure></p><p>在文章中, 用了 <strong>MovieLister</strong> 跟 <strong>MovieFinder</strong> 解釋了許多。<br>最一開始直覺的寫法是直接依賴 <code>MovieLister -&gt; MovieFinder</code>, 但如果 MovieFinder 需要從 SQL、XML、WebService 讀入清單, 那透過 interface 就能解決, 但最終還是必須在 MovieLister 決定哪一種 implement(SQL, XML, WebService)? 為了解決這種不自然的依賴, 所以作者先從 <strong>Dependency Injection</strong> 角度來解釋。</p><h3 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h3><p>Dependency Injection (依賴注入), 這個名詞的主要觀念, 就是把 new instance 的主控權移交給外部, 細說部實作就自己參照 Martin Fowler, 簡單記錄一下而已。</p><h4 id="1-Constructor-Injection"><a href="#1-Constructor-Injection" class="headerlink" title="1. Constructor Injection"></a>1. Constructor Injection</h4><p>簡單來說, 建構 MovieLister 的時候, 就選好要用哪一種 MovieFinder<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 由建構子注入 MovieFinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieLister</span><span class="params">(MovieFinder finder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finder = finder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-Setter-Injection"><a href="#2-Setter-Injection" class="headerlink" title="2. Setter Injection"></a>2. Setter Injection</h4><p>做法其實跟 Constructor Injection 差不多, 優點是在測試的時候更容易替換 MovieFinder 的實作。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> MovieFinder finder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由 setter method 注入 MovieFinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFinder</span><span class="params">(MovieFinder finder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finder = finder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-Interface-Injection"><a href="#3-Interface-Injection" class="headerlink" title="3. Interface Injection"></a>3. Interface Injection</h4><p>算是 Setter Injection 更進階的用法, 透過 interface 規範 instance 一定要實作 setter, 因為是 interface 的關係, 所以相對於 Setter Injection 更有彈性, 更統一, 舉例來說你在 InjectFinder 不但可以 <code>void injectFinder()</code> 還可以 <code>void injectEditor()</code> 之類的, 在測試的時候也比較容易製作 stub.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在 interface 定義 injectFinder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InjectFinder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectFinder</span><span class="params">(MovieFinder finder)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 透過 implement interface 來注入 MovieFinder</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> <span class="keyword">implements</span> <span class="title">InjectFinder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectFinder</span><span class="params">(MovieFinder finder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finder = finder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Service-Locator"><a href="#Service-Locator" class="headerlink" title="Service Locator"></a>Service Locator</h3><p>Service Locator (服務定位), 這個做法有種我認知的容器 (第三者) 的味道, 這種做法不同於 DI (外部注入), 而是透過 ServiceLocator 來封裝, 所以 MovieLister 是依賴 ServiceLocator 來取得 MovieFinder 的實體, 透過 Singleton design pattern 可以快速地實現。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceLocator</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// singleton pattern</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ServiceLocator soleInstance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. Constructor, 容器初始化 (在容器裡註冊 MovieFinder)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceLocator</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 取得 MovieFinder instance</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MovieFinder <span class="title">movieFinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> soleInstance.movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 載入 ServiceLocator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ServiceLocator locator)</span> </span>&#123;</span><br><span class="line">        soleInstance = locator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieFinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Movie&gt; MOVIES = Stream.of(</span><br><span class="line">        <span class="keyword">new</span> Movie(<span class="string">"The Godfather"</span>, <span class="string">"Francis Ford Coppola"</span>),</span><br><span class="line">        <span class="keyword">new</span> Movie(<span class="string">"The Shawshank Redemption"</span>, <span class="string">"Frank Darabont"</span>),</span><br><span class="line">        <span class="keyword">new</span> Movie(<span class="string">"Inception"</span>, <span class="string">"Christopher Nolan"</span>),</span><br><span class="line">        <span class="keyword">new</span> Movie(<span class="string">"Fight Club"</span>, <span class="string">"David Fincher"</span>)</span><br><span class="line">    ).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Movie&gt; <span class="title">findByDirector</span><span class="params">(<span class="keyword">final</span> String director)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MOVIES.stream()</span><br><span class="line">            .filter(movie -&gt; director.equals(movie.getDirector()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 透過 singleton pattern, 直接從 ServiceLocator 取得 MovieFinder instance</span></span><br><span class="line">    <span class="keyword">private</span> MovieFinder finder = ServiceLocator.movieFinder();</span><br><span class="line"></span><br><span class="line">    Movie[] moviesDirectedBy(<span class="keyword">final</span> String director) &#123;</span><br><span class="line">        <span class="keyword">return</span> finder.findByDirector(director).toArray(<span class="keyword">new</span> Movie[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>請注意上面的第 3 個步驟 <code>ServiceLocator.movieFinder()</code>, 如果沒有在某個地方做 <code>configure()</code>, 就會發生 NPE(NullPointerException), 算是 ServiceLocator 的缺點吧, 但基本上大部分的 Framework 都會幫你處理這個 configure 的初始化, 而且如果不是 LazyLoading 的話, 在 configure 階段就能知道初始化成功或失敗。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tester</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServiceLocator.load(</span><br><span class="line">            <span class="keyword">new</span> ServiceLocator(<span class="keyword">new</span> MovieFinder()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        configure();</span><br><span class="line">        MovieLister lister = <span class="keyword">new</span> MovieLister();</span><br><span class="line">        Movie[] movies = lister.moviesDirectedBy(<span class="string">"Francis Ford Coppola"</span>);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">1</span>, movies.length);</span><br><span class="line">        assertEquals(<span class="string">"The Godfather"</span>, movies[<span class="number">0</span>].getTitle());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="1-Segregated-Interface-for-the-Locator"><a href="#1-Segregated-Interface-for-the-Locator" class="headerlink" title="1. Segregated Interface for the Locator"></a>1. Segregated Interface for the Locator</h4><p>作者針對 Service Locator 做了更進一步的設計, 前面的 ServiceLocator 的缺點就是無法單獨使用 MovieFinder, 所以透過 <a href="https://martinfowler.com/bliki/RoleInterface.html" target="_blank" rel="noopener">role interface</a> 來把 MovieFinde 從 ServiceLocator 抽離, 作者的 Sample Code 讓我想了很久, 怎麼想都會是 NPE, 或是 StackOverflow XD</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MovieFinderLocator</span> </span>&#123;</span><br><span class="line">    <span class="function">MovieFinder <span class="title">movieFinder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServiceLocator</span> <span class="keyword">implements</span> <span class="title">MovieFinderLocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ServiceLocator soleInstance;</span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不是很能體會這樣寫法的優勢, 而且容易造成 StackOverflow</span></span><br><span class="line">    <span class="comment">// MovieFinderLocator locator = ServiceLocator.locator();</span></span><br><span class="line">    <span class="comment">// MovieFinder finder = locator.movieFinder();</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2. Constructor, 容器初始化 (在容器裡註冊 MovieFinder)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceLocator</span><span class="params">(MovieFinder movieFinder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 取得 MovieFinder instance</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MovieFinder <span class="title">movieFinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> soleInstance.movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 載入 ServiceLocator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ServiceLocator locator)</span> </span>&#123;</span><br><span class="line">        soleInstance = locator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 對外提供取得 ServiceLocator instance</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ServiceLocator <span class="title">locator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> soleInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 單獨使用 movieFinder, 不太確定是否為作者所提的 Segregated Interface for the Locator ?</span></span><br><span class="line">    <span class="keyword">private</span> MovieFinder finder = ServiceLocator.locator().movieFinder();</span><br><span class="line"></span><br><span class="line">    Movie[] moviesDirectedBy(<span class="keyword">final</span> String director) &#123;</span><br><span class="line">        <span class="keyword">return</span> finder.findByDirector(director).toArray(<span class="keyword">new</span> Movie[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MovieFinder <span class="title">getFinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.finder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// configure</span></span><br><span class="line">    MovieFinder finder = <span class="keyword">new</span> MovieFinder();</span><br><span class="line">    ServiceLocator.load(<span class="keyword">new</span> ServiceLocator(finder));</span><br><span class="line"></span><br><span class="line">    MovieLister lister = <span class="keyword">new</span> MovieLister();</span><br><span class="line">    Movie[] movies = lister.moviesDirectedBy(<span class="string">"Francis Ford Coppola"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 測試 lister 的 finder 是 ServiceLocator 所提供的 finder</span></span><br><span class="line">    assertEquals(lister.getFinder().hashCode(), finder.hashCode());</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">1</span>, movies.length);</span><br><span class="line">    assertEquals(<span class="string">"The Godfather"</span>, movies[<span class="number">0</span>].getTitle());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-A-Dynamic-Service-Locator"><a href="#2-A-Dynamic-Service-Locator" class="headerlink" title="2. A Dynamic Service Locator"></a>2. A Dynamic Service Locator</h4><p>多了 HashMap 來記錄 Servicies, 然後再藉由 <code>loadService()</code>, <code>getService()</code>, 來達到 Dynamic Service Locator, 滿好理解的就沒實作了。</p><h4 id="3-Using-both-a-locator-and-injection-with-Avalon"><a href="#3-Using-both-a-locator-and-injection-with-Avalon" class="headerlink" title="3. Using both a locator and injection with Avalon"></a>3. Using both a locator and injection with Avalon</h4><p>這個做法看起來滿理想, 也滿好理解的, 透過 ServiceManager 來做 ServiceLocator, 再透過 Role Interface 來達到隔離其他不相關的 Servicies, </p><h3 id="作者總結"><a href="#作者總結" class="headerlink" title="作者總結"></a>作者總結</h3><ol><li>DI, ServiceLoactor 會增加閱讀與理解的難度, 不管怎麼解耦合, 最終也只是將依賴對象轉換到另一個單位, 最終取決於這樣的情境是否能夠對開發, 測試上有所優化。</li><li>DI 對開發者比較容易掌握到物件相依狀況, 容易調整擴展; ServiceLocator 相對於 DI 更難理解與閱讀, 在一些比較常用的工具(HttpClient, SQLConnection, Logger), 我自己習慣以 ServiceLocator 的方式去開發, ServiceLocator 會比較適合, 有點像 Spring 的 <strong>Configuration Bean</strong>; 如果只是單純的提供給某些業務使用, 那 DI 的做法會比較合適, 容易調整擴展。</li><li>代碼配置, 文件配置, 寫過 Spring xml 應該都痛過, 代碼配置缺點就是翻 API 理解名詞, 翻到快升天。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h3&gt;&lt;p&gt;只是我的閱讀筆記而已, 網路上資料滿多的, 個人比較推薦的是 &lt;strong&gt;Martin Fowl
      
    
    </summary>
    
      <category term="misc" scheme="https://jerry80409.github.io/categories/misc/"/>
    
    
      <category term="inversion-of-control" scheme="https://jerry80409.github.io/tags/inversion-of-control/"/>
    
  </entry>
  
  <entry>
    <title>leet-code-535-encode-and-decode-tinyurl</title>
    <link href="https://jerry80409.github.io/2019/01/09/leet-code-535-encode-and-decode-tinyurl/"/>
    <id>https://jerry80409.github.io/2019/01/09/leet-code-535-encode-and-decode-tinyurl/</id>
    <published>2019-01-09T11:25:31.000Z</published>
    <updated>2019-01-13T17:39:48.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h3><p><a href="https://leetcode.com/problems/encode-and-decode-tinyurl/" target="_blank" rel="noopener">https://leetcode.com/problems/encode-and-decode-tinyurl/</a><br>題目本身就是要實作短網址, 我覺得這題真的是殺手級的題目, 很多地方可以討論, 且在實作的過程中還不能使用任何的 Digest 技術, Base64, MD5, SHA, 通通都不能用</p><p>Example:<br>Inpute: <a href="https://leetcode.com/problems/design-tinyurl" target="_blank" rel="noopener">https://leetcode.com/problems/design-tinyurl</a><br>tinyurl: <a href="http://tinyurl.com/4e9iAk" target="_blank" rel="noopener">http://tinyurl.com/4e9iAk</a> </p><h3 id="Thought"><a href="#Thought" class="headerlink" title="Thought"></a>Thought</h3><p>先看一下 url 結構吧<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:// host / path1 / path2 ? key1=value2&amp;key2=value2 #anchor</span><br></pre></td></tr></table></figure></p><p>然後 url 允許的字符<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* a ~ z (26)</span><br><span class="line">* A ~ Z (26)</span><br><span class="line">* 0 ~ 9 (10)</span><br><span class="line">* !*&apos;();:@&amp;=+$,/?#[] (保留字, 會被 urlencode 成 % 開頭 + Hex, e.g. %20 表示空白)</span><br></pre></td></tr></table></figure></p><ul><li>解法大概是需要 <code>Map</code> 的結構做 key, value 的查詢, key 存 hash, value 存 original url</li><li>重點就是 key 的設計, 要盡量減少碰撞, 如果是用 <code>Redis</code>, <code>MySQL</code> 之類來設計的話, 可以想一下如何在大量的資料下做 select </li><li>還有試了 Digest, Base64, MD5, SHA 都不能用, XD</li><li>粒度最大的是 host, 如果是資料庫的話, 可以考慮把這個欄位拿來做 Partition</li><li>path 跟 query 粒度比較細, 只要想好這邊的 digest 就可以有效減少碰撞, 但我一點概念都沒有喔 </li></ul><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="直接用-java-HASH-code-其實我試了很多種方法"><a href="#直接用-java-HASH-code-其實我試了很多種方法" class="headerlink" title="* 直接用 java HASH code, (其實我試了很多種方法)"></a>* 直接用 java HASH code, (其實我試了很多種方法)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncodeAndDecodeTinyUrl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String baseUrl = <span class="string">"http://tinyurl.com/"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; HASH_MAP = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Encodes a URL to a shortened URL.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> longUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(String longUrl)</span> </span>&#123;</span><br><span class="line">        HASH_MAP.put(String.format(<span class="string">"%h"</span>, longUrl), longUrl);</span><br><span class="line">        <span class="keyword">return</span> baseUrl + String.format(<span class="string">"%h"</span>, longUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decodes a shortened URL to its original URL.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> shortUrl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decode</span><span class="params">(String shortUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HASH_MAP.get(shortUrl.replace(baseUrl, <span class="string">""</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Base62-Redis-解法"><a href="#Base62-Redis-解法" class="headerlink" title="* Base62 + Redis 解法"></a>* Base62 + Redis 解法</h4><p><a href="https://hackernoon.com/url-shortening-service-in-java-spring-boot-and-redis-d2a0f8848a1d?fbclid=IwAR3kklW3xtlHS4FcJ6MZDkvtoZu-ord2KXKN-TUQWdPAJ4L0vED7sJweegU" target="_blank" rel="noopener">https://hackernoon.com/url-shortening-service-in-java-spring-boot-and-redis-d2a0f8848a1d?fbclid=IwAR3kklW3xtlHS4FcJ6MZDkvtoZu-ord2KXKN-TUQWdPAJ4L0vED7sJweegU</a></p><p>這篇文章裡面的解法, 是透過 Redis 做類似 Map 的事情,</p><ol><li>先用 [id, original] 的方式建立字典</li><li>再拿 <code>id / 62</code> 取得 <strong>商數</strong> , <strong>餘數</strong> 去算出對應的 <strong>Base62</strong> 的 tinyUrl</li><li>一樣透過上面的算法, 反推 id, 再從 Redis 取得 original url</li></ol><p>缺點就是會遇到 id 數量上限的瓶頸, 我自己稍微想了一下, 我大概會把 host 資訊存到 main table, 雖然還是有機會遇到 id 上限的問題, 但會比較低一點, 然後 path 做 digest 存 secnod table, 後續的 query + anchor 做第二次 digest 存 third table. 這樣效能會比較差一點, 但碰撞機會應該會比較低 (還沒深入研究碰撞計算 XD)</p><p>大概會是這樣的做法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">output: http://tinyurl.com/host(id)/path(digest)/query+anchor(digest)</span><br><span class="line">Example: http://tinyurl.com/1/abcde/abcde</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Puzzle&quot;&gt;&lt;a href=&quot;#Puzzle&quot; class=&quot;headerlink&quot; title=&quot;Puzzle&quot;&gt;&lt;/a&gt;Puzzle&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/encode-and-deco
      
    
    </summary>
    
      <category term="misc" scheme="https://jerry80409.github.io/categories/misc/"/>
    
    
      <category term="leetcode" scheme="https://jerry80409.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leet-code-929-unique-email-addresses</title>
    <link href="https://jerry80409.github.io/2019/01/09/leet-code-929-unique-email-addresses/"/>
    <id>https://jerry80409.github.io/2019/01/09/leet-code-929-unique-email-addresses/</id>
    <published>2019-01-08T17:27:24.000Z</published>
    <updated>2019-01-08T17:50:03.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h3><p><a href="https://leetcode.com/problems/unique-email-addresses/" target="_blank" rel="noopener">https://leetcode.com/problems/unique-email-addresses/</a><br>輸入一組 emails array, 請依據 host 跟 domain 做 unique 處理,</p><ol><li>host 名稱一樣, domain 名稱不一樣, 視為不同的 email</li><li>host 若有包含 “.”, 則可以視為 “”</li><li>host 若有包含 “+”, 則忽略後續的字串</li></ol><p>在解這題的時候, 我的想法其實很簡單, 就只是單純的資料粒度判斷,<br><code>domain</code> 的粒度最粗, 優先分類處理, <code>host</code> 其次</p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String[] emails = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">        <span class="string">"test.email+alex@leetcode.com"</span>,</span><br><span class="line">        <span class="string">"test.e.mail+bob.cathy@leetcode.com"</span>,</span><br><span class="line">        <span class="string">"testemail+david@lee.tcode.com"</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> act = uniqueEmail.numUniqueEmails(emails);</span><br><span class="line">    assertEquals(<span class="number">2</span>, act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>很直覺的用 lambda 就解出來了, 但效能很差, 約 200ms XD</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numUniqueEmails</span><span class="params">(String[] emails)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) Arrays.stream(emails)</span><br><span class="line">        .collect(Collectors.groupingBy(e -&gt; e.split(<span class="string">"@"</span>)[<span class="number">1</span>]))</span><br><span class="line">        .entrySet()</span><br><span class="line">        .stream()</span><br><span class="line">        .map(groupMails -&gt; groupMails.getValue().stream()</span><br><span class="line">            .map(local -&gt; local.replace(<span class="string">"."</span>, <span class="string">""</span>))</span><br><span class="line">            .map(local -&gt; local.split(<span class="string">"\\+"</span>)[<span class="number">0</span>])</span><br><span class="line">            .distinct()</span><br><span class="line">            .count())</span><br><span class="line">        .count();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>要好一點的, 還是用 foreach 吧, 約 63ms XD<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">numUniqueEmails</span><span class="params">(String[] emails)</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; result = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String email: emails) &#123;</span><br><span class="line">        String[] split = email.split(<span class="string">"@"</span>);</span><br><span class="line">        String host = split[<span class="number">0</span>];</span><br><span class="line">        String domain = split[<span class="number">1</span>];</span><br><span class="line">        String newHost = host.replace(<span class="string">"."</span>, <span class="string">""</span>).split(<span class="string">"\\+"</span>)[<span class="number">0</span>];</span><br><span class="line">        result.add(domain + <span class="string">"@"</span> + newHost);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Puzzle&quot;&gt;&lt;a href=&quot;#Puzzle&quot; class=&quot;headerlink&quot; title=&quot;Puzzle&quot;&gt;&lt;/a&gt;Puzzle&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/unique-email-ad
      
    
    </summary>
    
      <category term="misc" scheme="https://jerry80409.github.io/categories/misc/"/>
    
    
      <category term="leetcode" scheme="https://jerry80409.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Dialogflow, Actions on google 學習筆記</title>
    <link href="https://jerry80409.github.io/2018/12/28/dialogflow-with-actions-on-google/"/>
    <id>https://jerry80409.github.io/2018/12/28/dialogflow-with-actions-on-google/</id>
    <published>2018-12-28T02:22:37.000Z</published>
    <updated>2018-12-28T15:24:28.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="qwiklabs"><a href="#qwiklabs" class="headerlink" title="qwiklabs"></a>qwiklabs</h3><p><a href="https://google.qwiklabs.com/home" target="_blank" rel="noopener">qwiklabs</a> 是一個的 GCP 學習沙盒(sandbox), 讓你可以快樂的在裡面玩沙, 而不用搞壞公司的 GCP 環境還被扣費用, 每個 labs 教程結束後, 會頒發一個 badge 給你, 還滿有成就的, 上完一系列的 labs 還可以參加考試領證書, 有點貴就是了… AWS 也有 qwiklabs, 服務一樣就不介紹了。<br>從 catalog 裡面還可以篩選一些 <a href="https://google.qwiklabs.com/catalog?keywords=&amp;format%5B%5D=any&amp;level%5B%5D=any&amp;duration%5B%5D=any&amp;price%5B%5D=free&amp;modality%5B%5D=any&amp;language%5B%5D=any" target="_blank" rel="noopener">free labs</a>, 我的 GCP 之路大概就是這樣起手…<br>寫這篇文章的主要 <a href="https://google.qwiklabs.com/focuses/2196?catalog_rank=%7B%22rank%22%3A1%2C%22num_filters%22%3A1%2C%22has_search%22%3Atrue%7D&amp;parent=catalog&amp;search_id=1782895" target="_blank" rel="noopener">課程</a></p><h3 id="Dialogflow"><a href="#Dialogflow" class="headerlink" title="Dialogflow"></a>Dialogflow</h3><p>對後端工程師來說 API 就是我們的 UI, 不用刻任何介面就可以把服務應用到 chat-bot 上去是很爽的一件事, 如果要更友善更開放就需要 NLP 的支援, 但是架設 NLP service 又是大工程, 要架設 NLP, 餵字庫, 算權重, etc., 聽同事介紹說 DialogFlow 在處理中文的 intent, session 很強大, 就順便在 qwiklabs 上用看看, 幾個概念了解一下就好,</p><ul><li>Action: an interaction built for Google Assistant that performs specific tasks based on user input.</li><li>Intent: the goal of the Action (e.g. generate quotes). An intent takes user input and channels it to trigger an event.</li><li>Agent (Dialogflow): a module that uses NLU and ML to transform user input into actionable data to be used by an Assistant application.</li></ul><h3 id="Actions-on-google"><a href="#Actions-on-google" class="headerlink" title="Actions on google"></a>Actions on google</h3><p>主要是用來整合 Google 相關產品 (Dialogflow, etc.) 與 Google Assistant 與 Google Search 的平台, 用了就知道, 幾個概念了解一下就好</p><ul><li>Intent: A goal or task that users want to do, such as ordering coffee or finding a piece of music. In Actions on Google, this is represented as a unique identifier and the corresponding user utterances that can trigger the intent.</li><li>Action: An interaction you build for the Assistant that supports a specific intent and has a corresponding fulfillment that processes the intent.</li><li>Fulfillment: A service, app, feed, conversation, or other logic that handles an intent and carries out the corresponding Action.</li></ul><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><ol><li>需要有一個 GCP project-id</li><li><strong>Actions on google</strong> import GCP project-id</li><li><strong>Actions on google</strong> 的 project 裡面建立 actions, 會自動導向到 dialogflow 的 <code>Create Agent</code></li><li>建立好 Agent 後, 就建立 <code>intents</code>, 預設有 <code>Default Fallback Intent</code> 跟 <code>Welcome Intent</code></li><li>選擇 Fallback Intent, 裡面有 <code>Training phrases</code>, 訓練一些慣用語, Agent 會自己訓練跟學習</li><li>一樣在 Fallback Intent 階段, 把對應的 <code>Response</code> 設定上去</li><li>Save <code>Intents</code></li><li>打開 <code>Activity Controls</code> 的權限, 讓 google 蒐集你的相關資料做訓練參考用吧, 我猜</li><li><strong>Actions on google</strong> 做 Simulator 模擬測試</li></ol><h3 id="Fallback-Intents"><a href="#Fallback-Intents" class="headerlink" title="Fallback Intents"></a>Fallback Intents</h3><p>Fallback Intent 就是當 Agent 無法辨識使用者的 intent 的時候, 有預設了一些 Response, 用來作 Fallback 策略的<br><img src="/img/dialogflow-with-actions-on-google/fallback-intent.png" alt="fallback intent"></p><h3 id="Simulator"><a href="#Simulator" class="headerlink" title="Simulator"></a>Simulator</h3><p>Simulator 可以模擬使用者的 input(語音, 文字, etc.), 小小的測試一下, 輸入 shakespeare 就沒反應了<br><img src="/img/dialogflow-with-actions-on-google/simulator.png" alt="actions on google simulator"></p><h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><p>課程只有 30min, 沒機會用的很深, 但比起自己整合 NLP, NLU, 餵詞, 算權重, 訓練資料, etc. 已經省很多工了, 有興趣的可以參考 <a href="https://www.appcoda.com.tw/chatbot-dialogflow-ios/" target="_blank" rel="noopener">這篇</a> 有比較多的介紹。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;qwiklabs&quot;&gt;&lt;a href=&quot;#qwiklabs&quot; class=&quot;headerlink&quot; title=&quot;qwiklabs&quot;&gt;&lt;/a&gt;qwiklabs&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://google.qwiklabs.com/home&quot; tar
      
    
    </summary>
    
      <category term="dev_ops" scheme="https://jerry80409.github.io/categories/dev-ops/"/>
    
    
      <category term="gcp" scheme="https://jerry80409.github.io/tags/gcp/"/>
    
      <category term="dialogflow" scheme="https://jerry80409.github.io/tags/dialogflow/"/>
    
      <category term="actions_on_google" scheme="https://jerry80409.github.io/tags/actions-on-google/"/>
    
  </entry>
  
  <entry>
    <title>leet-code-807-max-increase-to-keep-city-skyline</title>
    <link href="https://jerry80409.github.io/2018/12/27/leet-code-807-max-increase-to-keep-city-skyline/"/>
    <id>https://jerry80409.github.io/2018/12/27/leet-code-807-max-increase-to-keep-city-skyline/</id>
    <published>2018-12-27T12:08:59.000Z</published>
    <updated>2018-12-27T14:52:31.697Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h3><p><a href="https://leetcode.com/problems/max-increase-to-keep-city-skyline/" target="_blank" rel="noopener">https://leetcode.com/problems/max-increase-to-keep-city-skyline/</a><br>給一個 2 dim 矩陣, 試調整矩陣, 讓每個行列元素皆不能大於最大的元素, 將計算所得的 2 dim 矩陣元素做加總。</p><p>Example:<br>Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]<br>Output: 35</p><p>Explanation: The grid is:<br>[ [3, 0, 8, 4],<br>  [2, 4, 5, 7],<br>  [9, 2, 6, 3],<br>  [0, 3, 1, 0] ]</p><p>圖解大概是這樣, 最後做矩陣相減, 求 sum<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    9, 4, 8, 7</span><br><span class="line">   ------------ </span><br><span class="line">8 | 3, 0, 8, 4</span><br><span class="line">7 | 2, 4, 5, 7</span><br><span class="line">9 | 9, 2, 6, 3</span><br><span class="line">3 | 0, 3, 1, 0</span><br><span class="line">    </span><br><span class="line">    8, 4, 8, 7</span><br><span class="line">    7, 4, 7, 7</span><br><span class="line">    9, 4, 8, 7</span><br><span class="line">    3, 3, 3, 3</span><br><span class="line">    </span><br><span class="line">    5, 4, 0, 3</span><br><span class="line">    5, 0, 2, 0 </span><br><span class="line">    0, 2, 2, 4</span><br><span class="line">    3, 0, 2, 3</span><br></pre></td></tr></table></figure></p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><p>先縮小矩陣做思考, 先從 2*2 開始… 然後我還是卡超久 Orz,<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    3, 4</span><br><span class="line">  - - - -</span><br><span class="line">3 | 3, 0 </span><br><span class="line">4 | 2, 4 </span><br><span class="line"></span><br><span class="line">    3, 3</span><br><span class="line">    3, 4</span><br><span class="line">  </span><br><span class="line">    0, 3</span><br><span class="line">    1, 0</span><br><span class="line"></span><br><span class="line">    4</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] grid = <span class="keyword">new</span> <span class="keyword">int</span>[][] &#123;</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">4</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> act = skyline.maxIncreaseKeepingSkyline(grid);</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">4</span>, act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[][] grid = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>&#125;,</span><br><span class="line">        &#123;<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span> act = skyline.maxIncreaseKeepingSkyline(grid);</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">35</span>, act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxIncreaseKeepingSkyline</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] rowMax = <span class="keyword">new</span> <span class="keyword">int</span>[grid.length];</span><br><span class="line">    <span class="keyword">int</span>[] colMax = <span class="keyword">new</span> <span class="keyword">int</span>[grid[<span class="number">0</span>].length];</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先掃過一次 Matrix, 取得 rowMax, colMax </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; grid[i].length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] &gt; rowMax[i]) &#123;</span><br><span class="line">                rowMax[i] = grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] &gt; colMax[j]) &#123;</span><br><span class="line">                colMax[j] = grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取得可以蓋的最高高度, 做加總 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rowMax.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; colMax.length; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> increment = Math.min(rowMax[i], colMax[j]) - grid[i][j];</span><br><span class="line">            sum += increment;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>明明解法差不多, 但語法效能就是比別人差 XD</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Puzzle&quot;&gt;&lt;a href=&quot;#Puzzle&quot; class=&quot;headerlink&quot; title=&quot;Puzzle&quot;&gt;&lt;/a&gt;Puzzle&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/max-increase-to
      
    
    </summary>
    
      <category term="misc" scheme="https://jerry80409.github.io/categories/misc/"/>
    
    
      <category term="leetcode" scheme="https://jerry80409.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Docker 建立 Spring boot</title>
    <link href="https://jerry80409.github.io/2018/12/27/spring-boot-with-docker/"/>
    <id>https://jerry80409.github.io/2018/12/27/spring-boot-with-docker/</id>
    <published>2018-12-27T07:15:59.000Z</published>
    <updated>2018-12-27T08:58:00.396Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>Spring boot 官方教學有一份文件就有介紹 <a href="https://spring.io/guides/gs/spring-boot-docker/" target="_blank" rel="noopener">Spring boot with docker</a>, 裡面用的 <a href="https://github.com/spotify/dockerfile-maven" target="_blank" rel="noopener">Maven plugin</a> 來維護 <code>Dockerfile</code>, <code>DockerHub</code>。我的做法比較陽春, 單純地透過 Dockerfile 來掛載 maven 打包好的 jar, 這個做法只是單純的想熟悉 Docker build 的流程而已。</p><h3 id="Init-Spring-boot"><a href="#Init-Spring-boot" class="headerlink" title="Init Spring boot"></a>Init Spring boot</h3><p><a href="https://start.spring.io/" target="_blank" rel="noopener">SpringBoot initializr</a>, 用了 <code>thymeleaf</code>, <code>web</code> dependencies.<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Bootstrap-Admin"><a href="#Bootstrap-Admin" class="headerlink" title="Bootstrap Admin"></a>Bootstrap Admin</h3><p>為了炫砲一點, 我用了 <a href="https://startbootstrap.com/template-overviews/sb-admin-2/" target="_blank" rel="noopener">Bootstrap Admin theme</a>, 直接 clone 下來, 把資源丟到 <code>/src/main/resources/static/</code> 底下 XD.<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 這個 theme 依賴 gulp 工具</span></span><br><span class="line">npm install --save-dev gulp@4.0.0</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 運行專案看ㄧ下畫面</span></span><br><span class="line">mvn spring-boot:run</span><br></pre></td></tr></table></figure></p><p><img src="/img/spring-boot-with-docker/bootstrap-admin-2.png" alt="bootstrap-admin-2"></p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>因為 Oracle 調整了 java 的授權, 所以 Docker 官方無法提供 <code>Oracle-Java</code> image 讓你 build, 可以改用 open-jdk 系列, 或者可以考慮用這個 <a href="https://hub.docker.com/r/cogniteev/oracle-java/" target="_blank" rel="noopener">https://hub.docker.com/r/cogniteev/oracle-java/</a>, 只是他的 OS 是 Ubuntu 比較肥一點。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># FROM: 指定 base image (https://hub.docker.com/r/cogniteev/oracle-java/)</span><br><span class="line">FROM cogniteev/oracle-java</span><br><span class="line"></span><br><span class="line"># 打開 container 8080 port</span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line"># 版本管理, 接收 docker build --build-arg 指定的參數</span><br><span class="line">ARG APP_VERSION</span><br><span class="line"></span><br><span class="line"># 複製編譯後的 jar , 到容器裡面</span><br><span class="line">COPY target/$&#123;APP_VERSION&#125; /opt/app/app.jar</span><br><span class="line"></span><br><span class="line"># WORKDIR: 指定 docker 執行起來時候的預設目錄位置</span><br><span class="line">WORKDIR /opt/app</span><br><span class="line"></span><br><span class="line"># 指定容器啟動後執行的命令，並且不會被 docker run 提供的參數覆蓋。</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;app.jar&quot;]</span><br></pre></td></tr></table></figure></p><h3 id="Building-the-docker-image"><a href="#Building-the-docker-image" class="headerlink" title="Building the docker image"></a>Building the docker image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># clean and package the jar file</span></span><br><span class="line">mvn clean package</span><br><span class="line"></span><br><span class="line"><span class="comment"># build docker image</span></span><br><span class="line">docker build \</span><br><span class="line">  --build-arg APP_VERSION=spring-thymeleaf-docker-0.0.1-SNAPSHOT.jar \    <span class="comment"># pass APP_VERSION arg for build</span></span><br><span class="line">  --tag jerry80409/spring-thymeleaf-docker:0.0.1 .    <span class="comment"># give a tag for this image</span></span><br></pre></td></tr></table></figure><h3 id="Running-image"><a href="#Running-image" class="headerlink" title="Running image"></a>Running image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \                                 <span class="comment"># background running</span></span><br><span class="line">    --name spring-thymeleaf-docker \</span><br><span class="line">    --publish 8080:8080 \                       <span class="comment"># 指定 local 與 container port 的對應</span></span><br><span class="line">    jerry80409/spring-thymeleaf-docker:0.0.1    <span class="comment"># 指定運行的 image 與 image 版本</span></span><br></pre></td></tr></table></figure><p>確認一下執行狀況, 再打開 localhost:8080 確認<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># list docker process</span></span><br><span class="line">CONTAINER ID        IMAGE                                      COMMAND               CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">68542645c037        jerry80409/spring-thymeleaf-docker:0.0.1   <span class="string">"java -jar app.jar"</span>   4 seconds ago       Up 3 seconds        0.0.0.0:8080-&gt;8080/tcp   spring-thymeleaf-docker</span><br></pre></td></tr></table></figure></p><h3 id="Remove-container-and-image"><a href="#Remove-container-and-image" class="headerlink" title="Remove container and image"></a>Remove container and image</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kill docker process by name</span></span><br><span class="line">docker <span class="built_in">kill</span> spring-thymeleaf-docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove container</span></span><br><span class="line">docker rm spring-thymeleaf-docker                    </span><br><span class="line"></span><br><span class="line"><span class="comment"># remove images</span></span><br><span class="line">docker rmi jerry80409/spring-thymeleaf-docker:0.0.1</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li>Docker CLI docs - <a href="https://docs.docker.com/engine/reference/commandline" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline</a></li><li>Dockerfile maven plugin - <a href="https://github.com/spotify/dockerfile-maven" target="_blank" rel="noopener">https://github.com/spotify/dockerfile-maven</a></li><li>Spring boot with docker - <a href="https://spring.io/guides/gs/spring-boot-docker/" target="_blank" rel="noopener">https://spring.io/guides/gs/spring-boot-docker/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h3&gt;&lt;p&gt;Spring boot 官方教學有一份文件就有介紹 &lt;a href=&quot;https://spr
      
    
    </summary>
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/categories/spring-boot/"/>
    
    
      <category term="spring-boot" scheme="https://jerry80409.github.io/tags/spring-boot/"/>
    
      <category term="docker" scheme="https://jerry80409.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>leet-code-938-range-sum-of-bst</title>
    <link href="https://jerry80409.github.io/2018/12/26/leet-code-938-range-sum-of-bst/"/>
    <id>https://jerry80409.github.io/2018/12/26/leet-code-938-range-sum-of-bst/</id>
    <published>2018-12-26T07:50:33.000Z</published>
    <updated>2018-12-26T10:21:32.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pazzle"><a href="#Pazzle" class="headerlink" title="Pazzle"></a>Pazzle</h3><p>Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).</p><p>The binary search tree is guaranteed to have unique values.</p><p>Example:<br>Input: root = [10,5,15,3,7,null,18], L = 7, R = 15<br>Output: 32</p><p>Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10<br>Output: 23</p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><p>花了一點時間, 才看懂 L, R 的用意, 一直以為是左葉, 右葉, 我在想啥 XD.<br>若單純用陣列看, L(7), R(5) 就是天花板跟地板,<br>只要取出陣列中 <code>5 &lt;= n &lt;=7</code> 的元素就好了,<br>但題目限定要用 <code>TreeNode</code>, 一樣先搞定 test 再解題,<br>先用測試把問題簡單化…</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * input: root = [10,5,15,3,7,null,18], L = 7, R = 15</span></span><br><span class="line"><span class="comment"> * expect: 23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// leafs</span></span><br><span class="line">    RangeSumBst.TreeNode node3 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">3</span>);</span><br><span class="line">    RangeSumBst.TreeNode node7 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">7</span>);</span><br><span class="line">    RangeSumBst.TreeNode node18 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// level_2</span></span><br><span class="line">    RangeSumBst.TreeNode node5 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">5</span>, node3, node7);</span><br><span class="line">    RangeSumBst.TreeNode node15 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">15</span>, <span class="keyword">null</span>, node18);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// level_1</span></span><br><span class="line">    RangeSumBst.TreeNode root = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">10</span>, node5, node15);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> act = bst.rangeSumBST(root, l, r);</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">32</span>, act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * input: root = [5, 3, 7], L = 7, R = 15</span></span><br><span class="line"><span class="comment"> * expect: 23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// leafs</span></span><br><span class="line">    RangeSumBst.TreeNode node3 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">3</span>);</span><br><span class="line">    RangeSumBst.TreeNode node7 = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// level_1</span></span><br><span class="line">    RangeSumBst.TreeNode root = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">5</span>, node3, node7);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> act = bst.rangeSumBST(root, l, r);</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">7</span>, act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * input: root = [3, null, null], L = 7, R = 15</span></span><br><span class="line"><span class="comment"> * expect: 23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// level_1</span></span><br><span class="line">    RangeSumBst.TreeNode root = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">3</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> act = bst.rangeSumBST(root, l, r);</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">0</span>, act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * input: root = [7, null, null], L = 7, R = 15</span></span><br><span class="line"><span class="comment"> * expect: 23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// level_1</span></span><br><span class="line">    RangeSumBst.TreeNode root = <span class="keyword">new</span> RangeSumBst.TreeNode(<span class="number">7</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">int</span> act = bst.rangeSumBST(root, l, r);</span><br><span class="line"></span><br><span class="line">    assertEquals(<span class="number">7</span>, act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>解題的思路大概就是 binary-tree 走訪, node 大於 L 小於 R 就加總,<br>binary-tree 特性是, left tree 任何 node 遠永小於 root, right tree 任何 node 永遠大於 root;<br>這邊寫得比較清楚, 有複習有保庇 - <a href="http://www.csie.ntnu.edu.tw/~u91029/BinaryTree.html" target="_blank" rel="noopener">http://www.csie.ntnu.edu.tw/~u91029/BinaryTree.html</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rangeSumBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(root)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val &lt; l) &#123;</span><br><span class="line">        <span class="keyword">return</span> rangeSumBST(root.right, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.val &gt; r) &#123;</span><br><span class="line">        <span class="keyword">return</span> rangeSumBST(root.left, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root.val + rangeSumBST(root.left, l, r) + rangeSumBST(root.right, l, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Pazzle&quot;&gt;&lt;a href=&quot;#Pazzle&quot; class=&quot;headerlink&quot; title=&quot;Pazzle&quot;&gt;&lt;/a&gt;Pazzle&lt;/h3&gt;&lt;p&gt;Given the root node of a binary search tree, return th
      
    
    </summary>
    
      <category term="leetcode" scheme="https://jerry80409.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://jerry80409.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>codesignal-almost-increasing-sequence</title>
    <link href="https://jerry80409.github.io/2018/12/26/codesignal-almost-increasing-sequence/"/>
    <id>https://jerry80409.github.io/2018/12/26/codesignal-almost-increasing-sequence/</id>
    <published>2018-12-26T03:41:07.000Z</published>
    <updated>2018-12-27T12:31:33.065Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Pazzle"><a href="#Pazzle" class="headerlink" title="Pazzle"></a>Pazzle</h3><p>Given a sequence of integers as an array, determine whether it is possible to obtain a strictly increasing sequence by removing no more than one element from the array.</p><p>Example:<br>For sequence = [1, 3, 2, 1], the output should be<br>almostIncreasingSequence(sequence) = false.</p><p>For sequence = [1, 3, 2], the output should be<br>almostIncreasingSequence(sequence) = true</p><p>Ref - <a href="https://app.codesignal.com/arcade/intro/level-2/2mxbGwLzvkTCKAJMG" target="_blank" rel="noopener">https://app.codesignal.com/arcade/intro/level-2/2mxbGwLzvkTCKAJMG</a></p><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> act = almostIncreasingSequence(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;);</span><br><span class="line">    assertFalse(act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> act = almostIncreasingSequence(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    assertTrue(act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> act = almostIncreasingSequence(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">    assertTrue(act);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> act = almostIncreasingSequence(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>&#125;);</span><br><span class="line">    assertFalse(act);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test_case_5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> act = almostIncreasingSequence(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    assertTrue(act);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>一開始的想法直覺是想到排序後做比較, diff &gt; 2 以上 return false, 但不太對,<br>像 <code>[10, 1, 2, 3, 4, 5]</code> 排序後, diff 絕對大於 2, 且也是屬於 almost incrasing seq,<br>最後回歸基本迴圈 foreach 比較<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">almostIncreasingSequence</span><span class="params">(<span class="keyword">int</span>[] seq)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> countNoSeq = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// compare with next element </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seq.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (seq[i] &gt;= seq[i + <span class="number">1</span>]) &#123;</span><br><span class="line">            countNoSeq++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// compare with after next element, because removed an element</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seq.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (seq[i] &gt;= seq[i + <span class="number">2</span>]) &#123;</span><br><span class="line">            countNoSeq++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (countNoSeq &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Pazzle&quot;&gt;&lt;a href=&quot;#Pazzle&quot; class=&quot;headerlink&quot; title=&quot;Pazzle&quot;&gt;&lt;/a&gt;Pazzle&lt;/h3&gt;&lt;p&gt;Given a sequence of integers as an array, determine wh
      
    
    </summary>
    
      <category term="misc" scheme="https://jerry80409.github.io/categories/misc/"/>
    
    
      <category term="codesignal" scheme="https://jerry80409.github.io/tags/codesignal/"/>
    
  </entry>
  
  <entry>
    <title>Java split empty strings</title>
    <link href="https://jerry80409.github.io/2018/12/24/java-split-empty-strings/"/>
    <id>https://jerry80409.github.io/2018/12/24/java-split-empty-strings/</id>
    <published>2018-12-24T11:05:23.000Z</published>
    <updated>2018-12-24T11:31:49.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><p>在 code review 的時候發現一個有趣的狀況, 預期 <code>.split(&quot;,&quot;)</code> 處理完結果應該是 5, 然而實際上卻是 3<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"a,b,c,,"</span>;</span><br><span class="line">String[] ary = str.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// result 3</span></span><br><span class="line">System.out.println(ary.length);</span><br></pre></td></tr></table></figure></p><h3 id="改用-split-regex-limit"><a href="#改用-split-regex-limit" class="headerlink" title="改用 split(regex, limit)"></a>改用 split(regex, limit)</h3><ul><li>如果 limit &gt; 0, 最終處理的 array 長度不會大於 limit, regex express 匹配的次數最多為 n - 1 次,</li><li>如果 limit &lt; 0, regex express 會盡可能的處理匹配, 包含對 空字串 匹配的問題,</li><li>如果 limit = 0, regex express 會儘可能地處理匹配, 但會放棄處理 空字串 匹配的問題。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_split_1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String example = <span class="string">"boo:and:foo"</span>;</span><br><span class="line">    String[] act = example.split(<span class="string">":"</span>, <span class="number">2</span>);</span><br><span class="line">    assertEquals(<span class="string">"boo"</span>, act[<span class="number">0</span>]);</span><br><span class="line">    assertEquals(<span class="string">"and:foo"</span>, act[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_split_2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String example = <span class="string">"boo:and:foo"</span>;</span><br><span class="line">    String[] act = example.split(<span class="string">":"</span>, <span class="number">5</span>);</span><br><span class="line">    assertEquals(<span class="string">"boo"</span>, act[<span class="number">0</span>]);</span><br><span class="line">    assertEquals(<span class="string">"and"</span>, act[<span class="number">1</span>]);</span><br><span class="line">    assertEquals(<span class="string">"foo"</span>, act[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_split_3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String example = <span class="string">"boo:and:foo"</span>;</span><br><span class="line">    String[] act = example.split(<span class="string">":"</span>, -<span class="number">2</span>);</span><br><span class="line">    assertEquals(<span class="string">"boo"</span>, act[<span class="number">0</span>]);</span><br><span class="line">    assertEquals(<span class="string">"and"</span>, act[<span class="number">1</span>]);</span><br><span class="line">    assertEquals(<span class="string">"foo"</span>, act[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_split_4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String example = <span class="string">"boo:and:foo"</span>;</span><br><span class="line">    String[] act = example.split(<span class="string">":"</span>, -<span class="number">1</span>);</span><br><span class="line">    assertEquals(<span class="string">"boo"</span>, act[<span class="number">0</span>]);</span><br><span class="line">    assertEquals(<span class="string">"and"</span>, act[<span class="number">1</span>]);</span><br><span class="line">    assertEquals(<span class="string">"foo"</span>, act[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 等同於 .split(regex)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">assert_split_5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String example = <span class="string">"boo:and:foo"</span>;</span><br><span class="line">    String[] act = example.split(<span class="string">"o"</span>, <span class="number">0</span>);</span><br><span class="line">    assertEquals(<span class="string">"b"</span>, act[<span class="number">0</span>]);</span><br><span class="line">    assertEquals(<span class="string">""</span>, act[<span class="number">1</span>]);</span><br><span class="line">    assertEquals(<span class="string">":and:f"</span>, act[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>在使用 <code>.split(regex)</code> 盡量改為 <code>.split(regex, limit)</code> 去避免空字串切分的問題。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">"a,b,c,,"</span>;</span><br><span class="line">String[] ary = str.split(<span class="string">","</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// result 5</span></span><br><span class="line">System.out.println(ary.length);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Sample&quot;&gt;&lt;a href=&quot;#Sample&quot; class=&quot;headerlink&quot; title=&quot;Sample&quot;&gt;&lt;/a&gt;Sample&lt;/h3&gt;&lt;p&gt;在 code review 的時候發現一個有趣的狀況, 預期 &lt;code&gt;.split(&amp;quot;,&amp;qu
      
    
    </summary>
    
      <category term="java" scheme="https://jerry80409.github.io/categories/java/"/>
    
    
      <category term="java" scheme="https://jerry80409.github.io/tags/java/"/>
    
  </entry>
  
</feed>
